{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Emergency Request API calls\nexport const emergencyRequestAPI = {\n  // Create new emergency request\n  createRequest: async requestData => {\n    try {\n      const response = await apiClient.post('/emergency-requests/create', requestData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get all emergency requests\n  getAllRequests: async () => {\n    try {\n      const response = await apiClient.get('/emergency-requests/all');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get emergency request by ID\n  getRequestById: async id => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update emergency request status\n  updateRequestStatus: async (id, updateData) => {\n    try {\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get emergency requests by status\n  getRequestsByStatus: async status => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get emergency requests by brigade\n  getRequestsByBrigade: async brigadeId => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Find nearest branch\n  findNearestBranch: async coordinates => {\n    try {\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Delete emergency request\n  deleteRequest: async id => {\n    try {\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Branch API calls\nexport const branchAPI = {\n  getAllBranches: async () => {\n    try {\n      const response = await apiClient.get('/branches');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getBranchById: async id => {\n    try {\n      const response = await apiClient.get(`/branches/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// User API calls\nexport const userAPI = {\n  getAllUsers: async () => {\n    try {\n      const response = await apiClient.get('/users');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getUserById: async id => {\n    try {\n      const response = await apiClient.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Employee API calls\nexport const employeeAPI = {\n  getAllEmployees: async () => {\n    try {\n      const response = await apiClient.get('/employees');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getEmployeeById: async id => {\n    try {\n      const response = await apiClient.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","emergencyRequestAPI","createRequest","requestData","response","post","data","getAllRequests","get","getRequestById","id","updateRequestStatus","updateData","put","getRequestsByStatus","status","getRequestsByBrigade","brigadeId","findNearestBranch","coordinates","deleteRequest","delete","branchAPI","getAllBranches","getBranchById","userAPI","getAllUsers","getUserById","employeeAPI","getAllEmployees","getEmployeeById"],"sources":["E:/Y2S2/Project/frontend/src/utils/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Emergency Request API calls\r\nexport const emergencyRequestAPI = {\r\n  // Create new emergency request\r\n  createRequest: async (requestData) => {\r\n    try {\r\n      const response = await apiClient.post('/emergency-requests/create', requestData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all emergency requests\r\n  getAllRequests: async () => {\r\n    try {\r\n      const response = await apiClient.get('/emergency-requests/all');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency request by ID\r\n  getRequestById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update emergency request status\r\n  updateRequestStatus: async (id, updateData) => {\r\n    try {\r\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by status\r\n  getRequestsByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by brigade\r\n  getRequestsByBrigade: async (brigadeId) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Find nearest branch\r\n  findNearestBranch: async (coordinates) => {\r\n    try {\r\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete emergency request\r\n  deleteRequest: async (id) => {\r\n    try {\r\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Branch API calls\r\nexport const branchAPI = {\r\n  getAllBranches: async () => {\r\n    try {\r\n      const response = await apiClient.get('/branches');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/branches/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// User API calls\r\nexport const userAPI = {\r\n  getAllUsers: async () => {\r\n    try {\r\n      const response = await apiClient.get('/users');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getUserById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/users/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Employee API calls\r\nexport const employeeAPI = {\r\n  getAllEmployees: async () => {\r\n    try {\r\n      const response = await apiClient.get('/employees');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getEmployeeById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/employees/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}