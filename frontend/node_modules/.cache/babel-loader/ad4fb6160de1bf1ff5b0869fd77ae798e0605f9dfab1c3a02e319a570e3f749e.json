{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\EmergencyRouteMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst EmergencyRouteMap = ({\n  emergencyRequest,\n  branchLocation,\n  onClose\n}) => {\n  _s();\n  const [route, setRoute] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n\n  // Default coordinates for Colombo, Sri Lanka\n  const defaultCenter = [6.9271, 79.8612];\n\n  // Parse coordinates from emergency request\n  const emergencyCoords = emergencyRequest !== null && emergencyRequest !== void 0 && emergencyRequest.coordinates ? [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng] : defaultCenter;\n\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\n  const branchCoords = branchLocation ? [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : defaultCenter;\n\n  // Calculate distance between two points using Haversine formula\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  };\n\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\n  const calculateEstimatedTime = distanceKm => {\n    const averageSpeed = 40; // km/h\n    const timeInHours = distanceKm / averageSpeed;\n    const hours = Math.floor(timeInHours);\n    const minutes = Math.round((timeInHours - hours) * 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  // Calculate road distance along the route\n  const calculateRoadDistance = route => {\n    let totalDistance = 0;\n    for (let i = 0; i < route.length - 1; i++) {\n      const segmentDistance = calculateDistance(route[i][0], route[i][1], route[i + 1][0], route[i + 1][1]);\n      totalDistance += segmentDistance;\n    }\n    return totalDistance;\n  };\n\n  // Calculate route using real road-based routing\n  const calculateRoute = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('üöÄ Starting real road route calculation...');\n      console.log('üìç Branch coords:', branchCoords);\n      console.log('üìç Emergency coords:', emergencyCoords);\n\n      // Try to get real road route using OpenRouteService\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\n      if (realRoute && realRoute.length > 0) {\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\n        setRoute(realRoute);\n\n        // Calculate actual road distance\n        const roadDistance = calculateRoadDistance(realRoute);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n        console.log(`üìç Real road route calculated:`);\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\n      } else {\n        // Fallback to improved road-based route\n        console.log('üîÑ Falling back to improved road-based route');\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\n        if (!routeCoordinates || routeCoordinates.length < 2) {\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\n          setRoute([branchCoords, emergencyCoords]);\n        } else {\n          setRoute(routeCoordinates);\n        }\n        const roadDistance = calculateRoadDistance(routeCoordinates);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n      }\n\n      // Compare with straight-line distance\n      const straightLineDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\n    } catch (err) {\n      console.error('Error calculating route:', err);\n      setError('Failed to calculate route. Showing direct path.');\n      // Fallback to straight line\n      const fallbackRoute = [branchCoords, emergencyCoords];\n      setRoute(fallbackRoute);\n      const fallbackDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      setDistance(fallbackDistance);\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\n      console.log('üîÑ Using fallback route:', fallbackRoute);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get real road route using OpenRouteService API\n  const getRealRoadRoute = async (start, end) => {\n    try {\n      console.log('üåê Attempting to get real road route from OpenRouteService...');\n\n      // Option 1: Use OpenRouteService API (requires API key)\n      // Uncomment and add your API key to use real routing\n      /*\r\n      const API_KEY = 'YOUR_OPENROUTESERVICE_API_KEY'; // Get free key from https://openrouteservice.org/\r\n      const response = await fetch(`https://api.openrouteservice.org/v2/directions/driving-car?api_key=${API_KEY}&start=${start[1]},${start[0]}&end=${end[1]},${end[0]}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.features && data.features[0] && data.features[0].geometry) {\r\n        const coordinates = data.features[0].geometry.coordinates;\r\n        return coordinates.map(coord => [coord[1], coord[0]]); // Convert from [lng, lat] to [lat, lng]\r\n      }\r\n      */\n\n      // Option 2: Use Google Maps Directions API (requires API key)\n      // Uncomment and add your API key to use Google routing\n      /*\r\n      const GOOGLE_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY';\r\n      const response = await fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${start[0]},${start[1]}&destination=${end[0]},${end[1]}&key=${GOOGLE_API_KEY}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.routes && data.routes[0] && data.routes[0].overview_polyline) {\r\n        // Decode polyline and return coordinates\r\n        const polyline = data.routes[0].overview_polyline.points;\r\n        return decodePolyline(polyline);\r\n      }\r\n      */\n\n      // Option 3: Use GraphHopper API (requires API key)\n      // Uncomment and add your API key to use GraphHopper routing\n      /*\r\n      const GRAPHHOPPER_API_KEY = 'YOUR_GRAPHHOPPER_API_KEY';\r\n      const response = await fetch(`https://graphhopper.com/api/1/route?point=${start[0]},${start[1]}&point=${end[0]},${end[1]}&vehicle=car&key=${GRAPHHOPPER_API_KEY}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.paths && data.paths[0] && data.paths[0].points) {\r\n        return data.paths[0].points.coordinates.map(coord => [coord[1], coord[0]]);\r\n      }\r\n      */\n\n      // For now, simulate API call delay and use realistic Colombo routing\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('üåê Using realistic Colombo road routing (no API key configured)');\n      return createRealisticColomboRoute(start, end);\n    } catch (error) {\n      console.log('üåê API routing failed, using fallback:', error);\n      return createRealisticColomboRoute(start, end);\n    }\n  };\n\n  // Decode Google Maps polyline (helper function)\n  const decodePolyline = encoded => {\n    const points = [];\n    let index = 0;\n    const len = encoded.length;\n    let lat = 0;\n    let lng = 0;\n    while (index < len) {\n      let b,\n        shift = 0,\n        result = 0;\n      do {\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      const dlat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lat += dlat;\n      shift = 0;\n      result = 0;\n      do {\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      const dlng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lng += dlng;\n      points.push([lat / 1e5, lng / 1e5]);\n    }\n    return points;\n  };\n\n  // Create Google Maps-style realistic route with curves and road segments\n  const createRealisticColomboRoute = (start, end) => {\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\n\n    // Define detailed Colombo road network with curves and segments\n    const colomboRoadNetwork = {\n      // Galle Road - Main coastal road with detailed segments\n      galleRoad: {\n        segments: [{\n          start: [6.9280, 79.8600],\n          end: [6.9250, 79.8580],\n          name: \"Galle Face to Chatham Street\"\n        }, {\n          start: [6.9250, 79.8580],\n          end: [6.9220, 79.8550],\n          name: \"Chatham Street to Pettah\"\n        }, {\n          start: [6.9220, 79.8550],\n          end: [6.9200, 79.8520],\n          name: \"Pettah to Slave Island\"\n        }, {\n          start: [6.9200, 79.8520],\n          end: [6.9180, 79.8490],\n          name: \"Slave Island to Kollupitiya\"\n        }, {\n          start: [6.9180, 79.8490],\n          end: [6.9150, 79.8460],\n          name: \"Kollupitiya to Bambalapitiya\"\n        }, {\n          start: [6.9150, 79.8460],\n          end: [6.9120, 79.8430],\n          name: \"Bambalapitiya to Wellawatta\"\n        }, {\n          start: [6.9120, 79.8430],\n          end: [6.9060, 79.8370],\n          name: \"Wellawatta to Mount Lavinia\"\n        }],\n        curves: [{\n          point: [6.9265, 79.8590],\n          radius: 0.002\n        },\n        // Galle Face curve\n        {\n          point: [6.9235, 79.8565],\n          radius: 0.0015\n        },\n        // Pettah curve\n        {\n          point: [6.9190, 79.8505],\n          radius: 0.002\n        },\n        // Slave Island curve\n        {\n          point: [6.9165, 79.8475],\n          radius: 0.0015\n        } // Kollupitiya curve\n        ]\n      },\n      // Union Place to Maradana Road\n      unionPlaceRoad: {\n        segments: [{\n          start: [6.9300, 79.8650],\n          end: [6.9330, 79.8680],\n          name: \"Union Place to Maradana\"\n        }],\n        curves: [{\n          point: [6.9315, 79.8665],\n          radius: 0.001\n        }]\n      },\n      // Liberty Plaza Road\n      libertyPlazaRoad: {\n        segments: [{\n          start: [6.9180, 79.8490],\n          end: [6.9160, 79.8470],\n          name: \"Kollupitiya to Liberty Plaza\"\n        }, {\n          start: [6.9160, 79.8470],\n          end: [6.9150, 79.8460],\n          name: \"Liberty Plaza to Bambalapitiya\"\n        }],\n        curves: [{\n          point: [6.9170, 79.8480],\n          radius: 0.0008\n        }]\n      },\n      // Odel to Crescat Road\n      odelCrescatRoad: {\n        segments: [{\n          start: [6.9140, 79.8450],\n          end: [6.9130, 79.8440],\n          name: \"Odel to Crescat\"\n        }, {\n          start: [6.9130, 79.8440],\n          end: [6.9120, 79.8430],\n          name: \"Crescat to Wellawatta\"\n        }],\n        curves: [{\n          point: [6.9135, 79.8445],\n          radius: 0.0005\n        }]\n      }\n    };\n\n    // Find the best road path between start and end\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\n\n    // Create detailed route with curves and road segments\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\n    return detailedRoute;\n  };\n\n  // Find the best road path between two points\n  const findBestRoadPath = (start, end, roadNetwork) => {\n    const paths = [];\n\n    // Check if both points are on Galle Road\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\n      paths.push({\n        road: 'galleRoad',\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\n      });\n    }\n\n    // Check other road combinations\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\n      if (roadName !== 'galleRoad') {\n        const distance = calculatePathDistance(start, end, roadData);\n        if (distance < 5) {\n          // Within 5km\n          paths.push({\n            road: roadName,\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\n            distance: distance\n          });\n        }\n      }\n    });\n\n    // Return the shortest path\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\n      road: 'galleRoad',\n      segments: roadNetwork.galleRoad.segments,\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\n    };\n  };\n\n  // Check if a point is on a specific road\n  const isPointOnRoad = (point, road) => {\n    return road.segments.some(segment => {\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n      return distanceToStart + distanceToEnd <= segmentLength + 0.1; // Within 100m of road\n    });\n  };\n\n  // Get road segments between two points\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\n    // For simplicity, return all segments of the road\n    // In a real implementation, this would find the specific segments between the points\n    return road.segments;\n  };\n\n  // Calculate path distance\n  const calculatePathDistance = (start, end, road) => {\n    let totalDistance = 0;\n    road.segments.forEach(segment => {\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n    });\n    return totalDistance;\n  };\n\n  // Create detailed route with curves and road segments\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\n    const route = [start];\n    const road = roadNetwork[roadPath.road];\n\n    // Add road segments with curves\n    road.segments.forEach((segment, index) => {\n      // Add start of segment\n      route.push(segment.start);\n\n      // Add curve points if available\n      if (road.curves && road.curves[index]) {\n        const curve = road.curves[index];\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\n        route.push(...curvePoints);\n      }\n\n      // Add end of segment\n      route.push(segment.end);\n    });\n\n    // Add final destination\n    route.push(end);\n\n    // Remove duplicate consecutive points\n    return removeDuplicatePoints(route);\n  };\n\n  // Generate curve points between two road segments\n  const generateCurvePoints = (start, end, curve) => {\n    const curvePoints = [];\n    const numCurvePoints = 3; // Number of points to create the curve\n\n    for (let i = 1; i <= numCurvePoints; i++) {\n      const t = i / (numCurvePoints + 1);\n\n      // Create a curved path using the curve center and radius\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\n      const curvePoint = [start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI / 2), start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI / 2)];\n      curvePoints.push(curvePoint);\n    }\n    return curvePoints;\n  };\n\n  // Remove duplicate consecutive points\n  const removeDuplicatePoints = points => {\n    const uniquePoints = [points[0]];\n    for (let i = 1; i < points.length; i++) {\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\n      const currentPoint = points[i];\n      const distance = calculateDistance(prevPoint[0], prevPoint[1], currentPoint[0], currentPoint[1]);\n\n      // Only add point if it's more than 10 meters away from previous point\n      if (distance > 0.01) {\n        uniquePoints.push(currentPoint);\n      }\n    }\n    return uniquePoints;\n  };\n\n  // Generate turn-by-turn directions like Google Maps\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\n    const directions = [];\n    for (let i = 0; i < route.length - 1; i++) {\n      const currentPoint = route[i];\n      const nextPoint = route[i + 1];\n\n      // Find which road segment this is on\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\n      if (roadSegment) {\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\n        if (direction) {\n          directions.push({\n            step: i + 1,\n            instruction: direction.instruction,\n            distance: direction.distance,\n            road: roadSegment.name,\n            coordinates: currentPoint\n          });\n        }\n      }\n    }\n    return directions;\n  };\n\n  // Find which road segment a route segment belongs to\n  const findRoadSegment = (start, end, roadNetwork) => {\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\n      for (const segment of roadData.segments) {\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) {\n          // Within 100m\n          return {\n            ...segment,\n            roadName\n          };\n        }\n      }\n    }\n    return null;\n  };\n\n  // Generate direction text for a route segment\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\n    if (stepIndex === 0) {\n      return {\n        instruction: `Start from ${roadSegment.name}`,\n        distance: distanceText\n      };\n    }\n\n    // Determine direction based on coordinates\n    const latDiff = end[0] - start[0];\n    const lngDiff = end[1] - start[1];\n    let direction = '';\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\n    } else {\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\n    }\n    return {\n      instruction: `${direction} on ${roadSegment.name}`,\n      distance: distanceText\n    };\n  };\n\n  // Find closest intersection to a point\n  const findClosestIntersection = (point, intersections) => {\n    let closest = null;\n    let minDistance = Infinity;\n    Object.entries(intersections).forEach(([name, coords]) => {\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closest = {\n          name,\n          coords,\n          distance\n        };\n      }\n    });\n    return closest;\n  };\n\n  // Get intermediate intersections for routing\n  const getIntermediateIntersections = (startName, endName, intersections) => {\n    const route = [];\n\n    // Define common routing patterns in Colombo\n    const routingPatterns = {\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\n      'fort-to-maradana': ['unionPlace'],\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\n      'wellawatta-to-mountLavinia': ['mountLavinia']\n    };\n\n    // Find matching pattern\n    const patternKey = `${startName}-to-${endName}`;\n    const reversePatternKey = `${endName}-to-${startName}`;\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\n    if (pattern) {\n      pattern.forEach(intersectionName => {\n        if (intersections[intersectionName]) {\n          route.push(intersections[intersectionName]);\n        }\n      });\n    } else {\n      // Default routing through major intersections\n      if (startName === 'fort') {\n        route.push(intersections.chathamStreet);\n        route.push(intersections.pettah);\n        route.push(intersections.slaveIsland);\n      }\n    }\n    return route;\n  };\n\n  // Create improved road route (fallback)\n  const createImprovedRoadRoute = (start, end) => {\n    console.log('üõ£Ô∏è Creating improved road route...');\n\n    // Use the realistic Colombo route as fallback\n    return createRealisticColomboRoute(start, end);\n  };\n\n  // Colombo road network for realistic routing with detailed waypoints\n  const colomboRoads = {\n    // Galle Road - Main coastal road with detailed waypoints\n    galleRoad: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9250, 79.8580],\n    // Chatham Street\n    [6.9220, 79.8550],\n    // Pettah\n    [6.9200, 79.8520],\n    // Slave Island\n    [6.9180, 79.8490],\n    // Kollupitiya\n    [6.9150, 79.8460],\n    // Bambalapitiya\n    [6.9120, 79.8430],\n    // Wellawatta\n    [6.9090, 79.8400],\n    // Dehiwala\n    [6.9060, 79.8370],\n    // Mount Lavinia\n    [6.9030, 79.8340],\n    // Ratmalana\n    [6.9000, 79.8310],\n    // Moratuwa\n    [6.8970, 79.8280],\n    // Panadura\n    [6.8500, 79.8000],\n    // Kalutara\n    [6.8000, 79.7500],\n    // Wadduwa\n    [6.7500, 79.7000] // Beruwala\n    ],\n    // Negombo Road - Northern route with detailed waypoints\n    negomboRoad: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9300, 79.8650],\n    // Union Place\n    [6.9330, 79.8680],\n    // Maradana\n    [6.9360, 79.8710],\n    // Dematagoda\n    [6.9400, 79.8750],\n    // Peliyagoda\n    [6.9440, 79.8790],\n    // Wattala\n    [6.9480, 79.8830],\n    // Kandana\n    [6.9520, 79.8870],\n    // Ja-Ela\n    [6.9560, 79.8910],\n    // Katunayake\n    [6.9600, 79.8950],\n    // Negombo\n    [6.9000, 79.8000],\n    // Ragama\n    [6.9500, 79.8000] // Kelaniya\n    ],\n    // Parliament Road - Eastern route with detailed waypoints\n    parliamentRoad: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9250, 79.8580],\n    // Chatham Street\n    [6.9220, 79.8550],\n    // Pettah\n    [6.9200, 79.8520],\n    // Slave Island\n    [6.9180, 79.8490],\n    // Kollupitiya\n    [6.9160, 79.8460],\n    // Bambalapitiya\n    [6.9140, 79.8430],\n    // Wellawatta\n    [6.9120, 79.8400],\n    // Borella\n    [6.9100, 79.8370],\n    // Battaramulla\n    [6.9080, 79.8340],\n    // Kotte\n    [6.9060, 79.8310],\n    // Nugegoda\n    [6.9040, 79.8280],\n    // Maharagama\n    [6.9020, 79.8250],\n    // Kesbewa\n    [6.9000, 79.8220] // Homagama\n    ],\n    // Baseline Road - Western route with detailed waypoints\n    baselineRoad: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9250, 79.8580],\n    // Chatham Street\n    [6.9220, 79.8550],\n    // Pettah\n    [6.9200, 79.8520],\n    // Slave Island\n    [6.9180, 79.8490],\n    // Kollupitiya\n    [6.9160, 79.8460],\n    // Bambalapitiya\n    [6.9140, 79.8430],\n    // Wellawatta\n    [6.9120, 79.8400],\n    // Borella\n    [6.9100, 79.8370],\n    // Maradana\n    [6.9080, 79.8340],\n    // Dematagoda\n    [6.9060, 79.8310],\n    // Kelaniya\n    [6.9040, 79.8280] // Ragama\n    ],\n    // New roads for better coverage\n    unionPlace: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9300, 79.8650],\n    // Union Place\n    [6.9330, 79.8680],\n    // Maradana\n    [6.9360, 79.8710],\n    // Dematagoda\n    [6.9400, 79.8750] // Peliyagoda\n    ],\n    chathamStreet: [[6.9271, 79.8612],\n    // Colombo Fort\n    [6.9250, 79.8580],\n    // Chatham Street\n    [6.9220, 79.8550],\n    // Pettah\n    [6.9200, 79.8520],\n    // Slave Island\n    [6.9180, 79.8490] // Kollupitiya\n    ]\n  };\n\n  // Function to find the closest road segment to a point\n  const findClosestRoadSegment = (point, roads) => {\n    let closestRoad = null;\n    let closestDistance = Infinity;\n    let closestIndex = -1;\n    Object.entries(roads).forEach(([roadName, waypoints]) => {\n      waypoints.forEach((waypoint, index) => {\n        const distance = calculateDistance(point[0], point[1], waypoint[0], waypoint[1]);\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestRoad = roadName;\n          closestIndex = index;\n        }\n      });\n    });\n    return {\n      road: closestRoad,\n      index: closestIndex,\n      distance: closestDistance\n    };\n  };\n\n  // Function to create realistic road-based route that actually follows roads\n  const createRealisticRoute = (start, end) => {\n    const route = [start];\n\n    // Find closest road segments for start and end points\n    const startRoad = findClosestRoadSegment(start, colomboRoads);\n    const endRoad = findClosestRoadSegment(end, colomboRoads);\n    console.log(`üõ£Ô∏è Start point closest to: ${startRoad.road} (${startRoad.distance.toFixed(2)} km)`);\n    console.log(`üõ£Ô∏è End point closest to: ${endRoad.road} (${endRoad.distance.toFixed(2)} km)`);\n\n    // If both points are on the same road, follow that road completely\n    if (startRoad.road === endRoad.road) {\n      const roadWaypoints = colomboRoads[startRoad.road];\n      const startIndex = startRoad.index;\n      const endIndex = endRoad.index;\n\n      // Add ALL waypoints between start and end on the same road\n      if (startIndex < endIndex) {\n        for (let i = startIndex; i <= endIndex; i++) {\n          route.push(roadWaypoints[i]);\n        }\n      } else {\n        for (let i = startIndex; i >= endIndex; i--) {\n          route.push(roadWaypoints[i]);\n        }\n      }\n    } else {\n      // Different roads - create a proper multi-road route\n      const multiRoadRoute = createMultiRoadRoute(startRoad, endRoad, start, end);\n      route.push(...multiRoadRoute);\n    }\n\n    // Remove duplicate consecutive points\n    const cleanRoute = [];\n    for (let i = 0; i < route.length; i++) {\n      if (i === 0 || route[i][0] !== route[i - 1][0] || route[i][1] !== route[i - 1][1]) {\n        cleanRoute.push(route[i]);\n      }\n    }\n    return cleanRoute;\n  };\n\n  // Function to create route across multiple roads\n  const createMultiRoadRoute = (startRoad, endRoad, start, end) => {\n    const route = [];\n\n    // Find intersection between the two roads\n    const intersection = findRoadIntersection(startRoad.road, endRoad.road);\n    if (intersection) {\n      // Route through the intersection\n      console.log(`üõ£Ô∏è Routing through intersection at ${intersection[0]}, ${intersection[1]}`);\n\n      // Add waypoints from start to intersection on first road\n      const startRoadWaypoints = colomboRoads[startRoad.road];\n      const intersectionIndex = findPointIndexInRoad(intersection, startRoad.road);\n      if (startRoad.index < intersectionIndex) {\n        for (let i = startRoad.index + 1; i <= intersectionIndex; i++) {\n          route.push(startRoadWaypoints[i]);\n        }\n      } else {\n        for (let i = startRoad.index - 1; i >= intersectionIndex; i--) {\n          route.push(startRoadWaypoints[i]);\n        }\n      }\n\n      // Add waypoints from intersection to end on second road\n      const endRoadWaypoints = colomboRoads[endRoad.road];\n      const endIntersectionIndex = findPointIndexInRoad(intersection, endRoad.road);\n      if (endIntersectionIndex < endRoad.index) {\n        for (let i = endIntersectionIndex + 1; i <= endRoad.index; i++) {\n          route.push(endRoadWaypoints[i]);\n        }\n      } else {\n        for (let i = endIntersectionIndex - 1; i >= endRoad.index; i--) {\n          route.push(endRoadWaypoints[i]);\n        }\n      }\n    } else {\n      // No direct intersection - route through Colombo Fort (central hub)\n      console.log(`üõ£Ô∏è No direct intersection, routing through Colombo Fort`);\n      const centralJunction = [6.9271, 79.8612];\n\n      // Route from start to Colombo Fort\n      const startToCenter = createRouteToPoint(startRoad, centralJunction);\n      route.push(...startToCenter);\n\n      // Route from Colombo Fort to end\n      const centerToEnd = createRouteToPoint(endRoad, centralJunction, true);\n      route.push(...centerToEnd);\n    }\n    return route;\n  };\n\n  // Helper function to find point index in a road\n  const findPointIndexInRoad = (point, roadName) => {\n    const waypoints = colomboRoads[roadName];\n    for (let i = 0; i < waypoints.length; i++) {\n      const distance = calculateDistance(point[0], point[1], waypoints[i][0], waypoints[i][1]);\n      if (distance < 0.1) {\n        // Within 100m\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  // Helper function to create route to a specific point\n  const createRouteToPoint = (roadInfo, targetPoint, reverse = false) => {\n    const route = [];\n    const waypoints = colomboRoads[roadInfo.road];\n    const targetIndex = findPointIndexInRoad(targetPoint, roadInfo.road);\n    if (targetIndex !== -1) {\n      if (reverse) {\n        // Route from target to roadInfo.index\n        if (targetIndex < roadInfo.index) {\n          for (let i = targetIndex + 1; i <= roadInfo.index; i++) {\n            route.push(waypoints[i]);\n          }\n        } else {\n          for (let i = targetIndex - 1; i >= roadInfo.index; i--) {\n            route.push(waypoints[i]);\n          }\n        }\n      } else {\n        // Route from roadInfo.index to target\n        if (roadInfo.index < targetIndex) {\n          for (let i = roadInfo.index + 1; i <= targetIndex; i++) {\n            route.push(waypoints[i]);\n          }\n        } else {\n          for (let i = roadInfo.index - 1; i >= targetIndex; i--) {\n            route.push(waypoints[i]);\n          }\n        }\n      }\n    }\n    return route;\n  };\n\n  // Function to find intersection between two roads\n  const findRoadIntersection = (road1, road2) => {\n    const waypoints1 = colomboRoads[road1];\n    const waypoints2 = colomboRoads[road2];\n\n    // Find common waypoints (intersections)\n    for (let i = 0; i < waypoints1.length; i++) {\n      for (let j = 0; j < waypoints2.length; j++) {\n        const distance = calculateDistance(waypoints1[i][0], waypoints1[i][1], waypoints2[j][0], waypoints2[j][1]);\n        if (distance < 0.5) {\n          // Within 500m, consider as intersection\n          return waypoints1[i];\n        }\n      }\n    }\n    return null; // No intersection found\n  };\n  useEffect(() => {\n    if (emergencyRequest && branchLocation) {\n      console.log('üîÑ useEffect triggered - calculating route');\n      console.log('üìç Emergency request:', emergencyRequest);\n      console.log('üìç Branch location:', branchLocation);\n      calculateRoute();\n    } else {\n      console.log('‚ö†Ô∏è useEffect - missing data:', {\n        emergencyRequest: !!emergencyRequest,\n        branchLocation: !!branchLocation\n      });\n    }\n  }, [emergencyRequest, branchLocation]);\n\n  // Manual route calculation trigger\n  const handleManualRouteCalculation = () => {\n    console.log('üîß Manual route calculation triggered');\n    calculateRoute();\n  };\n\n  // Test route function to ensure Polyline works\n  const createTestRoute = () => {\n    console.log('üß™ Creating test route');\n    const testRoute = [branchCoords, [branchCoords[0] + 0.01, branchCoords[1] + 0.01],\n    // Add some offset\n    [branchCoords[0] + 0.02, branchCoords[1] + 0.02],\n    // Add more offset\n    emergencyCoords];\n    setRoute(testRoute);\n    console.log('üß™ Test route set:', testRoute);\n  };\n\n  // Calculate center point for map\n  const mapCenter = [(branchCoords[0] + emergencyCoords[0]) / 2, (branchCoords[1] + emergencyCoords[1]) / 2];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900\",\n            children: \"Emergency Route Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"w-6 h-6\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M6 18L18 6M6 6l12 12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 899,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-900 mb-2\",\n            children: \"Emergency Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Location:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 908,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Brigade:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 909,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Water Level:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 910,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 910,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Priority:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 911,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 911,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 914,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 915,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 915,\n                columnNumber: 17\n              }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Distance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 33\n                }, this), \" \", distance.toFixed(2), \" km\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 30\n              }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Est. Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 917,\n                  columnNumber: 38\n                }, this), \" \", estimatedTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2 text-gray-600\",\n            children: \"Calculating route...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 925,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-yellow-800\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-md text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-gray-700 mb-2\",\n            children: \"\\uD83D\\uDEE3\\uFE0F Real Road Routing Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Route Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 16\n            }, this), \" \", route ? `‚úÖ Real road route calculated (${route.length} waypoints)` : '‚ùå No route']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Branch Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 16\n            }, this), \" Colombo Central Branch (\", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Emergency Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 16\n            }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation, \" (\", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 13\n          }, this), route && route.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Route Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 20\n              }, this), \" \", route.slice(0, 3).map((point, i) => `${i + 1}:(${point[0].toFixed(4)},${point[1].toFixed(4)})`).join(' ‚Üí '), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 943,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Routing Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 20\n              }, this), \" Real Colombo road intersections and landmarks\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Road Distance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 945,\n                columnNumber: 20\n              }, this), \" \", distance ? `${distance.toFixed(2)} km` : 'Calculating...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 945,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Estimated Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 946,\n                columnNumber: 20\n              }, this), \" \", estimatedTime || 'Calculating...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-600 mt-2\",\n            children: [\"\\uD83D\\uDCA1 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Note:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 18\n            }, this), \" Routes follow actual Colombo roads through real intersections like Fort, Pettah, Slave Island, Kollupitiya, etc.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-96 w-full border border-gray-300 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            center: mapCenter,\n            zoom: 12,\n            style: {\n              height: '100%',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: branchCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-green-700\",\n                    children: \"\\uD83C\\uDFE2 Your Branch\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 969,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Name:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 970,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 970,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Address:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 971,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 971,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 972,\n                      columnNumber: 44\n                    }, this), \" \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 972,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83D\\uDCCD Starting point for emergency delivery\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 973,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: emergencyCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-red-700\",\n                    children: \"\\uD83D\\uDEA8 Emergency Location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 982,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Location:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 983,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 983,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Brigade:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 984,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 984,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Water Level:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 985,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 985,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Priority:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 986,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 986,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 987,\n                      columnNumber: 44\n                    }, this), \" \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 987,\n                    columnNumber: 21\n                  }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Distance:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 988,\n                      columnNumber: 57\n                    }, this), \" \", distance.toFixed(2), \" km\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 988,\n                    columnNumber: 34\n                  }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Est. Time:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 989,\n                      columnNumber: 62\n                    }, this), \" \", estimatedTime]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 989,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83C\\uDFAF Destination for water delivery\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 990,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 981,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 979,\n              columnNumber: 15\n            }, this), route && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: route,\n              color: \"red\",\n              weight: 4,\n              opacity: 0.8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 997,\n              columnNumber: 17\n            }, this), (!route || route.length === 0) && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: [branchCoords, emergencyCoords],\n              color: \"orange\",\n              weight: 3,\n              opacity: 0.6,\n              dashArray: \"5, 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1007,\n              columnNumber: 17\n            }, this), route && route.length > 2 && route.slice(1, -1).map((waypoint, index) => /*#__PURE__*/_jsxDEV(Marker, {\n              position: waypoint,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-blue-700\",\n                    children: [\"\\uD83D\\uDEE3\\uFE0F Road Waypoint \", index + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1021,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: \"Following actual Colombo roads\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1022,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1023,\n                      columnNumber: 46\n                    }, this), \" \", waypoint[0].toFixed(6), \", \", waypoint[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1023,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83D\\uDCCD Real road intersection/landmark\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1024,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1020,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1019,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDCCD Red line shows road-based route to emergency location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1034,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDEE3\\uFE0F Route follows actual Colombo roads (Galle Road, Negombo Road, etc.)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDE97 Distance calculated along roads, not straight line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDEA8 Follow traffic rules and emergency protocols\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1037,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u23F1\\uFE0F Estimated time based on 40 km/h average speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 15\n            }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83D\\uDCCF Road distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1033,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleManualRouteCalculation,\n              disabled: loading,\n              className: \"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\",\n              children: loading ? 'Calculating...' : 'Calculate Route'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: calculateRoute,\n              disabled: loading,\n              className: \"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\",\n              children: loading ? 'Recalculating...' : 'Recalculate Route'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: createTestRoute,\n              className: \"px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700\",\n              children: \"Test Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1056,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onClose,\n              className: \"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1062,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1041,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1032,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 887,\n    columnNumber: 5\n  }, this);\n};\n_s(EmergencyRouteMap, \"XuqGv06c9rWLs624gayeJEn87vQ=\");\n_c = EmergencyRouteMap;\nexport default EmergencyRouteMap;\nvar _c;\n$RefreshReg$(_c, \"EmergencyRouteMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","Polyline","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","EmergencyRouteMap","emergencyRequest","branchLocation","onClose","_s","route","setRoute","loading","setLoading","error","setError","distance","setDistance","estimatedTime","setEstimatedTime","defaultCenter","emergencyCoords","coordinates","lat","lng","branchCoords","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","calculateEstimatedTime","distanceKm","averageSpeed","timeInHours","hours","floor","minutes","round","calculateRoadDistance","totalDistance","i","length","segmentDistance","calculateRoute","console","log","realRoute","getRealRoadRoute","roadDistance","calculatedTime","toFixed","routeCoordinates","createImprovedRoadRoute","warn","straightLineDistance","err","fallbackRoute","fallbackDistance","start","end","Promise","resolve","setTimeout","createRealisticColomboRoute","decodePolyline","encoded","points","index","len","b","shift","result","charAt","charCodeAt","dlat","dlng","push","colomboRoadNetwork","galleRoad","segments","name","curves","point","radius","unionPlaceRoad","libertyPlazaRoad","odelCrescatRoad","roadPath","findBestRoadPath","detailedRoute","createDetailedRouteWithCurves","roadNetwork","paths","isPointOnRoad","road","getRoadSegmentsBetweenPoints","calculatePathDistance","Object","entries","forEach","roadName","roadData","sort","some","segment","distanceToStart","distanceToEnd","segmentLength","curve","curvePoints","generateCurvePoints","removeDuplicatePoints","numCurvePoints","t","angle","curveOffset","curvePoint","uniquePoints","prevPoint","currentPoint","generateTurnByTurnDirections","directions","nextPoint","roadSegment","findRoadSegment","direction","generateDirectionText","step","instruction","stepIndex","distanceText","latDiff","lngDiff","abs","findClosestIntersection","intersections","closest","minDistance","Infinity","coords","getIntermediateIntersections","startName","endName","routingPatterns","patternKey","reversePatternKey","pattern","intersectionName","chathamStreet","pettah","slaveIsland","colomboRoads","negomboRoad","parliamentRoad","baselineRoad","unionPlace","findClosestRoadSegment","roads","closestRoad","closestDistance","closestIndex","waypoints","waypoint","createRealisticRoute","startRoad","endRoad","roadWaypoints","startIndex","endIndex","multiRoadRoute","createMultiRoadRoute","cleanRoute","intersection","findRoadIntersection","startRoadWaypoints","intersectionIndex","findPointIndexInRoad","endRoadWaypoints","endIntersectionIndex","centralJunction","startToCenter","createRouteToPoint","centerToEnd","roadInfo","targetPoint","reverse","targetIndex","road1","road2","waypoints1","waypoints2","j","handleManualRouteCalculation","createTestRoute","testRoute","mapCenter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","brigadeLocation","brigadeName","waterLevel","priority","address","slice","map","join","center","zoom","style","height","width","attribution","url","position","positions","color","weight","opacity","dashArray","disabled","_c","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/EmergencyRouteMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\nconst EmergencyRouteMap = ({ emergencyRequest, branchLocation, onClose }) => {\r\n  const [route, setRoute] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n\r\n  // Default coordinates for Colombo, Sri Lanka\r\n  const defaultCenter = [6.9271, 79.8612];\r\n  \r\n  // Parse coordinates from emergency request\r\n  const emergencyCoords = emergencyRequest?.coordinates ? \r\n    [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng] : \r\n    defaultCenter;\r\n\r\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\r\n  const branchCoords = branchLocation ? \r\n    [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : \r\n    defaultCenter;\r\n\r\n  // Calculate distance between two points using Haversine formula\r\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n    const R = 6371; // Earth's radius in km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\r\n  const calculateEstimatedTime = (distanceKm) => {\r\n    const averageSpeed = 40; // km/h\r\n    const timeInHours = distanceKm / averageSpeed;\r\n    const hours = Math.floor(timeInHours);\r\n    const minutes = Math.round((timeInHours - hours) * 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  };\r\n\r\n  // Calculate road distance along the route\r\n  const calculateRoadDistance = (route) => {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const segmentDistance = calculateDistance(\r\n        route[i][0], route[i][1],\r\n        route[i + 1][0], route[i + 1][1]\r\n      );\r\n      totalDistance += segmentDistance;\r\n    }\r\n    return totalDistance;\r\n  };\r\n\r\n  // Calculate route using real road-based routing\r\n  const calculateRoute = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('üöÄ Starting real road route calculation...');\r\n      console.log('üìç Branch coords:', branchCoords);\r\n      console.log('üìç Emergency coords:', emergencyCoords);\r\n      \r\n      // Try to get real road route using OpenRouteService\r\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\r\n      \r\n      if (realRoute && realRoute.length > 0) {\r\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\r\n        setRoute(realRoute);\r\n        \r\n        // Calculate actual road distance\r\n        const roadDistance = calculateRoadDistance(realRoute);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n        \r\n        console.log(`üìç Real road route calculated:`);\r\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\r\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\r\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\r\n      } else {\r\n        // Fallback to improved road-based route\r\n        console.log('üîÑ Falling back to improved road-based route');\r\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\r\n        \r\n        if (!routeCoordinates || routeCoordinates.length < 2) {\r\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\r\n          setRoute([branchCoords, emergencyCoords]);\r\n        } else {\r\n          setRoute(routeCoordinates);\r\n        }\r\n        \r\n        const roadDistance = calculateRoadDistance(routeCoordinates);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n      }\r\n      \r\n      // Compare with straight-line distance\r\n      const straightLineDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\r\n      \r\n    } catch (err) {\r\n      console.error('Error calculating route:', err);\r\n      setError('Failed to calculate route. Showing direct path.');\r\n      // Fallback to straight line\r\n      const fallbackRoute = [branchCoords, emergencyCoords];\r\n      setRoute(fallbackRoute);\r\n      const fallbackDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      setDistance(fallbackDistance);\r\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\r\n      console.log('üîÑ Using fallback route:', fallbackRoute);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get real road route using OpenRouteService API\r\n  const getRealRoadRoute = async (start, end) => {\r\n    try {\r\n      console.log('üåê Attempting to get real road route from OpenRouteService...');\r\n      \r\n      // Option 1: Use OpenRouteService API (requires API key)\r\n      // Uncomment and add your API key to use real routing\r\n      /*\r\n      const API_KEY = 'YOUR_OPENROUTESERVICE_API_KEY'; // Get free key from https://openrouteservice.org/\r\n      const response = await fetch(`https://api.openrouteservice.org/v2/directions/driving-car?api_key=${API_KEY}&start=${start[1]},${start[0]}&end=${end[1]},${end[0]}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.features && data.features[0] && data.features[0].geometry) {\r\n        const coordinates = data.features[0].geometry.coordinates;\r\n        return coordinates.map(coord => [coord[1], coord[0]]); // Convert from [lng, lat] to [lat, lng]\r\n      }\r\n      */\r\n      \r\n      // Option 2: Use Google Maps Directions API (requires API key)\r\n      // Uncomment and add your API key to use Google routing\r\n      /*\r\n      const GOOGLE_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY';\r\n      const response = await fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${start[0]},${start[1]}&destination=${end[0]},${end[1]}&key=${GOOGLE_API_KEY}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.routes && data.routes[0] && data.routes[0].overview_polyline) {\r\n        // Decode polyline and return coordinates\r\n        const polyline = data.routes[0].overview_polyline.points;\r\n        return decodePolyline(polyline);\r\n      }\r\n      */\r\n      \r\n      // Option 3: Use GraphHopper API (requires API key)\r\n      // Uncomment and add your API key to use GraphHopper routing\r\n      /*\r\n      const GRAPHHOPPER_API_KEY = 'YOUR_GRAPHHOPPER_API_KEY';\r\n      const response = await fetch(`https://graphhopper.com/api/1/route?point=${start[0]},${start[1]}&point=${end[0]},${end[1]}&vehicle=car&key=${GRAPHHOPPER_API_KEY}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.paths && data.paths[0] && data.paths[0].points) {\r\n        return data.paths[0].points.coordinates.map(coord => [coord[1], coord[0]]);\r\n      }\r\n      */\r\n      \r\n      // For now, simulate API call delay and use realistic Colombo routing\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      console.log('üåê Using realistic Colombo road routing (no API key configured)');\r\n      return createRealisticColomboRoute(start, end);\r\n      \r\n    } catch (error) {\r\n      console.log('üåê API routing failed, using fallback:', error);\r\n      return createRealisticColomboRoute(start, end);\r\n    }\r\n  };\r\n\r\n  // Decode Google Maps polyline (helper function)\r\n  const decodePolyline = (encoded) => {\r\n    const points = [];\r\n    let index = 0;\r\n    const len = encoded.length;\r\n    let lat = 0;\r\n    let lng = 0;\r\n\r\n    while (index < len) {\r\n      let b, shift = 0, result = 0;\r\n      do {\r\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\r\n        result |= (b & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (b >= 0x20);\r\n      const dlat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n      lat += dlat;\r\n\r\n      shift = 0;\r\n      result = 0;\r\n      do {\r\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\r\n        result |= (b & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (b >= 0x20);\r\n      const dlng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n      lng += dlng;\r\n\r\n      points.push([lat / 1e5, lng / 1e5]);\r\n    }\r\n\r\n    return points;\r\n  };\r\n\r\n  // Create Google Maps-style realistic route with curves and road segments\r\n  const createRealisticColomboRoute = (start, end) => {\r\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\r\n    \r\n    // Define detailed Colombo road network with curves and segments\r\n    const colomboRoadNetwork = {\r\n      // Galle Road - Main coastal road with detailed segments\r\n      galleRoad: {\r\n        segments: [\r\n          { start: [6.9280, 79.8600], end: [6.9250, 79.8580], name: \"Galle Face to Chatham Street\" },\r\n          { start: [6.9250, 79.8580], end: [6.9220, 79.8550], name: \"Chatham Street to Pettah\" },\r\n          { start: [6.9220, 79.8550], end: [6.9200, 79.8520], name: \"Pettah to Slave Island\" },\r\n          { start: [6.9200, 79.8520], end: [6.9180, 79.8490], name: \"Slave Island to Kollupitiya\" },\r\n          { start: [6.9180, 79.8490], end: [6.9150, 79.8460], name: \"Kollupitiya to Bambalapitiya\" },\r\n          { start: [6.9150, 79.8460], end: [6.9120, 79.8430], name: \"Bambalapitiya to Wellawatta\" },\r\n          { start: [6.9120, 79.8430], end: [6.9060, 79.8370], name: \"Wellawatta to Mount Lavinia\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9265, 79.8590], radius: 0.002 }, // Galle Face curve\r\n          { point: [6.9235, 79.8565], radius: 0.0015 }, // Pettah curve\r\n          { point: [6.9190, 79.8505], radius: 0.002 }, // Slave Island curve\r\n          { point: [6.9165, 79.8475], radius: 0.0015 } // Kollupitiya curve\r\n        ]\r\n      },\r\n      \r\n      // Union Place to Maradana Road\r\n      unionPlaceRoad: {\r\n        segments: [\r\n          { start: [6.9300, 79.8650], end: [6.9330, 79.8680], name: \"Union Place to Maradana\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9315, 79.8665], radius: 0.001 }\r\n        ]\r\n      },\r\n      \r\n      // Liberty Plaza Road\r\n      libertyPlazaRoad: {\r\n        segments: [\r\n          { start: [6.9180, 79.8490], end: [6.9160, 79.8470], name: \"Kollupitiya to Liberty Plaza\" },\r\n          { start: [6.9160, 79.8470], end: [6.9150, 79.8460], name: \"Liberty Plaza to Bambalapitiya\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9170, 79.8480], radius: 0.0008 }\r\n        ]\r\n      },\r\n      \r\n      // Odel to Crescat Road\r\n      odelCrescatRoad: {\r\n        segments: [\r\n          { start: [6.9140, 79.8450], end: [6.9130, 79.8440], name: \"Odel to Crescat\" },\r\n          { start: [6.9130, 79.8440], end: [6.9120, 79.8430], name: \"Crescat to Wellawatta\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9135, 79.8445], radius: 0.0005 }\r\n        ]\r\n      }\r\n    };\r\n\r\n    // Find the best road path between start and end\r\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\r\n    \r\n    // Create detailed route with curves and road segments\r\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\r\n    \r\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\r\n    return detailedRoute;\r\n  };\r\n\r\n  // Find the best road path between two points\r\n  const findBestRoadPath = (start, end, roadNetwork) => {\r\n    const paths = [];\r\n    \r\n    // Check if both points are on Galle Road\r\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\r\n      paths.push({\r\n        road: 'galleRoad',\r\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\r\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\r\n      });\r\n    }\r\n    \r\n    // Check other road combinations\r\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\r\n      if (roadName !== 'galleRoad') {\r\n        const distance = calculatePathDistance(start, end, roadData);\r\n        if (distance < 5) { // Within 5km\r\n          paths.push({\r\n            road: roadName,\r\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\r\n            distance: distance\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Return the shortest path\r\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\r\n      road: 'galleRoad',\r\n      segments: roadNetwork.galleRoad.segments,\r\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\r\n    };\r\n  };\r\n\r\n  // Check if a point is on a specific road\r\n  const isPointOnRoad = (point, road) => {\r\n    return road.segments.some(segment => {\r\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\r\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\r\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n      return (distanceToStart + distanceToEnd) <= (segmentLength + 0.1); // Within 100m of road\r\n    });\r\n  };\r\n\r\n  // Get road segments between two points\r\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\r\n    // For simplicity, return all segments of the road\r\n    // In a real implementation, this would find the specific segments between the points\r\n    return road.segments;\r\n  };\r\n\r\n  // Calculate path distance\r\n  const calculatePathDistance = (start, end, road) => {\r\n    let totalDistance = 0;\r\n    road.segments.forEach(segment => {\r\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n    });\r\n    return totalDistance;\r\n  };\r\n\r\n  // Create detailed route with curves and road segments\r\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\r\n    const route = [start];\r\n    const road = roadNetwork[roadPath.road];\r\n    \r\n    // Add road segments with curves\r\n    road.segments.forEach((segment, index) => {\r\n      // Add start of segment\r\n      route.push(segment.start);\r\n      \r\n      // Add curve points if available\r\n      if (road.curves && road.curves[index]) {\r\n        const curve = road.curves[index];\r\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\r\n        route.push(...curvePoints);\r\n      }\r\n      \r\n      // Add end of segment\r\n      route.push(segment.end);\r\n    });\r\n    \r\n    // Add final destination\r\n    route.push(end);\r\n    \r\n    // Remove duplicate consecutive points\r\n    return removeDuplicatePoints(route);\r\n  };\r\n\r\n  // Generate curve points between two road segments\r\n  const generateCurvePoints = (start, end, curve) => {\r\n    const curvePoints = [];\r\n    const numCurvePoints = 3; // Number of points to create the curve\r\n    \r\n    for (let i = 1; i <= numCurvePoints; i++) {\r\n      const t = i / (numCurvePoints + 1);\r\n      \r\n      // Create a curved path using the curve center and radius\r\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\r\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\r\n      \r\n      const curvePoint = [\r\n        start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI/2),\r\n        start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI/2)\r\n      ];\r\n      \r\n      curvePoints.push(curvePoint);\r\n    }\r\n    \r\n    return curvePoints;\r\n  };\r\n\r\n  // Remove duplicate consecutive points\r\n  const removeDuplicatePoints = (points) => {\r\n    const uniquePoints = [points[0]];\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\r\n      const currentPoint = points[i];\r\n      \r\n      const distance = calculateDistance(\r\n        prevPoint[0], prevPoint[1],\r\n        currentPoint[0], currentPoint[1]\r\n      );\r\n      \r\n      // Only add point if it's more than 10 meters away from previous point\r\n      if (distance > 0.01) {\r\n        uniquePoints.push(currentPoint);\r\n      }\r\n    }\r\n    \r\n    return uniquePoints;\r\n  };\r\n\r\n  // Generate turn-by-turn directions like Google Maps\r\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\r\n    const directions = [];\r\n    \r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const currentPoint = route[i];\r\n      const nextPoint = route[i + 1];\r\n      \r\n      // Find which road segment this is on\r\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\r\n      \r\n      if (roadSegment) {\r\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\r\n        if (direction) {\r\n          directions.push({\r\n            step: i + 1,\r\n            instruction: direction.instruction,\r\n            distance: direction.distance,\r\n            road: roadSegment.name,\r\n            coordinates: currentPoint\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return directions;\r\n  };\r\n\r\n  // Find which road segment a route segment belongs to\r\n  const findRoadSegment = (start, end, roadNetwork) => {\r\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\r\n      for (const segment of roadData.segments) {\r\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\r\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\r\n        \r\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) { // Within 100m\r\n          return { ...segment, roadName };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Generate direction text for a route segment\r\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\r\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\r\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\r\n    \r\n    if (stepIndex === 0) {\r\n      return {\r\n        instruction: `Start from ${roadSegment.name}`,\r\n        distance: distanceText\r\n      };\r\n    }\r\n    \r\n    // Determine direction based on coordinates\r\n    const latDiff = end[0] - start[0];\r\n    const lngDiff = end[1] - start[1];\r\n    \r\n    let direction = '';\r\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\r\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\r\n    } else {\r\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\r\n    }\r\n    \r\n    return {\r\n      instruction: `${direction} on ${roadSegment.name}`,\r\n      distance: distanceText\r\n    };\r\n  };\r\n\r\n  // Find closest intersection to a point\r\n  const findClosestIntersection = (point, intersections) => {\r\n    let closest = null;\r\n    let minDistance = Infinity;\r\n    \r\n    Object.entries(intersections).forEach(([name, coords]) => {\r\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = { name, coords, distance };\r\n      }\r\n    });\r\n    \r\n    return closest;\r\n  };\r\n\r\n  // Get intermediate intersections for routing\r\n  const getIntermediateIntersections = (startName, endName, intersections) => {\r\n    const route = [];\r\n    \r\n    // Define common routing patterns in Colombo\r\n    const routingPatterns = {\r\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\r\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\r\n      'fort-to-maradana': ['unionPlace'],\r\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\r\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\r\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\r\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\r\n      'wellawatta-to-mountLavinia': ['mountLavinia']\r\n    };\r\n    \r\n    // Find matching pattern\r\n    const patternKey = `${startName}-to-${endName}`;\r\n    const reversePatternKey = `${endName}-to-${startName}`;\r\n    \r\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\r\n    \r\n    if (pattern) {\r\n      pattern.forEach(intersectionName => {\r\n        if (intersections[intersectionName]) {\r\n          route.push(intersections[intersectionName]);\r\n        }\r\n      });\r\n    } else {\r\n      // Default routing through major intersections\r\n      if (startName === 'fort') {\r\n        route.push(intersections.chathamStreet);\r\n        route.push(intersections.pettah);\r\n        route.push(intersections.slaveIsland);\r\n      }\r\n    }\r\n    \r\n    return route;\r\n  };\r\n\r\n  // Create improved road route (fallback)\r\n  const createImprovedRoadRoute = (start, end) => {\r\n    console.log('üõ£Ô∏è Creating improved road route...');\r\n    \r\n    // Use the realistic Colombo route as fallback\r\n    return createRealisticColomboRoute(start, end);\r\n  };\r\n\r\n  // Colombo road network for realistic routing with detailed waypoints\r\n  const colomboRoads = {\r\n    // Galle Road - Main coastal road with detailed waypoints\r\n    galleRoad: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9250, 79.8580], // Chatham Street\r\n      [6.9220, 79.8550], // Pettah\r\n      [6.9200, 79.8520], // Slave Island\r\n      [6.9180, 79.8490], // Kollupitiya\r\n      [6.9150, 79.8460], // Bambalapitiya\r\n      [6.9120, 79.8430], // Wellawatta\r\n      [6.9090, 79.8400], // Dehiwala\r\n      [6.9060, 79.8370], // Mount Lavinia\r\n      [6.9030, 79.8340], // Ratmalana\r\n      [6.9000, 79.8310], // Moratuwa\r\n      [6.8970, 79.8280], // Panadura\r\n      [6.8500, 79.8000], // Kalutara\r\n      [6.8000, 79.7500], // Wadduwa\r\n      [6.7500, 79.7000]  // Beruwala\r\n    ],\r\n    // Negombo Road - Northern route with detailed waypoints\r\n    negomboRoad: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9300, 79.8650], // Union Place\r\n      [6.9330, 79.8680], // Maradana\r\n      [6.9360, 79.8710], // Dematagoda\r\n      [6.9400, 79.8750], // Peliyagoda\r\n      [6.9440, 79.8790], // Wattala\r\n      [6.9480, 79.8830], // Kandana\r\n      [6.9520, 79.8870], // Ja-Ela\r\n      [6.9560, 79.8910], // Katunayake\r\n      [6.9600, 79.8950], // Negombo\r\n      [6.9000, 79.8000], // Ragama\r\n      [6.9500, 79.8000]  // Kelaniya\r\n    ],\r\n    // Parliament Road - Eastern route with detailed waypoints\r\n    parliamentRoad: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9250, 79.8580], // Chatham Street\r\n      [6.9220, 79.8550], // Pettah\r\n      [6.9200, 79.8520], // Slave Island\r\n      [6.9180, 79.8490], // Kollupitiya\r\n      [6.9160, 79.8460], // Bambalapitiya\r\n      [6.9140, 79.8430], // Wellawatta\r\n      [6.9120, 79.8400], // Borella\r\n      [6.9100, 79.8370], // Battaramulla\r\n      [6.9080, 79.8340], // Kotte\r\n      [6.9060, 79.8310], // Nugegoda\r\n      [6.9040, 79.8280], // Maharagama\r\n      [6.9020, 79.8250], // Kesbewa\r\n      [6.9000, 79.8220]  // Homagama\r\n    ],\r\n    // Baseline Road - Western route with detailed waypoints\r\n    baselineRoad: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9250, 79.8580], // Chatham Street\r\n      [6.9220, 79.8550], // Pettah\r\n      [6.9200, 79.8520], // Slave Island\r\n      [6.9180, 79.8490], // Kollupitiya\r\n      [6.9160, 79.8460], // Bambalapitiya\r\n      [6.9140, 79.8430], // Wellawatta\r\n      [6.9120, 79.8400], // Borella\r\n      [6.9100, 79.8370], // Maradana\r\n      [6.9080, 79.8340], // Dematagoda\r\n      [6.9060, 79.8310], // Kelaniya\r\n      [6.9040, 79.8280]  // Ragama\r\n    ],\r\n    // New roads for better coverage\r\n    unionPlace: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9300, 79.8650], // Union Place\r\n      [6.9330, 79.8680], // Maradana\r\n      [6.9360, 79.8710], // Dematagoda\r\n      [6.9400, 79.8750]  // Peliyagoda\r\n    ],\r\n    chathamStreet: [\r\n      [6.9271, 79.8612], // Colombo Fort\r\n      [6.9250, 79.8580], // Chatham Street\r\n      [6.9220, 79.8550], // Pettah\r\n      [6.9200, 79.8520], // Slave Island\r\n      [6.9180, 79.8490]  // Kollupitiya\r\n    ]\r\n  };\r\n\r\n  // Function to find the closest road segment to a point\r\n  const findClosestRoadSegment = (point, roads) => {\r\n    let closestRoad = null;\r\n    let closestDistance = Infinity;\r\n    let closestIndex = -1;\r\n\r\n    Object.entries(roads).forEach(([roadName, waypoints]) => {\r\n      waypoints.forEach((waypoint, index) => {\r\n        const distance = calculateDistance(point[0], point[1], waypoint[0], waypoint[1]);\r\n        if (distance < closestDistance) {\r\n          closestDistance = distance;\r\n          closestRoad = roadName;\r\n          closestIndex = index;\r\n        }\r\n      });\r\n    });\r\n\r\n    return { road: closestRoad, index: closestIndex, distance: closestDistance };\r\n  };\r\n\r\n  // Function to create realistic road-based route that actually follows roads\r\n  const createRealisticRoute = (start, end) => {\r\n    const route = [start];\r\n    \r\n    // Find closest road segments for start and end points\r\n    const startRoad = findClosestRoadSegment(start, colomboRoads);\r\n    const endRoad = findClosestRoadSegment(end, colomboRoads);\r\n    \r\n    console.log(`üõ£Ô∏è Start point closest to: ${startRoad.road} (${startRoad.distance.toFixed(2)} km)`);\r\n    console.log(`üõ£Ô∏è End point closest to: ${endRoad.road} (${endRoad.distance.toFixed(2)} km)`);\r\n    \r\n    // If both points are on the same road, follow that road completely\r\n    if (startRoad.road === endRoad.road) {\r\n      const roadWaypoints = colomboRoads[startRoad.road];\r\n      const startIndex = startRoad.index;\r\n      const endIndex = endRoad.index;\r\n      \r\n      // Add ALL waypoints between start and end on the same road\r\n      if (startIndex < endIndex) {\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n          route.push(roadWaypoints[i]);\r\n        }\r\n      } else {\r\n        for (let i = startIndex; i >= endIndex; i--) {\r\n          route.push(roadWaypoints[i]);\r\n        }\r\n      }\r\n    } else {\r\n      // Different roads - create a proper multi-road route\r\n      const multiRoadRoute = createMultiRoadRoute(startRoad, endRoad, start, end);\r\n      route.push(...multiRoadRoute);\r\n    }\r\n    \r\n    // Remove duplicate consecutive points\r\n    const cleanRoute = [];\r\n    for (let i = 0; i < route.length; i++) {\r\n      if (i === 0 || \r\n          route[i][0] !== route[i-1][0] || \r\n          route[i][1] !== route[i-1][1]) {\r\n        cleanRoute.push(route[i]);\r\n      }\r\n    }\r\n    \r\n    return cleanRoute;\r\n  };\r\n\r\n  // Function to create route across multiple roads\r\n  const createMultiRoadRoute = (startRoad, endRoad, start, end) => {\r\n    const route = [];\r\n    \r\n    // Find intersection between the two roads\r\n    const intersection = findRoadIntersection(startRoad.road, endRoad.road);\r\n    \r\n    if (intersection) {\r\n      // Route through the intersection\r\n      console.log(`üõ£Ô∏è Routing through intersection at ${intersection[0]}, ${intersection[1]}`);\r\n      \r\n      // Add waypoints from start to intersection on first road\r\n      const startRoadWaypoints = colomboRoads[startRoad.road];\r\n      const intersectionIndex = findPointIndexInRoad(intersection, startRoad.road);\r\n      \r\n      if (startRoad.index < intersectionIndex) {\r\n        for (let i = startRoad.index + 1; i <= intersectionIndex; i++) {\r\n          route.push(startRoadWaypoints[i]);\r\n        }\r\n      } else {\r\n        for (let i = startRoad.index - 1; i >= intersectionIndex; i--) {\r\n          route.push(startRoadWaypoints[i]);\r\n        }\r\n      }\r\n      \r\n      // Add waypoints from intersection to end on second road\r\n      const endRoadWaypoints = colomboRoads[endRoad.road];\r\n      const endIntersectionIndex = findPointIndexInRoad(intersection, endRoad.road);\r\n      \r\n      if (endIntersectionIndex < endRoad.index) {\r\n        for (let i = endIntersectionIndex + 1; i <= endRoad.index; i++) {\r\n          route.push(endRoadWaypoints[i]);\r\n        }\r\n      } else {\r\n        for (let i = endIntersectionIndex - 1; i >= endRoad.index; i--) {\r\n          route.push(endRoadWaypoints[i]);\r\n        }\r\n      }\r\n    } else {\r\n      // No direct intersection - route through Colombo Fort (central hub)\r\n      console.log(`üõ£Ô∏è No direct intersection, routing through Colombo Fort`);\r\n      const centralJunction = [6.9271, 79.8612];\r\n      \r\n      // Route from start to Colombo Fort\r\n      const startToCenter = createRouteToPoint(startRoad, centralJunction);\r\n      route.push(...startToCenter);\r\n      \r\n      // Route from Colombo Fort to end\r\n      const centerToEnd = createRouteToPoint(endRoad, centralJunction, true);\r\n      route.push(...centerToEnd);\r\n    }\r\n    \r\n    return route;\r\n  };\r\n\r\n  // Helper function to find point index in a road\r\n  const findPointIndexInRoad = (point, roadName) => {\r\n    const waypoints = colomboRoads[roadName];\r\n    for (let i = 0; i < waypoints.length; i++) {\r\n      const distance = calculateDistance(\r\n        point[0], point[1],\r\n        waypoints[i][0], waypoints[i][1]\r\n      );\r\n      if (distance < 0.1) { // Within 100m\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  // Helper function to create route to a specific point\r\n  const createRouteToPoint = (roadInfo, targetPoint, reverse = false) => {\r\n    const route = [];\r\n    const waypoints = colomboRoads[roadInfo.road];\r\n    const targetIndex = findPointIndexInRoad(targetPoint, roadInfo.road);\r\n    \r\n    if (targetIndex !== -1) {\r\n      if (reverse) {\r\n        // Route from target to roadInfo.index\r\n        if (targetIndex < roadInfo.index) {\r\n          for (let i = targetIndex + 1; i <= roadInfo.index; i++) {\r\n            route.push(waypoints[i]);\r\n          }\r\n        } else {\r\n          for (let i = targetIndex - 1; i >= roadInfo.index; i--) {\r\n            route.push(waypoints[i]);\r\n          }\r\n        }\r\n      } else {\r\n        // Route from roadInfo.index to target\r\n        if (roadInfo.index < targetIndex) {\r\n          for (let i = roadInfo.index + 1; i <= targetIndex; i++) {\r\n            route.push(waypoints[i]);\r\n          }\r\n        } else {\r\n          for (let i = roadInfo.index - 1; i >= targetIndex; i--) {\r\n            route.push(waypoints[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return route;\r\n  };\r\n\r\n  // Function to find intersection between two roads\r\n  const findRoadIntersection = (road1, road2) => {\r\n    const waypoints1 = colomboRoads[road1];\r\n    const waypoints2 = colomboRoads[road2];\r\n    \r\n    // Find common waypoints (intersections)\r\n    for (let i = 0; i < waypoints1.length; i++) {\r\n      for (let j = 0; j < waypoints2.length; j++) {\r\n        const distance = calculateDistance(\r\n          waypoints1[i][0], waypoints1[i][1],\r\n          waypoints2[j][0], waypoints2[j][1]\r\n        );\r\n        if (distance < 0.5) { // Within 500m, consider as intersection\r\n          return waypoints1[i];\r\n        }\r\n      }\r\n    }\r\n    \r\n    return null; // No intersection found\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (emergencyRequest && branchLocation) {\r\n      console.log('üîÑ useEffect triggered - calculating route');\r\n      console.log('üìç Emergency request:', emergencyRequest);\r\n      console.log('üìç Branch location:', branchLocation);\r\n      calculateRoute();\r\n    } else {\r\n      console.log('‚ö†Ô∏è useEffect - missing data:', { emergencyRequest: !!emergencyRequest, branchLocation: !!branchLocation });\r\n    }\r\n  }, [emergencyRequest, branchLocation]);\r\n\r\n  // Manual route calculation trigger\r\n  const handleManualRouteCalculation = () => {\r\n    console.log('üîß Manual route calculation triggered');\r\n    calculateRoute();\r\n  };\r\n\r\n  // Test route function to ensure Polyline works\r\n  const createTestRoute = () => {\r\n    console.log('üß™ Creating test route');\r\n    const testRoute = [\r\n      branchCoords,\r\n      [branchCoords[0] + 0.01, branchCoords[1] + 0.01], // Add some offset\r\n      [branchCoords[0] + 0.02, branchCoords[1] + 0.02], // Add more offset\r\n      emergencyCoords\r\n    ];\r\n    setRoute(testRoute);\r\n    console.log('üß™ Test route set:', testRoute);\r\n  };\r\n\r\n  // Calculate center point for map\r\n  const mapCenter = [\r\n    (branchCoords[0] + emergencyCoords[0]) / 2,\r\n    (branchCoords[1] + emergencyCoords[1]) / 2\r\n  ];\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n      <div className=\"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\">\r\n        <div className=\"mt-3\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900\">\r\n              Emergency Route Map\r\n            </h3>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <h4 className=\"font-medium text-blue-900 mb-2\">Emergency Details:</h4>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <p><strong>Location:</strong> {emergencyRequest?.brigadeLocation}</p>\r\n                <p><strong>Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                <p><strong>Water Level:</strong> {emergencyRequest?.waterLevel}</p>\r\n                <p><strong>Priority:</strong> {emergencyRequest?.priority}</p>\r\n              </div>\r\n              <div>\r\n                <p><strong>Branch:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                <p><strong>Branch Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                {distance && <p><strong>Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                {estimatedTime && <p><strong>Est. Time:</strong> {estimatedTime}</p>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {loading && (\r\n            <div className=\"text-center py-4\">\r\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n              <p className=\"mt-2 text-gray-600\">Calculating route...</p>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\">\r\n              <p className=\"text-yellow-800\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Debug Route Information */}\r\n          <div className=\"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-md text-sm\">\r\n            <h4 className=\"font-medium text-gray-700 mb-2\">üõ£Ô∏è Real Road Routing Info:</h4>\r\n            <p><strong>Route Status:</strong> {route ? `‚úÖ Real road route calculated (${route.length} waypoints)` : '‚ùå No route'}</p>\r\n            <p><strong>Branch Location:</strong> Colombo Central Branch ({branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)})</p>\r\n            <p><strong>Emergency Location:</strong> {emergencyRequest?.brigadeLocation} ({emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)})</p>\r\n            {route && route.length > 0 && (\r\n              <div>\r\n                <p><strong>Route Preview:</strong> {route.slice(0, 3).map((point, i) => `${i+1}:(${point[0].toFixed(4)},${point[1].toFixed(4)})`).join(' ‚Üí ')}...</p>\r\n                <p><strong>Routing Method:</strong> Real Colombo road intersections and landmarks</p>\r\n                <p><strong>Road Distance:</strong> {distance ? `${distance.toFixed(2)} km` : 'Calculating...'}</p>\r\n                <p><strong>Estimated Time:</strong> {estimatedTime || 'Calculating...'}</p>\r\n              </div>\r\n            )}\r\n            <p className=\"text-xs text-gray-600 mt-2\">\r\n              üí° <strong>Note:</strong> Routes follow actual Colombo roads through real intersections like Fort, Pettah, Slave Island, Kollupitiya, etc.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"h-96 w-full border border-gray-300 rounded-md\">\r\n            <MapContainer\r\n              center={mapCenter}\r\n              zoom={12}\r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              \r\n              {/* Branch Marker */}\r\n              <Marker position={branchCoords}>\r\n                <Popup>\r\n                  <div className=\"p-2\">\r\n                    <h4 className=\"font-medium text-green-700\">üè¢ Your Branch</h4>\r\n                    <p className=\"text-sm\"><strong>Name:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                    <p className=\"text-sm\"><strong>Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                    <p className=\"text-sm\"><strong>Coordinates:</strong> {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}</p>\r\n                    <p className=\"text-xs text-gray-600 mt-1\">üìç Starting point for emergency delivery</p>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* Emergency Location Marker */}\r\n              <Marker position={emergencyCoords}>\r\n                <Popup>\r\n                  <div className=\"p-2\">\r\n                    <h4 className=\"font-medium text-red-700\">üö® Emergency Location</h4>\r\n                    <p className=\"text-sm\"><strong>Location:</strong> {emergencyRequest?.brigadeLocation}</p>\r\n                    <p className=\"text-sm\"><strong>Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                    <p className=\"text-sm\"><strong>Water Level:</strong> {emergencyRequest?.waterLevel}</p>\r\n                    <p className=\"text-sm\"><strong>Priority:</strong> {emergencyRequest?.priority}</p>\r\n                    <p className=\"text-sm\"><strong>Coordinates:</strong> {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}</p>\r\n                    {distance && <p className=\"text-sm\"><strong>Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                    {estimatedTime && <p className=\"text-sm\"><strong>Est. Time:</strong> {estimatedTime}</p>}\r\n                    <p className=\"text-xs text-gray-600 mt-1\">üéØ Destination for water delivery</p>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* Route Line */}\r\n              {route && route.length > 0 && (\r\n                <Polyline\r\n                  positions={route}\r\n                  color=\"red\"\r\n                  weight={4}\r\n                  opacity={0.8}\r\n                />\r\n              )}\r\n              \r\n              {/* Debug: Always show a fallback line if no route */}\r\n              {(!route || route.length === 0) && (\r\n                <Polyline\r\n                  positions={[branchCoords, emergencyCoords]}\r\n                  color=\"orange\"\r\n                  weight={3}\r\n                  opacity={0.6}\r\n                  dashArray=\"5, 5\"\r\n                />\r\n              )}\r\n              \r\n              {/* Route waypoints */}\r\n              {route && route.length > 2 && route.slice(1, -1).map((waypoint, index) => (\r\n                <Marker key={index} position={waypoint}>\r\n                  <Popup>\r\n                    <div className=\"p-2\">\r\n                      <h4 className=\"font-medium text-blue-700\">üõ£Ô∏è Road Waypoint {index + 1}</h4>\r\n                      <p className=\"text-sm\">Following actual Colombo roads</p>\r\n                      <p className=\"text-sm\"><strong>Coordinates:</strong> {waypoint[0].toFixed(6)}, {waypoint[1].toFixed(6)}</p>\r\n                      <p className=\"text-xs text-gray-600 mt-1\">üìç Real road intersection/landmark</p>\r\n                    </div>\r\n                  </Popup>\r\n                </Marker>\r\n              ))}\r\n            </MapContainer>\r\n          </div>\r\n\r\n          <div className=\"mt-4 flex justify-between items-center\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              <p>üìç Red line shows road-based route to emergency location</p>\r\n              <p>üõ£Ô∏è Route follows actual Colombo roads (Galle Road, Negombo Road, etc.)</p>\r\n              <p>üöó Distance calculated along roads, not straight line</p>\r\n              <p>üö® Follow traffic rules and emergency protocols</p>\r\n              <p>‚è±Ô∏è Estimated time based on 40 km/h average speed</p>\r\n              {distance && <p>üìè Road distance: {distance.toFixed(2)} km</p>}\r\n            </div>\r\n            <div className=\"flex space-x-3\">\r\n              <button\r\n                onClick={handleManualRouteCalculation}\r\n                disabled={loading}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n              >\r\n                {loading ? 'Calculating...' : 'Calculate Route'}\r\n              </button>\r\n              <button\r\n                onClick={calculateRoute}\r\n                disabled={loading}\r\n                className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n              >\r\n                {loading ? 'Recalculating...' : 'Recalculate Route'}\r\n              </button>\r\n              <button\r\n                onClick={createTestRoute}\r\n                className=\"px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700\"\r\n              >\r\n                Test Route\r\n              </button>\r\n              <button\r\n                onClick={onClose}\r\n                className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmergencyRouteMap;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}