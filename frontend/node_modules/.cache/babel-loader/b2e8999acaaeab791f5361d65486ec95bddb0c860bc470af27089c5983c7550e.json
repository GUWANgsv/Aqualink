{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\InteractiveMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Custom icons for different markers\nconst createCustomIcon = (color, iconType) => {\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 30px;\n        height: 30px;\n        border-radius: 50% 50% 50% 0;\n        border: 3px solid white;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 14px;\n        color: white;\n        transform: rotate(-45deg);\n      \">\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\n      </div>\n    `,\n    iconSize: [30, 30],\n    iconAnchor: [15, 30]\n  });\n};\nconst branchIcon = createCustomIcon('#3B82F6', '🏢');\nconst emergencyIcon = createCustomIcon('#EF4444', '🚨');\nconst exactEmergencyIcon = createCustomIcon('#DC2626', '🎯'); // Darker red for exact locations\nconst driverIcon = createCustomIcon('#10B981', '🚚');\n\n// Component to handle map updates\nconst MapUpdater = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center && zoom) {\n      map.setView(center, zoom);\n    }\n  }, [center, zoom, map]);\n  return null;\n};\n\n// Comprehensive database of Sri Lankan locations with accurate coordinates\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nconst sriLankanLocations = {\n  // Colombo areas - Updated with more accurate coordinates\n  'maradana': [6.9271, 79.8665],\n  // More accurate Maradana coordinates\n  'colombo 01': [6.9344, 79.8428],\n  // Fort - more accurate\n  'colombo 02': [6.9200, 79.8500],\n  // Slave Island\n  'colombo 03': [6.9100, 79.8500],\n  // Kollupitiya\n  'colombo 04': [6.9000, 79.8600],\n  // Bambalapitiya\n  'colombo 05': [6.8900, 79.8600],\n  // Wellawatta\n  'colombo 06': [6.8800, 79.8700],\n  // Mount Lavinia\n  'colombo 07': [6.8700, 79.8700],\n  // Dehiwala\n  'colombo 08': [6.9047, 79.8844],\n  // Borella\n  'colombo 09': [6.8900, 79.8800],\n  // Dematagoda\n  'colombo 10': [6.9271, 79.8665],\n  // Maradana - same as main Maradana\n  'colombo 11': [6.9400, 79.8500],\n  // Pettah\n  'colombo 12': [6.9500, 79.8400],\n  // Kotahena\n  'colombo 13': [6.9600, 79.8300],\n  // Modara\n  'colombo 14': [6.9700, 79.8200],\n  // Grandpass\n  'colombo 15': [6.9608, 79.9227],\n  // Peliyagoda - corrected coordinates\n\n  // Specific areas\n  'fort': [6.9300, 79.8400],\n  'pettah': [6.9400, 79.8500],\n  'slave island': [6.9200, 79.8500],\n  'kollupitiya': [6.9100, 79.8500],\n  'bambalapitiya': [6.8900, 79.8600],\n  'wellawatta': [6.8900, 79.8600],\n  'mount lavinia': [6.8800, 79.8700],\n  'dehiwala': [6.8700, 79.8700],\n  'borella': [6.9047, 79.8844],\n  'dematagoda': [6.8900, 79.8800],\n  'kotahena': [6.9500, 79.8400],\n  'modara': [6.9600, 79.8300],\n  'grandpass': [6.9700, 79.8200],\n  'mattakkuliya': [6.9800, 79.8100],\n  'peliyagoda': [6.9608, 79.9227],\n  // Major roads\n  'galle road': [6.9100, 79.8500],\n  'baseline road': [6.9047, 79.8844],\n  'high level road': [6.8481, 79.9285],\n  'reid avenue': [6.9200, 79.8500],\n  'bauddhaloka mawatha': [6.9100, 79.8500],\n  'negombo road': [6.9608, 79.9227],\n  // Peliyagoda area\n\n  // Southern areas\n  'maharagama': [6.8481, 79.9285],\n  'nugegoda': [6.8631, 79.8996],\n  'kottawa': [6.8400, 79.9500],\n  'homagama': [6.8400, 80.0000],\n  'piliyandala': [6.8500, 79.9000],\n  'kaduwela': [6.9300, 79.9800],\n  'avissawella': [6.9500, 80.2000],\n  'rathmalana': [6.8200, 79.8800],\n  'moratuwa': [6.8000, 79.9000],\n  'panadura': [6.7200, 79.9000],\n  'kalutara': [6.5800, 79.9600],\n  // Other major cities\n  'kandy': [7.2906, 80.6337],\n  'galle': [6.0329, 80.2169],\n  'jaffna': [9.6615, 80.0255],\n  'anuradhapura': [8.3114, 80.4037],\n  'trincomalee': [8.5874, 81.2152],\n  'batticaloa': [7.7102, 81.6924],\n  'kurunegala': [7.4863, 80.3633],\n  'negombo': [7.2086, 79.8358],\n  'ratnapura': [6.6828, 80.4012],\n  'badulla': [6.9934, 81.0550]\n};\n\n// Function to get exact coordinates for specific known addresses\nconst getExactCoordinatesForAddress = address => {\n  if (!address) return null;\n  const addressLower = address.toLowerCase();\n  console.log('🔍 Checking address for exact coordinates:', address);\n  console.log('🔍 Address in lowercase:', addressLower);\n\n  // Check for exact matches in our database\n  for (const [location, coords] of Object.entries(sriLankanLocations)) {\n    if (addressLower.includes(location)) {\n      console.log(`🎯 Found exact location: ${location}`);\n      console.log(`📍 Returning coordinates: [${coords[0]}, ${coords[1]}]`);\n      return coords;\n    }\n  }\n\n  // Check for specific combinations\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\n    console.log('🎯 Found exact address: Maradana, Baseline Road, Colombo 10');\n    return [6.9271, 79.8665]; // Updated with more accurate coordinates\n  }\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\n    console.log('🎯 Found exact address: Maharagama High Level Road');\n    return [6.8481, 79.9285];\n  }\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\n    console.log('🎯 Found exact address: Borella Baseline Road');\n    return [6.9047, 79.8844];\n  }\n  if (addressLower.includes('negombo road') && addressLower.includes('peliyagoda') && addressLower.includes('colombo 15')) {\n    console.log('🎯 Found exact address: Negombo Road, Peliyagoda, Colombo 15');\n    return [6.9608, 79.9227]; // Correct coordinates for Peliyagoda\n  }\n  console.log('❌ No exact match found for address:', address);\n  return null; // No exact match found\n};\n\n// Enhanced geocoding with multiple services for better accuracy\nconst geocodeAddress = async address => {\n  if (!address) return null;\n  try {\n    var _scoredResults$;\n    console.log('🌍 Enhanced geocoding for address:', address);\n\n    // Clean and normalize the address\n    const cleanAddress = address.trim().replace(/\\s+/g, ' ');\n    console.log('🧹 Cleaned address:', cleanAddress);\n\n    // Try multiple geocoding approaches\n    const results = await Promise.allSettled([geocodeWithNominatim(cleanAddress), geocodeWithPhoton(cleanAddress), geocodeWithLocationIQ(cleanAddress), geocodeWithGoogle(cleanAddress) // Most accurate but requires API key\n    ]);\n\n    // Collect all valid results\n    const validResults = results.filter(result => result.status === 'fulfilled' && result.value).map(result => result.value).flat();\n    if (validResults.length === 0) {\n      console.log('⚠️ No geocoding results found');\n      return null;\n    }\n\n    // Score and rank all results\n    const scoredResults = validResults.map(result => ({\n      ...result,\n      score: calculateEnhancedLocationScore(result, cleanAddress)\n    })).sort((a, b) => b.score - a.score);\n    console.log(`📊 Found ${scoredResults.length} total results, best score: ${(_scoredResults$ = scoredResults[0]) === null || _scoredResults$ === void 0 ? void 0 : _scoredResults$.score}`);\n\n    // Return the best result\n    const bestResult = scoredResults[0];\n    const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\n    console.log('🎯 Best result:', bestResult.display_name || bestResult.name);\n    console.log('📍 Coordinates:', coords);\n    console.log('⭐ Score:', bestResult.score);\n    return coords;\n  } catch (error) {\n    console.error('❌ Enhanced geocoding failed:', error);\n    return null;\n  }\n};\n\n// Geocoding with OpenStreetMap Nominatim\nconst geocodeWithNominatim = async address => {\n  try {\n    const searchQueries = [`${address}, Sri Lanka`, `${address}, Colombo, Sri Lanka`, address, address.replace(/colombo\\s*(\\d+)/i, 'Colombo $1, Sri Lanka')];\n    for (const query of searchQueries) {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&countrycodes=lk&addressdetails=1&extratags=1`);\n      if (response.ok) {\n        const data = await response.json();\n        return data.filter(result => parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 && parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0);\n      }\n    }\n    return [];\n  } catch (error) {\n    console.log('⚠️ Nominatim geocoding failed:', error.message);\n    return [];\n  }\n};\n\n// Geocoding with Photon (Komoot)\nconst geocodeWithPhoton = async address => {\n  try {\n    const response = await fetch(`https://photon.komoot.io/api?q=${encodeURIComponent(address + ', Sri Lanka')}&limit=5&lang=en`);\n    if (response.ok) {\n      const data = await response.json();\n      return (data.features || []).map(feature => ({\n        lat: feature.geometry.coordinates[1],\n        lon: feature.geometry.coordinates[0],\n        display_name: feature.properties.name,\n        type: feature.properties.type,\n        class: feature.properties.class,\n        importance: feature.properties.importance\n      })).filter(result => parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 && parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0);\n    }\n    return [];\n  } catch (error) {\n    console.log('⚠️ Photon geocoding failed:', error.message);\n    return [];\n  }\n};\n\n// Geocoding with LocationIQ (backup)\nconst geocodeWithLocationIQ = async address => {\n  try {\n    // Using a free tier approach - you can replace with actual API key if needed\n    const response = await fetch(`https://us1.locationiq.com/v1/search?key=pk.test&q=${encodeURIComponent(address + ', Sri Lanka')}&format=json&limit=5&addressdetails=1`);\n    if (response.ok) {\n      const data = await response.json();\n      return data.filter(result => parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 && parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0);\n    }\n    return [];\n  } catch (error) {\n    console.log('⚠️ LocationIQ geocoding failed:', error.message);\n    return [];\n  }\n};\n\n// Geocoding with Google Maps (most accurate - requires API key)\nconst geocodeWithGoogle = async address => {\n  try {\n    // Note: You need to add your Google Maps API key here\n    const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    if (!GOOGLE_API_KEY) {\n      console.log('⚠️ Google Maps API key not configured');\n      return [];\n    }\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address + ', Sri Lanka')}&key=${GOOGLE_API_KEY}`);\n    if (response.ok) {\n      const data = await response.json();\n      return (data.results || []).map(result => ({\n        lat: result.geometry.location.lat,\n        lon: result.geometry.location.lng,\n        display_name: result.formatted_address,\n        type: result.types[0] || 'unknown',\n        class: result.types[0] || 'unknown',\n        importance: result.geometry.location_type === 'ROOFTOP' ? 0.9 : 0.7\n      })).filter(result => parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 && parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0);\n    }\n    return [];\n  } catch (error) {\n    console.log('⚠️ Google Maps geocoding failed:', error.message);\n    return [];\n  }\n};\n\n// Enhanced scoring function for better address matching\nconst calculateEnhancedLocationScore = (result, originalAddress) => {\n  let score = 0;\n  const displayName = (result.display_name || result.name || '').toLowerCase();\n  const originalLower = originalAddress.toLowerCase();\n\n  // Extract key components from original address\n  const addressWords = originalLower.split(/[\\s,]+/).filter(word => word.length > 2);\n  const mainLocation = addressWords[0] || '';\n\n  // Exact match bonus (highest priority)\n  if (displayName.includes(originalLower)) score += 200;\n  if (displayName.includes(mainLocation)) score += 150;\n\n  // Word-by-word matching for better accuracy\n  addressWords.forEach(word => {\n    if (displayName.includes(word)) score += 25;\n  });\n\n  // Sri Lanka context bonus\n  if (displayName.includes('sri lanka') || displayName.includes('colombo')) score += 50;\n\n  // Road/street match bonus\n  const roadTypes = ['road', 'street', 'mawatha', 'avenue', 'place', 'lane', 'drive'];\n  roadTypes.forEach(roadType => {\n    if (originalLower.includes(roadType) && displayName.includes(roadType)) {\n      score += 40;\n    }\n  });\n\n  // Postal code matching\n  const postalMatch = originalLower.match(/colombo\\s*(\\d+)/);\n  if (postalMatch && displayName.includes(`colombo ${postalMatch[1]}`)) score += 60;\n\n  // Importance bonus (from OSM importance field)\n  if (result.importance) score += result.importance * 30;\n\n  // Type bonus - prioritize more specific types\n  const typeScores = {\n    'administrative': 20,\n    'residential': 15,\n    'highway': 25,\n    'amenity': 30,\n    'building': 10,\n    'place': 35\n  };\n  if (result.type && typeScores[result.type]) {\n    score += typeScores[result.type];\n  }\n\n  // Class bonus\n  const classScores = {\n    'highway': 15,\n    'place': 20,\n    'amenity': 25,\n    'building': 10\n  };\n  if (result.class && classScores[result.class]) {\n    score += classScores[result.class];\n  }\n\n  // Distance from Colombo center (prefer locations closer to Colombo)\n  const colomboCenter = [6.9271, 79.8612];\n  const distance = calculateDistance(colomboCenter[0], colomboCenter[1], parseFloat(result.lat), parseFloat(result.lon));\n\n  // Bonus for locations within 50km of Colombo\n  if (distance < 50) {\n    score += Math.max(0, 20 - distance / 5);\n  }\n  return score;\n};\n\n// Legacy function for backward compatibility\nconst calculateLocationScore = (result, originalAddress, mainLocation) => {\n  return calculateEnhancedLocationScore(result, originalAddress);\n};\n\n// Component to generate emergency location (exact or random)\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\n  // First, try to get exact coordinates for the address\n  if (address) {\n    const exactCoords = getExactCoordinatesForAddress(address);\n    if (exactCoords) {\n      console.log('📍 Using exact coordinates for address:', address);\n      return exactCoords;\n    }\n  }\n\n  // If no exact match, generate random location within distance from branch\n  console.log('🎲 Generating random location within', maxDistanceKm, 'km from branch coordinates');\n  const R = 6371; // Earth's radius in km\n\n  // Convert to radians\n  const lat1 = branchCoords[0] * Math.PI / 180;\n  const lng1 = branchCoords[1] * Math.PI / 180;\n\n  // Generate random distance (0 to maxDistanceKm)\n  const distance = Math.random() * maxDistanceKm;\n\n  // Generate random bearing (0 to 2π)\n  const bearing = Math.random() * 2 * Math.PI;\n\n  // Calculate new coordinates\n  const lat2 = Math.asin(Math.sin(lat1) * Math.cos(distance / R) + Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing));\n  const lng2 = lng1 + Math.atan2(Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1), Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2));\n  const generatedCoords = [lat2 * 180 / Math.PI, lng2 * 180 / Math.PI];\n  console.log('🎲 Generated emergency location:', generatedCoords);\n  console.log('📍 Base coordinates used:', branchCoords);\n  console.log('📏 Distance from branch:', calculateDistance(branchCoords[0], branchCoords[1], generatedCoords[0], generatedCoords[1]).toFixed(2), 'km');\n  return generatedCoords;\n};\n\n// Calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst InteractiveMap = ({\n  branchLocation,\n  emergencyRequest,\n  showRoute = false,\n  onRouteCalculated,\n  onEmergencyLocationGenerated\n}) => {\n  _s2();\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\n  const [route, setRoute] = useState([]);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\n  const [mapZoom, setMapZoom] = useState(12);\n  const [isGeocoding, setIsGeocoding] = useState(false);\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\n  const mapRef = useRef(null);\n\n  // Colombo 7 branch coordinates (more accurate)\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\n\n  // Default branch location if not provided\n  const defaultBranchLocation = {\n    name: 'Colombo 7 Branch',\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\n    coordinates: colombo7BranchCoords\n  };\n  const branch = branchLocation || defaultBranchLocation;\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\n\n  // Generate emergency location when emergency request is provided\n  useEffect(() => {\n    const processEmergencyLocation = async () => {\n      console.log('🚀 Processing emergency location...');\n      console.log('📋 Emergency request:', emergencyRequest);\n      console.log('📍 Current emergency coords:', emergencyCoords);\n      if (emergencyRequest && !emergencyCoords) {\n        let coords;\n        let locationType = 'generated';\n        console.log('🔍 Emergency request found, processing location...');\n        if (emergencyRequest.brigadeLocation) {\n          // First, try to get exact coordinates for the address (prioritize over provided coordinates)\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\n          console.log('🎯 Exact coords result:', exactCoords);\n          if (exactCoords) {\n            coords = exactCoords;\n            locationType = 'exact';\n            console.log('✅ Using exact coordinates for address (overriding provided):', emergencyRequest.brigadeLocation, '->', coords);\n          } else if (emergencyRequest.coordinates) {\n            // Use provided coordinates only if no exact match found\n            coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n            locationType = 'provided';\n            console.log('📍 Using provided coordinates:', coords);\n          } else {\n            // Try to geocode the address to get real coordinates\n            console.log('🌍 Attempting to geocode address:', emergencyRequest.brigadeLocation);\n            setIsGeocoding(true);\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\n            setIsGeocoding(false);\n            if (geocodedCoords) {\n              coords = geocodedCoords;\n              locationType = 'geocoded';\n              console.log('✅ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\n            } else {\n              // Fallback: Generate random location within 30km\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\n              locationType = 'generated';\n              console.log('🎲 Generated random emergency location within 30km:', coords);\n            }\n          }\n        } else if (emergencyRequest.coordinates) {\n          // Use provided coordinates only if no address provided\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n          locationType = 'provided';\n          console.log('📍 Using provided coordinates (no address):', coords);\n        } else {\n          // No address provided, generate random location\n          coords = generateEmergencyLocation(branchCoords, 30);\n          locationType = 'generated';\n          console.log('🎲 Generated random emergency location within 30km (no address):', coords);\n        }\n\n        // Set the generated location state\n        const locationData = {\n          lat: coords[0],\n          lng: coords[1],\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\n          type: locationType\n        };\n        setGeneratedEmergencyLocation(locationData);\n\n        // Notify parent component about generated location\n        if (onEmergencyLocationGenerated) {\n          onEmergencyLocationGenerated(locationData);\n        }\n        setEmergencyCoords(coords);\n\n        // Debug: Log the coordinates being used\n        console.log('🗺️ Emergency location coordinates set:', coords);\n        console.log('📍 Address:', emergencyRequest.brigadeLocation);\n        console.log('🎯 Location type:', locationType);\n        console.log('🔍 Final coordinates for map marker:', coords);\n        console.log('📊 Location data object:', locationData);\n\n        // Calculate distance\n        const calculatedDistance = calculateDistance(branchCoords[0], branchCoords[1], coords[0], coords[1]);\n        setDistance(calculatedDistance);\n\n        // Calculate estimated time (assuming 40 km/h average speed)\n        const timeInHours = calculatedDistance / 40;\n        const hours = Math.floor(timeInHours);\n        const minutes = Math.round((timeInHours - hours) * 60);\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n        setEstimatedTime(timeString);\n\n        // Update map center to show both locations\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\n        setMapCenter([centerLat, centerLng]);\n        setMapZoom(11);\n      }\n    };\n    processEmergencyLocation();\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\n\n  // Calculate route when showRoute is true\n  useEffect(() => {\n    if (showRoute && emergencyCoords && branchCoords) {\n      calculateRoute();\n    }\n  }, [showRoute, emergencyCoords, branchCoords]);\n  const calculateRoute = async () => {\n    if (!emergencyCoords || !branchCoords) return;\n    setLoading(true);\n    try {\n      // Create a simple route with waypoints\n      const routePoints = [branchCoords, [(branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01, (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01], emergencyCoords];\n      setRoute(routePoints);\n\n      // Calculate road distance (approximate)\n      let roadDistance = 0;\n      for (let i = 0; i < routePoints.length - 1; i++) {\n        roadDistance += calculateDistance(routePoints[i][0], routePoints[i][1], routePoints[i + 1][0], routePoints[i + 1][1]);\n      }\n\n      // Add some road factor (roads are not straight lines)\n      roadDistance *= 1.3; // 30% longer than straight line\n      setDistance(roadDistance);\n\n      // Calculate estimated time\n      const timeInHours = roadDistance / 40; // 40 km/h average\n      const hours = Math.floor(timeInHours);\n      const minutes = Math.round((timeInHours - hours) * 60);\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n      setEstimatedTime(timeString);\n\n      // Notify parent component\n      if (onRouteCalculated) {\n        onRouteCalculated({\n          distance: roadDistance,\n          estimatedTime: timeString,\n          route: routePoints\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating route:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-96 border border-gray-300 rounded-lg overflow-hidden relative\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef,\n      center: mapCenter,\n      zoom: mapZoom,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(MapUpdater, {\n        center: mapCenter,\n        zoom: mapZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: branchCoords,\n        icon: branchIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-blue-600\",\n              children: [\"\\uD83C\\uDFE2 \", branch.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: branch.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), emergencyCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: emergencyCoords,\n        icon: (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'exact' || (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'geocoded' ? exactEmergencyIcon : emergencyIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-red-600\",\n              children: \"\\uD83D\\uDEA8 Emergency Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName) || 'Emergency Request'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) || 'Generated Location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 17\n            }, this), generatedEmergencyLocation && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: generatedEmergencyLocation.type === 'exact' ? '✅ Exact location' : generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded location' : generatedEmergencyLocation.type === 'provided' ? '📍 Provided coordinates' : '🎲 Generated location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 19\n            }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: [\"\\uD83D\\uDCCF Distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 19\n            }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-green-600\",\n              children: [\"\\u23F1\\uFE0F Est. Time: \", estimatedTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 11\n      }, this), showRoute && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"#3B82F6\",\n        weight: 4,\n        opacity: 0.8,\n        dashArray: \"10, 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 11\n      }, this), (loading || isGeocoding) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: isGeocoding ? 'Finding exact location...' : 'Calculating route...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold text-gray-800 mb-2\",\n        children: \"\\uD83D\\uDEA8 Emergency Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium text-gray-700\",\n            children: \"\\uD83D\\uDCCD Destination:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600 text-xs break-words\",\n            children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) || 'Emergency Location'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [\"Distance: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: distance ? `${distance.toFixed(1)} km` : 'Calculating...'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 54\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [\"Time: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: estimatedTime || 'Calculating...'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 50\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 794,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority) && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `px-2 py-1 rounded text-xs font-medium ml-2 ${emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' : emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' : 'bg-yellow-100 text-yellow-800'}`,\n            children: emergencyRequest.priority\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 683,\n    columnNumber: 5\n  }, this);\n};\n_s2(InteractiveMap, \"fvCVIVj+0UpGTKBzeourP/wmeCs=\");\n_c2 = InteractiveMap;\nexport default InteractiveMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"InteractiveMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","iconType","divIcon","className","html","iconSize","iconAnchor","branchIcon","emergencyIcon","exactEmergencyIcon","driverIcon","MapUpdater","center","zoom","_s","map","setView","_c","sriLankanLocations","getExactCoordinatesForAddress","address","addressLower","toLowerCase","console","log","location","coords","Object","entries","includes","geocodeAddress","_scoredResults$","cleanAddress","trim","replace","results","Promise","allSettled","geocodeWithNominatim","geocodeWithPhoton","geocodeWithLocationIQ","geocodeWithGoogle","validResults","filter","result","status","value","flat","length","scoredResults","score","calculateEnhancedLocationScore","sort","a","b","bestResult","parseFloat","lat","lon","display_name","name","error","searchQueries","query","response","fetch","encodeURIComponent","ok","data","json","message","features","feature","geometry","coordinates","properties","type","class","importance","GOOGLE_API_KEY","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lng","formatted_address","types","location_type","originalAddress","displayName","originalLower","addressWords","split","word","mainLocation","forEach","roadTypes","roadType","postalMatch","match","typeScores","classScores","colomboCenter","distance","calculateDistance","Math","max","calculateLocationScore","generateEmergencyLocation","branchCoords","maxDistanceKm","exactCoords","R","lat1","PI","lng1","random","bearing","lat2","asin","sin","cos","lng2","atan2","generatedCoords","toFixed","dLat","dLng","c","sqrt","InteractiveMap","branchLocation","emergencyRequest","showRoute","onRouteCalculated","onEmergencyLocationGenerated","_s2","emergencyCoords","setEmergencyCoords","route","setRoute","setDistance","estimatedTime","setEstimatedTime","loading","setLoading","mapCenter","setMapCenter","mapZoom","setMapZoom","isGeocoding","setIsGeocoding","generatedEmergencyLocation","setGeneratedEmergencyLocation","mapRef","colombo7BranchCoords","defaultBranchLocation","branch","processEmergencyLocation","locationType","brigadeLocation","geocodedCoords","locationData","calculatedDistance","timeInHours","hours","floor","minutes","round","timeString","centerLat","centerLng","calculateRoute","routePoints","roadDistance","i","children","ref","style","height","width","scrollWheelZoom","fileName","_jsxFileName","lineNumber","columnNumber","attribution","url","position","icon","brigadeName","positions","weight","opacity","dashArray","priority","_c2","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/InteractiveMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Custom icons for different markers\r\nconst createCustomIcon = (color, iconType) => {\r\n  return L.divIcon({\r\n    className: 'custom-div-icon',\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50% 50% 50% 0;\r\n        border: 3px solid white;\r\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 14px;\r\n        color: white;\r\n        transform: rotate(-45deg);\r\n      \">\r\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\r\n      </div>\r\n    `,\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30],\r\n  });\r\n};\r\n\r\nconst branchIcon = createCustomIcon('#3B82F6', '🏢');\r\nconst emergencyIcon = createCustomIcon('#EF4444', '🚨');\r\nconst exactEmergencyIcon = createCustomIcon('#DC2626', '🎯'); // Darker red for exact locations\r\nconst driverIcon = createCustomIcon('#10B981', '🚚');\r\n\r\n// Component to handle map updates\r\nconst MapUpdater = ({ center, zoom }) => {\r\n  const map = useMap();\r\n  \r\n  useEffect(() => {\r\n    if (center && zoom) {\r\n      map.setView(center, zoom);\r\n    }\r\n  }, [center, zoom, map]);\r\n  \r\n  return null;\r\n};\r\n\r\n// Comprehensive database of Sri Lankan locations with accurate coordinates\r\nconst sriLankanLocations = {\r\n  // Colombo areas - Updated with more accurate coordinates\r\n  'maradana': [6.9271, 79.8665], // More accurate Maradana coordinates\r\n  'colombo 01': [6.9344, 79.8428], // Fort - more accurate\r\n  'colombo 02': [6.9200, 79.8500], // Slave Island\r\n  'colombo 03': [6.9100, 79.8500], // Kollupitiya\r\n  'colombo 04': [6.9000, 79.8600], // Bambalapitiya\r\n  'colombo 05': [6.8900, 79.8600], // Wellawatta\r\n  'colombo 06': [6.8800, 79.8700], // Mount Lavinia\r\n  'colombo 07': [6.8700, 79.8700], // Dehiwala\r\n  'colombo 08': [6.9047, 79.8844], // Borella\r\n  'colombo 09': [6.8900, 79.8800], // Dematagoda\r\n  'colombo 10': [6.9271, 79.8665], // Maradana - same as main Maradana\r\n  'colombo 11': [6.9400, 79.8500], // Pettah\r\n  'colombo 12': [6.9500, 79.8400], // Kotahena\r\n  'colombo 13': [6.9600, 79.8300], // Modara\r\n  'colombo 14': [6.9700, 79.8200], // Grandpass\r\n  'colombo 15': [6.9608, 79.9227], // Peliyagoda - corrected coordinates\r\n  \r\n  // Specific areas\r\n  'fort': [6.9300, 79.8400],\r\n  'pettah': [6.9400, 79.8500],\r\n  'slave island': [6.9200, 79.8500],\r\n  'kollupitiya': [6.9100, 79.8500],\r\n  'bambalapitiya': [6.8900, 79.8600],\r\n  'wellawatta': [6.8900, 79.8600],\r\n  'mount lavinia': [6.8800, 79.8700],\r\n  'dehiwala': [6.8700, 79.8700],\r\n  'borella': [6.9047, 79.8844],\r\n  'dematagoda': [6.8900, 79.8800],\r\n  'kotahena': [6.9500, 79.8400],\r\n  'modara': [6.9600, 79.8300],\r\n  'grandpass': [6.9700, 79.8200],\r\n  'mattakkuliya': [6.9800, 79.8100],\r\n  'peliyagoda': [6.9608, 79.9227],\r\n  \r\n  // Major roads\r\n  'galle road': [6.9100, 79.8500],\r\n  'baseline road': [6.9047, 79.8844],\r\n  'high level road': [6.8481, 79.9285],\r\n  'reid avenue': [6.9200, 79.8500],\r\n  'bauddhaloka mawatha': [6.9100, 79.8500],\r\n  'negombo road': [6.9608, 79.9227], // Peliyagoda area\r\n  \r\n  // Southern areas\r\n  'maharagama': [6.8481, 79.9285],\r\n  'nugegoda': [6.8631, 79.8996],\r\n  'kottawa': [6.8400, 79.9500],\r\n  'homagama': [6.8400, 80.0000],\r\n  'piliyandala': [6.8500, 79.9000],\r\n  'kaduwela': [6.9300, 79.9800],\r\n  'avissawella': [6.9500, 80.2000],\r\n  'rathmalana': [6.8200, 79.8800],\r\n  'moratuwa': [6.8000, 79.9000],\r\n  'panadura': [6.7200, 79.9000],\r\n  'kalutara': [6.5800, 79.9600],\r\n  \r\n  // Other major cities\r\n  'kandy': [7.2906, 80.6337],\r\n  'galle': [6.0329, 80.2169],\r\n  'jaffna': [9.6615, 80.0255],\r\n  'anuradhapura': [8.3114, 80.4037],\r\n  'trincomalee': [8.5874, 81.2152],\r\n  'batticaloa': [7.7102, 81.6924],\r\n  'kurunegala': [7.4863, 80.3633],\r\n  'negombo': [7.2086, 79.8358],\r\n  'ratnapura': [6.6828, 80.4012],\r\n  'badulla': [6.9934, 81.0550]\r\n};\r\n\r\n// Function to get exact coordinates for specific known addresses\r\nconst getExactCoordinatesForAddress = (address) => {\r\n  if (!address) return null;\r\n  \r\n  const addressLower = address.toLowerCase();\r\n  console.log('🔍 Checking address for exact coordinates:', address);\r\n  console.log('🔍 Address in lowercase:', addressLower);\r\n  \r\n  // Check for exact matches in our database\r\n  for (const [location, coords] of Object.entries(sriLankanLocations)) {\r\n    if (addressLower.includes(location)) {\r\n      console.log(`🎯 Found exact location: ${location}`);\r\n      console.log(`📍 Returning coordinates: [${coords[0]}, ${coords[1]}]`);\r\n      return coords;\r\n    }\r\n  }\r\n  \r\n  // Check for specific combinations\r\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\r\n    console.log('🎯 Found exact address: Maradana, Baseline Road, Colombo 10');\r\n    return [6.9271, 79.8665]; // Updated with more accurate coordinates\r\n  }\r\n  \r\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\r\n    console.log('🎯 Found exact address: Maharagama High Level Road');\r\n    return [6.8481, 79.9285];\r\n  }\r\n  \r\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\r\n    console.log('🎯 Found exact address: Borella Baseline Road');\r\n    return [6.9047, 79.8844];\r\n  }\r\n  \r\n  if (addressLower.includes('negombo road') && addressLower.includes('peliyagoda') && addressLower.includes('colombo 15')) {\r\n    console.log('🎯 Found exact address: Negombo Road, Peliyagoda, Colombo 15');\r\n    return [6.9608, 79.9227]; // Correct coordinates for Peliyagoda\r\n  }\r\n  \r\n  console.log('❌ No exact match found for address:', address);\r\n  return null; // No exact match found\r\n};\r\n\r\n// Enhanced geocoding with multiple services for better accuracy\r\nconst geocodeAddress = async (address) => {\r\n  if (!address) return null;\r\n  \r\n  try {\r\n    console.log('🌍 Enhanced geocoding for address:', address);\r\n    \r\n    // Clean and normalize the address\r\n    const cleanAddress = address.trim().replace(/\\s+/g, ' ');\r\n    console.log('🧹 Cleaned address:', cleanAddress);\r\n    \r\n    // Try multiple geocoding approaches\r\n    const results = await Promise.allSettled([\r\n      geocodeWithNominatim(cleanAddress),\r\n      geocodeWithPhoton(cleanAddress),\r\n      geocodeWithLocationIQ(cleanAddress),\r\n      geocodeWithGoogle(cleanAddress) // Most accurate but requires API key\r\n    ]);\r\n    \r\n    // Collect all valid results\r\n    const validResults = results\r\n      .filter(result => result.status === 'fulfilled' && result.value)\r\n      .map(result => result.value)\r\n      .flat();\r\n    \r\n    if (validResults.length === 0) {\r\n      console.log('⚠️ No geocoding results found');\r\n      return null;\r\n    }\r\n    \r\n    // Score and rank all results\r\n    const scoredResults = validResults.map(result => ({\r\n      ...result,\r\n      score: calculateEnhancedLocationScore(result, cleanAddress)\r\n    })).sort((a, b) => b.score - a.score);\r\n    \r\n    console.log(`📊 Found ${scoredResults.length} total results, best score: ${scoredResults[0]?.score}`);\r\n    \r\n    // Return the best result\r\n    const bestResult = scoredResults[0];\r\n    const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\r\n    \r\n    console.log('🎯 Best result:', bestResult.display_name || bestResult.name);\r\n    console.log('📍 Coordinates:', coords);\r\n    console.log('⭐ Score:', bestResult.score);\r\n    \r\n    return coords;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Enhanced geocoding failed:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Geocoding with OpenStreetMap Nominatim\r\nconst geocodeWithNominatim = async (address) => {\r\n  try {\r\n    const searchQueries = [\r\n      `${address}, Sri Lanka`,\r\n      `${address}, Colombo, Sri Lanka`,\r\n      address,\r\n      address.replace(/colombo\\s*(\\d+)/i, 'Colombo $1, Sri Lanka')\r\n    ];\r\n    \r\n    for (const query of searchQueries) {\r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&countrycodes=lk&addressdetails=1&extratags=1`\r\n      );\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.filter(result => \r\n          parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 &&\r\n          parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0\r\n        );\r\n      }\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.log('⚠️ Nominatim geocoding failed:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Geocoding with Photon (Komoot)\r\nconst geocodeWithPhoton = async (address) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://photon.komoot.io/api?q=${encodeURIComponent(address + ', Sri Lanka')}&limit=5&lang=en`\r\n    );\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return (data.features || []).map(feature => ({\r\n        lat: feature.geometry.coordinates[1],\r\n        lon: feature.geometry.coordinates[0],\r\n        display_name: feature.properties.name,\r\n        type: feature.properties.type,\r\n        class: feature.properties.class,\r\n        importance: feature.properties.importance\r\n      })).filter(result => \r\n        parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 &&\r\n        parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0\r\n      );\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.log('⚠️ Photon geocoding failed:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Geocoding with LocationIQ (backup)\r\nconst geocodeWithLocationIQ = async (address) => {\r\n  try {\r\n    // Using a free tier approach - you can replace with actual API key if needed\r\n    const response = await fetch(\r\n      `https://us1.locationiq.com/v1/search?key=pk.test&q=${encodeURIComponent(address + ', Sri Lanka')}&format=json&limit=5&addressdetails=1`\r\n    );\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return data.filter(result => \r\n        parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 &&\r\n        parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0\r\n      );\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.log('⚠️ LocationIQ geocoding failed:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Geocoding with Google Maps (most accurate - requires API key)\r\nconst geocodeWithGoogle = async (address) => {\r\n  try {\r\n    // Note: You need to add your Google Maps API key here\r\n    const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n    \r\n    if (!GOOGLE_API_KEY) {\r\n      console.log('⚠️ Google Maps API key not configured');\r\n      return [];\r\n    }\r\n    \r\n    const response = await fetch(\r\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address + ', Sri Lanka')}&key=${GOOGLE_API_KEY}`\r\n    );\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return (data.results || []).map(result => ({\r\n        lat: result.geometry.location.lat,\r\n        lon: result.geometry.location.lng,\r\n        display_name: result.formatted_address,\r\n        type: result.types[0] || 'unknown',\r\n        class: result.types[0] || 'unknown',\r\n        importance: result.geometry.location_type === 'ROOFTOP' ? 0.9 : 0.7\r\n      })).filter(result => \r\n        parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 &&\r\n        parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0\r\n      );\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.log('⚠️ Google Maps geocoding failed:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Enhanced scoring function for better address matching\r\nconst calculateEnhancedLocationScore = (result, originalAddress) => {\r\n  let score = 0;\r\n  const displayName = (result.display_name || result.name || '').toLowerCase();\r\n  const originalLower = originalAddress.toLowerCase();\r\n  \r\n  // Extract key components from original address\r\n  const addressWords = originalLower.split(/[\\s,]+/).filter(word => word.length > 2);\r\n  const mainLocation = addressWords[0] || '';\r\n  \r\n  // Exact match bonus (highest priority)\r\n  if (displayName.includes(originalLower)) score += 200;\r\n  if (displayName.includes(mainLocation)) score += 150;\r\n  \r\n  // Word-by-word matching for better accuracy\r\n  addressWords.forEach(word => {\r\n    if (displayName.includes(word)) score += 25;\r\n  });\r\n  \r\n  // Sri Lanka context bonus\r\n  if (displayName.includes('sri lanka') || displayName.includes('colombo')) score += 50;\r\n  \r\n  // Road/street match bonus\r\n  const roadTypes = ['road', 'street', 'mawatha', 'avenue', 'place', 'lane', 'drive'];\r\n  roadTypes.forEach(roadType => {\r\n    if (originalLower.includes(roadType) && displayName.includes(roadType)) {\r\n      score += 40;\r\n    }\r\n  });\r\n  \r\n  // Postal code matching\r\n  const postalMatch = originalLower.match(/colombo\\s*(\\d+)/);\r\n  if (postalMatch && displayName.includes(`colombo ${postalMatch[1]}`)) score += 60;\r\n  \r\n  // Importance bonus (from OSM importance field)\r\n  if (result.importance) score += result.importance * 30;\r\n  \r\n  // Type bonus - prioritize more specific types\r\n  const typeScores = {\r\n    'administrative': 20,\r\n    'residential': 15,\r\n    'highway': 25,\r\n    'amenity': 30,\r\n    'building': 10,\r\n    'place': 35\r\n  };\r\n  if (result.type && typeScores[result.type]) {\r\n    score += typeScores[result.type];\r\n  }\r\n  \r\n  // Class bonus\r\n  const classScores = {\r\n    'highway': 15,\r\n    'place': 20,\r\n    'amenity': 25,\r\n    'building': 10\r\n  };\r\n  if (result.class && classScores[result.class]) {\r\n    score += classScores[result.class];\r\n  }\r\n  \r\n  // Distance from Colombo center (prefer locations closer to Colombo)\r\n  const colomboCenter = [6.9271, 79.8612];\r\n  const distance = calculateDistance(\r\n    colomboCenter[0], colomboCenter[1],\r\n    parseFloat(result.lat), parseFloat(result.lon)\r\n  );\r\n  \r\n  // Bonus for locations within 50km of Colombo\r\n  if (distance < 50) {\r\n    score += Math.max(0, 20 - (distance / 5));\r\n  }\r\n  \r\n  return score;\r\n};\r\n\r\n// Legacy function for backward compatibility\r\nconst calculateLocationScore = (result, originalAddress, mainLocation) => {\r\n  return calculateEnhancedLocationScore(result, originalAddress);\r\n};\r\n\r\n// Component to generate emergency location (exact or random)\r\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\r\n  // First, try to get exact coordinates for the address\r\n  if (address) {\r\n    const exactCoords = getExactCoordinatesForAddress(address);\r\n    if (exactCoords) {\r\n      console.log('📍 Using exact coordinates for address:', address);\r\n      return exactCoords;\r\n    }\r\n  }\r\n  \r\n  // If no exact match, generate random location within distance from branch\r\n  console.log('🎲 Generating random location within', maxDistanceKm, 'km from branch coordinates');\r\n  const R = 6371; // Earth's radius in km\r\n  \r\n  // Convert to radians\r\n  const lat1 = branchCoords[0] * Math.PI / 180;\r\n  const lng1 = branchCoords[1] * Math.PI / 180;\r\n  \r\n  // Generate random distance (0 to maxDistanceKm)\r\n  const distance = Math.random() * maxDistanceKm;\r\n  \r\n  // Generate random bearing (0 to 2π)\r\n  const bearing = Math.random() * 2 * Math.PI;\r\n  \r\n  // Calculate new coordinates\r\n  const lat2 = Math.asin(\r\n    Math.sin(lat1) * Math.cos(distance / R) +\r\n    Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing)\r\n  );\r\n  \r\n  const lng2 = lng1 + Math.atan2(\r\n    Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1),\r\n    Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2)\r\n  );\r\n  \r\n  const generatedCoords = [\r\n    lat2 * 180 / Math.PI,\r\n    lng2 * 180 / Math.PI\r\n  ];\r\n  \r\n  console.log('🎲 Generated emergency location:', generatedCoords);\r\n  console.log('📍 Base coordinates used:', branchCoords);\r\n  console.log('📏 Distance from branch:', calculateDistance(branchCoords[0], branchCoords[1], generatedCoords[0], generatedCoords[1]).toFixed(2), 'km');\r\n  \r\n  return generatedCoords;\r\n};\r\n\r\n// Calculate distance between two points using Haversine formula\r\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n  const R = 6371; // Earth's radius in km\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n};\r\n\r\nconst InteractiveMap = ({ \r\n  branchLocation, \r\n  emergencyRequest, \r\n  showRoute = false,\r\n  onRouteCalculated,\r\n  onEmergencyLocationGenerated \r\n}) => {\r\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\r\n  const [route, setRoute] = useState([]);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\r\n  const [mapZoom, setMapZoom] = useState(12);\r\n  const [isGeocoding, setIsGeocoding] = useState(false);\r\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\r\n  \r\n  const mapRef = useRef(null);\r\n\r\n  // Colombo 7 branch coordinates (more accurate)\r\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\r\n  \r\n  \r\n  // Default branch location if not provided\r\n  const defaultBranchLocation = {\r\n    name: 'Colombo 7 Branch',\r\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\r\n    coordinates: colombo7BranchCoords\r\n  };\r\n\r\n  const branch = branchLocation || defaultBranchLocation;\r\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\r\n\r\n  // Generate emergency location when emergency request is provided\r\n  useEffect(() => {\r\n    const processEmergencyLocation = async () => {\r\n      console.log('🚀 Processing emergency location...');\r\n      console.log('📋 Emergency request:', emergencyRequest);\r\n      console.log('📍 Current emergency coords:', emergencyCoords);\r\n      \r\n      if (emergencyRequest && !emergencyCoords) {\r\n        let coords;\r\n        let locationType = 'generated';\r\n        \r\n        console.log('🔍 Emergency request found, processing location...');\r\n        \r\n        if (emergencyRequest.brigadeLocation) {\r\n          // First, try to get exact coordinates for the address (prioritize over provided coordinates)\r\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\r\n          console.log('🎯 Exact coords result:', exactCoords);\r\n          \r\n          if (exactCoords) {\r\n            coords = exactCoords;\r\n            locationType = 'exact';\r\n            console.log('✅ Using exact coordinates for address (overriding provided):', emergencyRequest.brigadeLocation, '->', coords);\r\n          } else if (emergencyRequest.coordinates) {\r\n            // Use provided coordinates only if no exact match found\r\n            coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n            locationType = 'provided';\r\n            console.log('📍 Using provided coordinates:', coords);\r\n          } else {\r\n            // Try to geocode the address to get real coordinates\r\n            console.log('🌍 Attempting to geocode address:', emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(true);\r\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(false);\r\n            \r\n            if (geocodedCoords) {\r\n              coords = geocodedCoords;\r\n              locationType = 'geocoded';\r\n              console.log('✅ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\r\n            } else {\r\n              // Fallback: Generate random location within 30km\r\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\r\n              locationType = 'generated';\r\n              console.log('🎲 Generated random emergency location within 30km:', coords);\r\n            }\r\n          }\r\n        } else if (emergencyRequest.coordinates) {\r\n          // Use provided coordinates only if no address provided\r\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n          locationType = 'provided';\r\n          console.log('📍 Using provided coordinates (no address):', coords);\r\n        } else {\r\n          // No address provided, generate random location\r\n          coords = generateEmergencyLocation(branchCoords, 30);\r\n          locationType = 'generated';\r\n          console.log('🎲 Generated random emergency location within 30km (no address):', coords);\r\n        }\r\n        \r\n        // Set the generated location state\r\n        const locationData = {\r\n          lat: coords[0],\r\n          lng: coords[1],\r\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\r\n          type: locationType\r\n        };\r\n        setGeneratedEmergencyLocation(locationData);\r\n        \r\n        // Notify parent component about generated location\r\n        if (onEmergencyLocationGenerated) {\r\n          onEmergencyLocationGenerated(locationData);\r\n        }\r\n        \r\n        setEmergencyCoords(coords);\r\n        \r\n        // Debug: Log the coordinates being used\r\n        console.log('🗺️ Emergency location coordinates set:', coords);\r\n        console.log('📍 Address:', emergencyRequest.brigadeLocation);\r\n        console.log('🎯 Location type:', locationType);\r\n        console.log('🔍 Final coordinates for map marker:', coords);\r\n        console.log('📊 Location data object:', locationData);\r\n        \r\n        // Calculate distance\r\n        const calculatedDistance = calculateDistance(\r\n          branchCoords[0], branchCoords[1],\r\n          coords[0], coords[1]\r\n        );\r\n        setDistance(calculatedDistance);\r\n        \r\n        // Calculate estimated time (assuming 40 km/h average speed)\r\n        const timeInHours = calculatedDistance / 40;\r\n        const hours = Math.floor(timeInHours);\r\n        const minutes = Math.round((timeInHours - hours) * 60);\r\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n        setEstimatedTime(timeString);\r\n        \r\n        // Update map center to show both locations\r\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\r\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\r\n        setMapCenter([centerLat, centerLng]);\r\n        setMapZoom(11);\r\n      }\r\n    };\r\n\r\n    processEmergencyLocation();\r\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\r\n\r\n  // Calculate route when showRoute is true\r\n  useEffect(() => {\r\n    if (showRoute && emergencyCoords && branchCoords) {\r\n      calculateRoute();\r\n    }\r\n  }, [showRoute, emergencyCoords, branchCoords]);\r\n\r\n  const calculateRoute = async () => {\r\n    if (!emergencyCoords || !branchCoords) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Create a simple route with waypoints\r\n      const routePoints = [\r\n        branchCoords,\r\n        [\r\n          (branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01,\r\n          (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01\r\n        ],\r\n        emergencyCoords\r\n      ];\r\n      \r\n      setRoute(routePoints);\r\n      \r\n      // Calculate road distance (approximate)\r\n      let roadDistance = 0;\r\n      for (let i = 0; i < routePoints.length - 1; i++) {\r\n        roadDistance += calculateDistance(\r\n          routePoints[i][0], routePoints[i][1],\r\n          routePoints[i + 1][0], routePoints[i + 1][1]\r\n        );\r\n      }\r\n      \r\n      // Add some road factor (roads are not straight lines)\r\n      roadDistance *= 1.3; // 30% longer than straight line\r\n      setDistance(roadDistance);\r\n      \r\n      // Calculate estimated time\r\n      const timeInHours = roadDistance / 40; // 40 km/h average\r\n      const hours = Math.floor(timeInHours);\r\n      const minutes = Math.round((timeInHours - hours) * 60);\r\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n      setEstimatedTime(timeString);\r\n      \r\n      // Notify parent component\r\n      if (onRouteCalculated) {\r\n        onRouteCalculated({\r\n          distance: roadDistance,\r\n          estimatedTime: timeString,\r\n          route: routePoints\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error calculating route:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-96 border border-gray-300 rounded-lg overflow-hidden relative\">\r\n      <MapContainer\r\n        ref={mapRef}\r\n        center={mapCenter}\r\n        zoom={mapZoom}\r\n        style={{ height: '100%', width: '100%' }}\r\n        scrollWheelZoom={true}\r\n      >\r\n        <MapUpdater center={mapCenter} zoom={mapZoom} />\r\n        \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        \r\n        {/* Branch Marker */}\r\n        <Marker position={branchCoords} icon={branchIcon}>\r\n          <Popup>\r\n            <div className=\"p-2\">\r\n              <h3 className=\"font-bold text-blue-600\">🏢 {branch.name}</h3>\r\n              <p className=\"text-sm text-gray-600\">{branch.address}</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                📍 {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}\r\n              </p>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n        \r\n        {/* Emergency Location Marker */}\r\n        {emergencyCoords && (\r\n          <Marker \r\n            position={emergencyCoords} \r\n            icon={\r\n              generatedEmergencyLocation?.type === 'exact' || generatedEmergencyLocation?.type === 'geocoded' \r\n                ? exactEmergencyIcon \r\n                : emergencyIcon\r\n            }\r\n          >\r\n            <Popup>\r\n              <div className=\"p-2\">\r\n                <h3 className=\"font-bold text-red-600\">🚨 Emergency Location</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeName || 'Emergency Request'}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeLocation || 'Generated Location'}\r\n                </p>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  📍 {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}\r\n                </p>\r\n                {generatedEmergencyLocation && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    {generatedEmergencyLocation.type === 'exact' ? '✅ Exact location' :\r\n                     generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded location' :\r\n                     generatedEmergencyLocation.type === 'provided' ? '📍 Provided coordinates' :\r\n                     '🎲 Generated location'}\r\n                  </p>\r\n                )}\r\n                {distance && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    📏 Distance: {distance.toFixed(2)} km\r\n                  </p>\r\n                )}\r\n                {estimatedTime && (\r\n                  <p className=\"text-xs text-green-600\">\r\n                    ⏱️ Est. Time: {estimatedTime}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        )}\r\n        \r\n        {/* Route Line */}\r\n        {showRoute && route.length > 0 && (\r\n          <Polyline\r\n            positions={route}\r\n            color=\"#3B82F6\"\r\n            weight={4}\r\n            opacity={0.8}\r\n            dashArray=\"10, 10\"\r\n          />\r\n        )}\r\n        \r\n        {/* Loading indicator */}\r\n        {(loading || isGeocoding) && (\r\n          <div className=\"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\r\n              <span className=\"text-sm text-gray-600\">\r\n                {isGeocoding ? 'Finding exact location...' : 'Calculating route...'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </MapContainer>\r\n      \r\n      {/* Navigation Info Panel */}\r\n      <div className=\"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\">\r\n        <h4 className=\"font-semibold text-gray-800 mb-2\">🚨 Emergency Route</h4>\r\n        <div className=\"text-sm space-y-2\">\r\n          {/* Destination */}\r\n          <div>\r\n            <p className=\"font-medium text-gray-700\">📍 Destination:</p>\r\n            <p className=\"text-gray-600 text-xs break-words\">{emergencyRequest?.brigadeLocation || 'Emergency Location'}</p>\r\n          </div>\r\n          \r\n          {/* Navigation Details */}\r\n          <div className=\"flex justify-between items-center\">\r\n            <div className=\"flex-1\">\r\n              <p className=\"text-gray-600\">Distance: <span className=\"font-medium\">{distance ? `${distance.toFixed(1)} km` : 'Calculating...'}</span></p>\r\n              <p className=\"text-gray-600\">Time: <span className=\"font-medium\">{estimatedTime || 'Calculating...'}</span></p>\r\n            </div>\r\n            {emergencyRequest?.priority && (\r\n              <span className={`px-2 py-1 rounded text-xs font-medium ml-2 ${\r\n                emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' :\r\n                emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' :\r\n                'bg-yellow-100 text-yellow-800'\r\n              }`}>\r\n                {emergencyRequest.priority}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}