{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\EmergencyRouteMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst EmergencyRouteMap = ({\n  emergencyRequest,\n  branchLocation,\n  onClose\n}) => {\n  _s();\n  const [route, setRoute] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n  const [directions, setDirections] = useState([]);\n  const [routeDetails, setRouteDetails] = useState(null);\n\n  // Default coordinates for Colombo, Sri Lanka\n  const defaultCenter = [6.9271, 79.8612];\n\n  // Parse coordinates from emergency request\n  const emergencyCoords = emergencyRequest !== null && emergencyRequest !== void 0 && emergencyRequest.coordinates ? [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng] : defaultCenter;\n\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\n  const branchCoords = branchLocation ? [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : defaultCenter;\n\n  // Calculate distance between two points using Haversine formula\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  };\n\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\n  const calculateEstimatedTime = distanceKm => {\n    const averageSpeed = 40; // km/h\n    const timeInHours = distanceKm / averageSpeed;\n    const hours = Math.floor(timeInHours);\n    const minutes = Math.round((timeInHours - hours) * 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  // Calculate road distance along the route\n  const calculateRoadDistance = route => {\n    let totalDistance = 0;\n    for (let i = 0; i < route.length - 1; i++) {\n      const segmentDistance = calculateDistance(route[i][0], route[i][1], route[i + 1][0], route[i + 1][1]);\n      totalDistance += segmentDistance;\n    }\n    return totalDistance;\n  };\n\n  // Calculate route using real road-based routing\n  const calculateRoute = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('üöÄ Starting real road route calculation...');\n      console.log('üìç Branch coords:', branchCoords);\n      console.log('üìç Emergency coords:', emergencyCoords);\n\n      // Try to get real road route using OpenRouteService\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\n      if (realRoute && realRoute.length > 0) {\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\n        setRoute(realRoute);\n\n        // Generate turn-by-turn directions\n        const roadNetwork = getColomboRoadNetwork();\n        const turnByTurnDirections = generateTurnByTurnDirections(realRoute, roadNetwork);\n        setDirections(turnByTurnDirections);\n\n        // Calculate actual road distance\n        const roadDistance = calculateRoadDistance(realRoute);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n        console.log(`üìç Real road route calculated:`);\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\n        console.log(`üß≠ Turn-by-turn directions: ${turnByTurnDirections.length} steps`);\n      } else {\n        // Fallback to improved road-based route\n        console.log('üîÑ Falling back to improved road-based route');\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\n        if (!routeCoordinates || routeCoordinates.length < 2) {\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\n          setRoute([branchCoords, emergencyCoords]);\n        } else {\n          setRoute(routeCoordinates);\n        }\n        const roadDistance = calculateRoadDistance(routeCoordinates);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n      }\n\n      // Compare with straight-line distance\n      const straightLineDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\n    } catch (err) {\n      console.error('Error calculating route:', err);\n      setError('Failed to calculate route. Showing direct path.');\n      // Fallback to straight line\n      const fallbackRoute = [branchCoords, emergencyCoords];\n      setRoute(fallbackRoute);\n      const fallbackDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      setDistance(fallbackDistance);\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\n      console.log('üîÑ Using fallback route:', fallbackRoute);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get real road route using Google Maps Directions API\n  const getRealRoadRoute = async (start, end) => {\n    try {\n      console.log('üåê Getting real-time route from Google Maps Directions API...');\n\n      // Google Maps Directions API - FREE with limits\n      // Get your free API key from: https://console.cloud.google.com/google/maps-apis\n      const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_GOOGLE_MAPS_API_KEY';\n      if (GOOGLE_API_KEY === 'YOUR_GOOGLE_MAPS_API_KEY') {\n        console.log('‚ö†Ô∏è Google Maps API key not configured. Please add your API key to use real routing.');\n        console.log('üìù To get a free API key: https://console.cloud.google.com/google/maps-apis');\n        console.log('üîß Add it to your .env file as: REACT_APP_GOOGLE_MAPS_API_KEY=your_api_key_here');\n        return createRealisticColomboRoute(start, end);\n      }\n      const response = await fetch(`https://maps.googleapis.com/maps/api/directions/json?` + `origin=${start[0]},${start[1]}&` + `destination=${end[0]},${end[1]}&` + `mode=driving&` + `avoid=tolls&` + `traffic_model=best_guess&` + `departure_time=now&` + `key=${GOOGLE_API_KEY}`);\n      const data = await response.json();\n      if (data.status === 'OK' && data.routes && data.routes[0]) {\n        const route = data.routes[0];\n\n        // Extract route coordinates from the polyline\n        if (route.overview_polyline && route.overview_polyline.points) {\n          var _route$legs$0$duratio, _route$legs$0$duratio2;\n          const coordinates = decodePolyline(route.overview_polyline.points);\n          console.log('‚úÖ Google Maps route obtained successfully');\n          console.log(`üõ£Ô∏è Route distance: ${route.legs[0].distance.text}`);\n          console.log(`‚è±Ô∏è Route duration: ${route.legs[0].duration.text}`);\n          console.log(`üö¶ Traffic duration: ${((_route$legs$0$duratio = route.legs[0].duration_in_traffic) === null || _route$legs$0$duratio === void 0 ? void 0 : _route$legs$0$duratio.text) || 'N/A'}`);\n\n          // Store route details for turn-by-turn directions\n          setRouteDetails({\n            distance: route.legs[0].distance.value / 1000,\n            // Convert to km\n            duration: route.legs[0].duration.value,\n            // in seconds\n            durationInTraffic: (_route$legs$0$duratio2 = route.legs[0].duration_in_traffic) === null || _route$legs$0$duratio2 === void 0 ? void 0 : _route$legs$0$duratio2.value,\n            steps: route.legs[0].steps,\n            summary: route.summary\n          });\n          return coordinates;\n        }\n      } else {\n        console.error('‚ùå Google Maps API error:', data.status, data.error_message);\n        throw new Error(`Google Maps API error: ${data.status}`);\n      }\n    } catch (error) {\n      console.error('üåê Google Maps API failed:', error);\n      console.log('üîÑ Falling back to simulated routing');\n      return createRealisticColomboRoute(start, end);\n    }\n  };\n\n  // Decode Google Maps polyline (helper function)\n  const decodePolyline = encoded => {\n    const points = [];\n    let index = 0;\n    const len = encoded.length;\n    let lat = 0;\n    let lng = 0;\n    while (index < len) {\n      let b,\n        shift = 0,\n        result = 0;\n      do {\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      const dlat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lat += dlat;\n      shift = 0;\n      result = 0;\n      do {\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      const dlng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lng += dlng;\n      points.push([lat / 1e5, lng / 1e5]);\n    }\n    return points;\n  };\n\n  // Create improved road route (fallback)\n  const createImprovedRoadRoute = (start, end) => {\n    console.log('üõ£Ô∏è Creating improved road route...');\n\n    // Use the realistic Colombo route as fallback\n    return createRealisticColomboRoute(start, end);\n  };\n\n  // Get Colombo road network (extracted for reuse)\n  const getColomboRoadNetwork = () => {\n    return {\n      // Galle Road - Main coastal road with detailed segments\n      galleRoad: {\n        segments: [{\n          start: [6.9280, 79.8600],\n          end: [6.9250, 79.8580],\n          name: \"Galle Face to Chatham Street\"\n        }, {\n          start: [6.9250, 79.8580],\n          end: [6.9220, 79.8550],\n          name: \"Chatham Street to Pettah\"\n        }, {\n          start: [6.9220, 79.8550],\n          end: [6.9200, 79.8520],\n          name: \"Pettah to Slave Island\"\n        }, {\n          start: [6.9200, 79.8520],\n          end: [6.9180, 79.8490],\n          name: \"Slave Island to Kollupitiya\"\n        }, {\n          start: [6.9180, 79.8490],\n          end: [6.9150, 79.8460],\n          name: \"Kollupitiya to Bambalapitiya\"\n        }, {\n          start: [6.9150, 79.8460],\n          end: [6.9120, 79.8430],\n          name: \"Bambalapitiya to Wellawatta\"\n        }, {\n          start: [6.9120, 79.8430],\n          end: [6.9060, 79.8370],\n          name: \"Wellawatta to Mount Lavinia\"\n        }],\n        curves: [{\n          point: [6.9265, 79.8590],\n          radius: 0.002\n        },\n        // Galle Face curve\n        {\n          point: [6.9235, 79.8565],\n          radius: 0.0015\n        },\n        // Pettah curve\n        {\n          point: [6.9190, 79.8505],\n          radius: 0.002\n        },\n        // Slave Island curve\n        {\n          point: [6.9165, 79.8475],\n          radius: 0.0015\n        } // Kollupitiya curve\n        ]\n      },\n      // Union Place to Maradana Road\n      unionPlaceRoad: {\n        segments: [{\n          start: [6.9300, 79.8650],\n          end: [6.9330, 79.8680],\n          name: \"Union Place to Maradana\"\n        }],\n        curves: [{\n          point: [6.9315, 79.8665],\n          radius: 0.001\n        }]\n      },\n      // Liberty Plaza Road\n      libertyPlazaRoad: {\n        segments: [{\n          start: [6.9180, 79.8490],\n          end: [6.9160, 79.8470],\n          name: \"Kollupitiya to Liberty Plaza\"\n        }, {\n          start: [6.9160, 79.8470],\n          end: [6.9150, 79.8460],\n          name: \"Liberty Plaza to Bambalapitiya\"\n        }],\n        curves: [{\n          point: [6.9170, 79.8480],\n          radius: 0.0008\n        }]\n      },\n      // Odel to Crescat Road\n      odelCrescatRoad: {\n        segments: [{\n          start: [6.9140, 79.8450],\n          end: [6.9130, 79.8440],\n          name: \"Odel to Crescat\"\n        }, {\n          start: [6.9130, 79.8440],\n          end: [6.9120, 79.8430],\n          name: \"Crescat to Wellawatta\"\n        }],\n        curves: [{\n          point: [6.9135, 79.8445],\n          radius: 0.0005\n        }]\n      }\n    };\n  };\n\n  // Find the best road path between two points\n  const findBestRoadPath = (start, end, roadNetwork) => {\n    const paths = [];\n\n    // Check if both points are on Galle Road\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\n      paths.push({\n        road: 'galleRoad',\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\n      });\n    }\n\n    // Check other road combinations\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\n      if (roadName !== 'galleRoad') {\n        const distance = calculatePathDistance(start, end, roadData);\n        if (distance < 5) {\n          // Within 5km\n          paths.push({\n            road: roadName,\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\n            distance: distance\n          });\n        }\n      }\n    });\n\n    // Return the shortest path\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\n      road: 'galleRoad',\n      segments: roadNetwork.galleRoad.segments,\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\n    };\n  };\n\n  // Check if a point is on a specific road\n  const isPointOnRoad = (point, road) => {\n    return road.segments.some(segment => {\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n      return distanceToStart + distanceToEnd <= segmentLength + 0.1; // Within 100m of road\n    });\n  };\n\n  // Get road segments between two points\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\n    // For simplicity, return all segments of the road\n    // In a real implementation, this would find the specific segments between the points\n    return road.segments;\n  };\n\n  // Calculate path distance\n  const calculatePathDistance = (start, end, road) => {\n    let totalDistance = 0;\n    road.segments.forEach(segment => {\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n    });\n    return totalDistance;\n  };\n\n  // Create detailed route with curves and road segments\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\n    const route = [start];\n    const road = roadNetwork[roadPath.road];\n\n    // Add road segments with curves\n    road.segments.forEach((segment, index) => {\n      // Add start of segment\n      route.push(segment.start);\n\n      // Add curve points if available\n      if (road.curves && road.curves[index]) {\n        const curve = road.curves[index];\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\n        route.push(...curvePoints);\n      }\n\n      // Add end of segment\n      route.push(segment.end);\n    });\n\n    // Add final destination\n    route.push(end);\n\n    // Remove duplicate consecutive points\n    return removeDuplicatePoints(route);\n  };\n\n  // Generate curve points between two road segments\n  const generateCurvePoints = (start, end, curve) => {\n    const curvePoints = [];\n    const numCurvePoints = 3; // Number of points to create the curve\n\n    for (let i = 1; i <= numCurvePoints; i++) {\n      const t = i / (numCurvePoints + 1);\n\n      // Create a curved path using the curve center and radius\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\n      const curvePoint = [start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI / 2), start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI / 2)];\n      curvePoints.push(curvePoint);\n    }\n    return curvePoints;\n  };\n\n  // Remove duplicate consecutive points\n  const removeDuplicatePoints = points => {\n    const uniquePoints = [points[0]];\n    for (let i = 1; i < points.length; i++) {\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\n      const currentPoint = points[i];\n      const distance = calculateDistance(prevPoint[0], prevPoint[1], currentPoint[0], currentPoint[1]);\n\n      // Only add point if it's more than 10 meters away from previous point\n      if (distance > 0.01) {\n        uniquePoints.push(currentPoint);\n      }\n    }\n    return uniquePoints;\n  };\n\n  // Create Google Maps-style realistic route with curves and road segments\n  const createRealisticColomboRoute = (start, end) => {\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\n\n    // Get detailed Colombo road network with curves and segments\n    const colomboRoadNetwork = getColomboRoadNetwork();\n\n    // Find the best road path between start and end\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\n\n    // Create detailed route with curves and road segments\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\n    return detailedRoute;\n  };\n\n  // Generate turn-by-turn directions like Google Maps\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\n    const directions = [];\n    for (let i = 0; i < route.length - 1; i++) {\n      const currentPoint = route[i];\n      const nextPoint = route[i + 1];\n\n      // Find which road segment this is on\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\n      if (roadSegment) {\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\n        if (direction) {\n          directions.push({\n            step: i + 1,\n            instruction: direction.instruction,\n            distance: direction.distance,\n            road: roadSegment.name,\n            coordinates: currentPoint\n          });\n        }\n      }\n    }\n    return directions;\n  };\n\n  // Find which road segment a route segment belongs to\n  const findRoadSegment = (start, end, roadNetwork) => {\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\n      for (const segment of roadData.segments) {\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) {\n          // Within 100m\n          return {\n            ...segment,\n            roadName\n          };\n        }\n      }\n    }\n    return null;\n  };\n\n  // Generate direction text for a route segment\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\n    if (stepIndex === 0) {\n      return {\n        instruction: `Start from ${roadSegment.name}`,\n        distance: distanceText\n      };\n    }\n\n    // Determine direction based on coordinates\n    const latDiff = end[0] - start[0];\n    const lngDiff = end[1] - start[1];\n    let direction = '';\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\n    } else {\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\n    }\n    return {\n      instruction: `${direction} on ${roadSegment.name}`,\n      distance: distanceText\n    };\n  };\n\n  // Find closest intersection to a point\n  const findClosestIntersection = (point, intersections) => {\n    let closest = null;\n    let minDistance = Infinity;\n    Object.entries(intersections).forEach(([name, coords]) => {\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closest = {\n          name,\n          coords,\n          distance\n        };\n      }\n    });\n    return closest;\n  };\n\n  // Get intermediate intersections for routing\n  const getIntermediateIntersections = (startName, endName, intersections) => {\n    const route = [];\n\n    // Define common routing patterns in Colombo\n    const routingPatterns = {\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\n      'fort-to-maradana': ['unionPlace'],\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\n      'wellawatta-to-mountLavinia': ['mountLavinia']\n    };\n\n    // Find matching pattern\n    const patternKey = `${startName}-to-${endName}`;\n    const reversePatternKey = `${endName}-to-${startName}`;\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\n    if (pattern) {\n      pattern.forEach(intersectionName => {\n        if (intersections[intersectionName]) {\n          route.push(intersections[intersectionName]);\n        }\n      });\n    } else {\n      // Default routing through major intersections\n      if (startName === 'fort') {\n        route.push(intersections.chathamStreet);\n        route.push(intersections.pettah);\n        route.push(intersections.slaveIsland);\n      }\n    }\n    return route;\n  };\n  useEffect(() => {\n    if (emergencyRequest && branchLocation) {\n      console.log('üîÑ useEffect triggered - calculating route');\n      console.log('üìç Emergency request:', emergencyRequest);\n      console.log('üìç Branch location:', branchLocation);\n      calculateRoute();\n    } else {\n      console.log('‚ö†Ô∏è useEffect - missing data:', {\n        emergencyRequest: !!emergencyRequest,\n        branchLocation: !!branchLocation\n      });\n    }\n  }, [emergencyRequest, branchLocation]);\n\n  // Manual route calculation trigger\n  const handleManualRouteCalculation = () => {\n    console.log('üîß Manual route calculation triggered');\n    calculateRoute();\n  };\n\n  // Test route function to ensure Polyline works\n  const createTestRoute = () => {\n    console.log('üß™ Creating test route');\n    const testRoute = [branchCoords, [branchCoords[0] + 0.01, branchCoords[1] + 0.01],\n    // Add some offset\n    [branchCoords[0] + 0.02, branchCoords[1] + 0.02],\n    // Add more offset\n    emergencyCoords];\n    setRoute(testRoute);\n    console.log('üß™ Test route set:', testRoute);\n  };\n\n  // Calculate center point for map\n  const mapCenter = [(branchCoords[0] + emergencyCoords[0]) / 2, (branchCoords[1] + emergencyCoords[1]) / 2];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900\",\n            children: \"Emergency Route Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"w-6 h-6\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M6 18L18 6M6 6l12 12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-900 mb-2\",\n            children: \"Emergency Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Location:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 657,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 657,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Brigade:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 658,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Water Level:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Priority:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 660,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 663,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 664,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 17\n              }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Distance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 33\n                }, this), \" \", distance.toFixed(2), \" km\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 30\n              }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Est. Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 38\n                }, this), \" \", estimatedTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2 text-gray-600\",\n            children: \"Calculating route...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-yellow-800\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-md text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-gray-700 mb-2\",\n            children: \"\\uD83D\\uDEE3\\uFE0F Real Road Routing Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Route Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 16\n            }, this), \" \", route ? `‚úÖ Real road route calculated (${route.length} waypoints)` : '‚ùå No route']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Branch Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 16\n            }, this), \" Colombo Central Branch (\", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Emergency Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 16\n            }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation, \" (\", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this), route && route.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Route Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 20\n              }, this), \" \", route.slice(0, 3).map((point, i) => `${i + 1}:(${point[0].toFixed(4)},${point[1].toFixed(4)})`).join(' ‚Üí '), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Routing Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 20\n              }, this), \" Real Colombo road intersections and landmarks\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Road Distance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 20\n              }, this), \" \", distance ? `${distance.toFixed(2)} km` : 'Calculating...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Estimated Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 20\n              }, this), \" \", estimatedTime || 'Calculating...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-600 mt-2\",\n            children: [\"\\uD83D\\uDCA1 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Note:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 18\n            }, this), \" Routes follow actual Colombo roads through real intersections like Fort, Pettah, Slave Island, Kollupitiya, etc.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-96 w-full border border-gray-300 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            center: mapCenter,\n            zoom: 12,\n            style: {\n              height: '100%',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: branchCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-green-700\",\n                    children: \"\\uD83C\\uDFE2 Your Branch\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 718,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Name:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 719,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 719,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Address:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 720,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 720,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 721,\n                      columnNumber: 44\n                    }, this), \" \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 721,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83D\\uDCCD Starting point for emergency delivery\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 722,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: emergencyCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-red-700\",\n                    children: \"\\uD83D\\uDEA8 Emergency Location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 731,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Location:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 732,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 732,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Brigade:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 733,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 733,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Water Level:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 734,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 734,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Priority:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 735,\n                      columnNumber: 44\n                    }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 735,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 736,\n                      columnNumber: 44\n                    }, this), \" \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 736,\n                    columnNumber: 21\n                  }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Distance:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 737,\n                      columnNumber: 57\n                    }, this), \" \", distance.toFixed(2), \" km\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 737,\n                    columnNumber: 34\n                  }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Est. Time:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 738,\n                      columnNumber: 62\n                    }, this), \" \", estimatedTime]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 738,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83C\\uDFAF Destination for water delivery\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 739,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 730,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 15\n            }, this), route && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: route,\n              color: \"red\",\n              weight: 4,\n              opacity: 0.8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 17\n            }, this), (!route || route.length === 0) && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: [branchCoords, emergencyCoords],\n              color: \"orange\",\n              weight: 3,\n              opacity: 0.6,\n              dashArray: \"5, 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this), route && route.length > 2 && route.slice(1, -1).map((waypoint, index) => /*#__PURE__*/_jsxDEV(Marker, {\n              position: waypoint,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-blue-700\",\n                    children: [\"\\uD83D\\uDEE3\\uFE0F Road Waypoint \", index + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 770,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: \"Following actual Colombo roads\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 771,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 772,\n                      columnNumber: 46\n                    }, this), \" \", waypoint[0].toFixed(6), \", \", waypoint[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 772,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83D\\uDCCD Real road intersection/landmark\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 773,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 769,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }, this), directions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-800 mb-3\",\n            children: \"\\uD83E\\uDDED Turn-by-Turn Directions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-h-48 overflow-y-auto\",\n            children: directions.map((direction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-start space-x-3 py-2 border-b border-blue-100 last:border-b-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium\",\n                children: direction.step\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 788,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-blue-800 font-medium\",\n                  children: direction.instruction\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 792,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-blue-600\",\n                  children: [direction.distance, \" \\u2022 \", direction.road]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 793,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDCCD Red line shows Google Maps-style route to emergency location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDEE3\\uFE0F Route follows actual Colombo roads with curves and turns\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDE97 Distance calculated along roads, not straight line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDEA8 Follow traffic rules and emergency protocols\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u23F1\\uFE0F Estimated time based on 40 km/h average speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 15\n            }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83D\\uDCCF Road distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 28\n            }, this), directions.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83E\\uDDED \", directions.length, \" turn-by-turn directions provided\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleManualRouteCalculation,\n              disabled: loading,\n              className: \"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\",\n              children: loading ? 'Calculating...' : 'Calculate Route'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: calculateRoute,\n              disabled: loading,\n              className: \"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\",\n              children: loading ? 'Recalculating...' : 'Recalculate Route'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: createTestRoute,\n              className: \"px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700\",\n              children: \"Test Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onClose,\n              className: \"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 636,\n    columnNumber: 5\n  }, this);\n};\n_s(EmergencyRouteMap, \"Oy1+ZPpYN1a18rHkL3K3AVYYmRk=\");\n_c = EmergencyRouteMap;\nexport default EmergencyRouteMap;\nvar _c;\n$RefreshReg$(_c, \"EmergencyRouteMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","Polyline","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","EmergencyRouteMap","emergencyRequest","branchLocation","onClose","_s","route","setRoute","loading","setLoading","error","setError","distance","setDistance","estimatedTime","setEstimatedTime","directions","setDirections","routeDetails","setRouteDetails","defaultCenter","emergencyCoords","coordinates","lat","lng","branchCoords","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","calculateEstimatedTime","distanceKm","averageSpeed","timeInHours","hours","floor","minutes","round","calculateRoadDistance","totalDistance","i","length","segmentDistance","calculateRoute","console","log","realRoute","getRealRoadRoute","roadNetwork","getColomboRoadNetwork","turnByTurnDirections","generateTurnByTurnDirections","roadDistance","calculatedTime","toFixed","routeCoordinates","createImprovedRoadRoute","warn","straightLineDistance","err","fallbackRoute","fallbackDistance","start","end","GOOGLE_API_KEY","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","createRealisticColomboRoute","response","fetch","data","json","status","routes","overview_polyline","points","_route$legs$0$duratio","_route$legs$0$duratio2","decodePolyline","legs","text","duration","duration_in_traffic","value","durationInTraffic","steps","summary","error_message","Error","encoded","index","len","b","shift","result","charAt","charCodeAt","dlat","dlng","push","galleRoad","segments","name","curves","point","radius","unionPlaceRoad","libertyPlazaRoad","odelCrescatRoad","findBestRoadPath","paths","isPointOnRoad","road","getRoadSegmentsBetweenPoints","calculatePathDistance","Object","entries","forEach","roadName","roadData","sort","some","segment","distanceToStart","distanceToEnd","segmentLength","createDetailedRouteWithCurves","roadPath","curve","curvePoints","generateCurvePoints","removeDuplicatePoints","numCurvePoints","t","angle","curveOffset","curvePoint","uniquePoints","prevPoint","currentPoint","colomboRoadNetwork","detailedRoute","nextPoint","roadSegment","findRoadSegment","direction","generateDirectionText","step","instruction","stepIndex","distanceText","latDiff","lngDiff","abs","findClosestIntersection","intersections","closest","minDistance","Infinity","coords","getIntermediateIntersections","startName","endName","routingPatterns","patternKey","reversePatternKey","pattern","intersectionName","chathamStreet","pettah","slaveIsland","handleManualRouteCalculation","createTestRoute","testRoute","mapCenter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","brigadeLocation","brigadeName","waterLevel","priority","address","slice","map","join","center","zoom","style","height","width","attribution","url","position","positions","color","weight","opacity","dashArray","waypoint","disabled","_c","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/EmergencyRouteMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\nconst EmergencyRouteMap = ({ emergencyRequest, branchLocation, onClose }) => {\r\n  const [route, setRoute] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n  const [directions, setDirections] = useState([]);\r\n  const [routeDetails, setRouteDetails] = useState(null);\r\n\r\n  // Default coordinates for Colombo, Sri Lanka\r\n  const defaultCenter = [6.9271, 79.8612];\r\n  \r\n  // Parse coordinates from emergency request\r\n  const emergencyCoords = emergencyRequest?.coordinates ? \r\n    [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng] : \r\n    defaultCenter;\r\n\r\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\r\n  const branchCoords = branchLocation ? \r\n    [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : \r\n    defaultCenter;\r\n\r\n  // Calculate distance between two points using Haversine formula\r\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n    const R = 6371; // Earth's radius in km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\r\n  const calculateEstimatedTime = (distanceKm) => {\r\n    const averageSpeed = 40; // km/h\r\n    const timeInHours = distanceKm / averageSpeed;\r\n    const hours = Math.floor(timeInHours);\r\n    const minutes = Math.round((timeInHours - hours) * 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  };\r\n\r\n  // Calculate road distance along the route\r\n  const calculateRoadDistance = (route) => {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const segmentDistance = calculateDistance(\r\n        route[i][0], route[i][1],\r\n        route[i + 1][0], route[i + 1][1]\r\n      );\r\n      totalDistance += segmentDistance;\r\n    }\r\n    return totalDistance;\r\n  };\r\n\r\n  // Calculate route using real road-based routing\r\n  const calculateRoute = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('üöÄ Starting real road route calculation...');\r\n      console.log('üìç Branch coords:', branchCoords);\r\n      console.log('üìç Emergency coords:', emergencyCoords);\r\n      \r\n      // Try to get real road route using OpenRouteService\r\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\r\n      \r\n      if (realRoute && realRoute.length > 0) {\r\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\r\n        setRoute(realRoute);\r\n        \r\n        // Generate turn-by-turn directions\r\n        const roadNetwork = getColomboRoadNetwork();\r\n        const turnByTurnDirections = generateTurnByTurnDirections(realRoute, roadNetwork);\r\n        setDirections(turnByTurnDirections);\r\n        \r\n        // Calculate actual road distance\r\n        const roadDistance = calculateRoadDistance(realRoute);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n        \r\n        console.log(`üìç Real road route calculated:`);\r\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\r\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\r\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\r\n        console.log(`üß≠ Turn-by-turn directions: ${turnByTurnDirections.length} steps`);\r\n      } else {\r\n        // Fallback to improved road-based route\r\n        console.log('üîÑ Falling back to improved road-based route');\r\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\r\n        \r\n        if (!routeCoordinates || routeCoordinates.length < 2) {\r\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\r\n          setRoute([branchCoords, emergencyCoords]);\r\n        } else {\r\n          setRoute(routeCoordinates);\r\n        }\r\n        \r\n        const roadDistance = calculateRoadDistance(routeCoordinates);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n      }\r\n      \r\n      // Compare with straight-line distance\r\n      const straightLineDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\r\n      \r\n    } catch (err) {\r\n      console.error('Error calculating route:', err);\r\n      setError('Failed to calculate route. Showing direct path.');\r\n      // Fallback to straight line\r\n      const fallbackRoute = [branchCoords, emergencyCoords];\r\n      setRoute(fallbackRoute);\r\n      const fallbackDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      setDistance(fallbackDistance);\r\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\r\n      console.log('üîÑ Using fallback route:', fallbackRoute);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get real road route using Google Maps Directions API\r\n  const getRealRoadRoute = async (start, end) => {\r\n    try {\r\n      console.log('üåê Getting real-time route from Google Maps Directions API...');\r\n      \r\n      // Google Maps Directions API - FREE with limits\r\n      // Get your free API key from: https://console.cloud.google.com/google/maps-apis\r\n      const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_GOOGLE_MAPS_API_KEY';\r\n      \r\n      if (GOOGLE_API_KEY === 'YOUR_GOOGLE_MAPS_API_KEY') {\r\n        console.log('‚ö†Ô∏è Google Maps API key not configured. Please add your API key to use real routing.');\r\n        console.log('üìù To get a free API key: https://console.cloud.google.com/google/maps-apis');\r\n        console.log('üîß Add it to your .env file as: REACT_APP_GOOGLE_MAPS_API_KEY=your_api_key_here');\r\n        return createRealisticColomboRoute(start, end);\r\n      }\r\n      \r\n      const response = await fetch(\r\n        `https://maps.googleapis.com/maps/api/directions/json?` +\r\n        `origin=${start[0]},${start[1]}&` +\r\n        `destination=${end[0]},${end[1]}&` +\r\n        `mode=driving&` +\r\n        `avoid=tolls&` +\r\n        `traffic_model=best_guess&` +\r\n        `departure_time=now&` +\r\n        `key=${GOOGLE_API_KEY}`\r\n      );\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.status === 'OK' && data.routes && data.routes[0]) {\r\n        const route = data.routes[0];\r\n        \r\n        // Extract route coordinates from the polyline\r\n        if (route.overview_polyline && route.overview_polyline.points) {\r\n          const coordinates = decodePolyline(route.overview_polyline.points);\r\n          console.log('‚úÖ Google Maps route obtained successfully');\r\n          console.log(`üõ£Ô∏è Route distance: ${route.legs[0].distance.text}`);\r\n          console.log(`‚è±Ô∏è Route duration: ${route.legs[0].duration.text}`);\r\n          console.log(`üö¶ Traffic duration: ${route.legs[0].duration_in_traffic?.text || 'N/A'}`);\r\n          \r\n          // Store route details for turn-by-turn directions\r\n          setRouteDetails({\r\n            distance: route.legs[0].distance.value / 1000, // Convert to km\r\n            duration: route.legs[0].duration.value, // in seconds\r\n            durationInTraffic: route.legs[0].duration_in_traffic?.value,\r\n            steps: route.legs[0].steps,\r\n            summary: route.summary\r\n          });\r\n          \r\n          return coordinates;\r\n        }\r\n      } else {\r\n        console.error('‚ùå Google Maps API error:', data.status, data.error_message);\r\n        throw new Error(`Google Maps API error: ${data.status}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('üåê Google Maps API failed:', error);\r\n      console.log('üîÑ Falling back to simulated routing');\r\n      return createRealisticColomboRoute(start, end);\r\n    }\r\n  };\r\n\r\n  // Decode Google Maps polyline (helper function)\r\n  const decodePolyline = (encoded) => {\r\n    const points = [];\r\n    let index = 0;\r\n    const len = encoded.length;\r\n    let lat = 0;\r\n    let lng = 0;\r\n\r\n    while (index < len) {\r\n      let b, shift = 0, result = 0;\r\n      do {\r\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\r\n        result |= (b & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (b >= 0x20);\r\n      const dlat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n      lat += dlat;\r\n\r\n      shift = 0;\r\n      result = 0;\r\n      do {\r\n        b = encoded.charAt(index++).charCodeAt(0) - 63;\r\n        result |= (b & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (b >= 0x20);\r\n      const dlng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n      lng += dlng;\r\n\r\n      points.push([lat / 1e5, lng / 1e5]);\r\n    }\r\n\r\n    return points;\r\n  };\r\n\r\n  // Create improved road route (fallback)\r\n  const createImprovedRoadRoute = (start, end) => {\r\n    console.log('üõ£Ô∏è Creating improved road route...');\r\n    \r\n    // Use the realistic Colombo route as fallback\r\n    return createRealisticColomboRoute(start, end);\r\n  };\r\n\r\n  // Get Colombo road network (extracted for reuse)\r\n  const getColomboRoadNetwork = () => {\r\n    return {\r\n      // Galle Road - Main coastal road with detailed segments\r\n      galleRoad: {\r\n        segments: [\r\n          { start: [6.9280, 79.8600], end: [6.9250, 79.8580], name: \"Galle Face to Chatham Street\" },\r\n          { start: [6.9250, 79.8580], end: [6.9220, 79.8550], name: \"Chatham Street to Pettah\" },\r\n          { start: [6.9220, 79.8550], end: [6.9200, 79.8520], name: \"Pettah to Slave Island\" },\r\n          { start: [6.9200, 79.8520], end: [6.9180, 79.8490], name: \"Slave Island to Kollupitiya\" },\r\n          { start: [6.9180, 79.8490], end: [6.9150, 79.8460], name: \"Kollupitiya to Bambalapitiya\" },\r\n          { start: [6.9150, 79.8460], end: [6.9120, 79.8430], name: \"Bambalapitiya to Wellawatta\" },\r\n          { start: [6.9120, 79.8430], end: [6.9060, 79.8370], name: \"Wellawatta to Mount Lavinia\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9265, 79.8590], radius: 0.002 }, // Galle Face curve\r\n          { point: [6.9235, 79.8565], radius: 0.0015 }, // Pettah curve\r\n          { point: [6.9190, 79.8505], radius: 0.002 }, // Slave Island curve\r\n          { point: [6.9165, 79.8475], radius: 0.0015 } // Kollupitiya curve\r\n        ]\r\n      },\r\n      \r\n      // Union Place to Maradana Road\r\n      unionPlaceRoad: {\r\n        segments: [\r\n          { start: [6.9300, 79.8650], end: [6.9330, 79.8680], name: \"Union Place to Maradana\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9315, 79.8665], radius: 0.001 }\r\n        ]\r\n      },\r\n      \r\n      // Liberty Plaza Road\r\n      libertyPlazaRoad: {\r\n        segments: [\r\n          { start: [6.9180, 79.8490], end: [6.9160, 79.8470], name: \"Kollupitiya to Liberty Plaza\" },\r\n          { start: [6.9160, 79.8470], end: [6.9150, 79.8460], name: \"Liberty Plaza to Bambalapitiya\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9170, 79.8480], radius: 0.0008 }\r\n        ]\r\n      },\r\n      \r\n      // Odel to Crescat Road\r\n      odelCrescatRoad: {\r\n        segments: [\r\n          { start: [6.9140, 79.8450], end: [6.9130, 79.8440], name: \"Odel to Crescat\" },\r\n          { start: [6.9130, 79.8440], end: [6.9120, 79.8430], name: \"Crescat to Wellawatta\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9135, 79.8445], radius: 0.0005 }\r\n        ]\r\n      }\r\n    };\r\n  };\r\n\r\n  // Find the best road path between two points\r\n  const findBestRoadPath = (start, end, roadNetwork) => {\r\n    const paths = [];\r\n    \r\n    // Check if both points are on Galle Road\r\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\r\n      paths.push({\r\n        road: 'galleRoad',\r\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\r\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\r\n      });\r\n    }\r\n    \r\n    // Check other road combinations\r\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\r\n      if (roadName !== 'galleRoad') {\r\n        const distance = calculatePathDistance(start, end, roadData);\r\n        if (distance < 5) { // Within 5km\r\n          paths.push({\r\n            road: roadName,\r\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\r\n            distance: distance\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Return the shortest path\r\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\r\n      road: 'galleRoad',\r\n      segments: roadNetwork.galleRoad.segments,\r\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\r\n    };\r\n  };\r\n\r\n  // Check if a point is on a specific road\r\n  const isPointOnRoad = (point, road) => {\r\n    return road.segments.some(segment => {\r\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\r\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\r\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n      return (distanceToStart + distanceToEnd) <= (segmentLength + 0.1); // Within 100m of road\r\n    });\r\n  };\r\n\r\n  // Get road segments between two points\r\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\r\n    // For simplicity, return all segments of the road\r\n    // In a real implementation, this would find the specific segments between the points\r\n    return road.segments;\r\n  };\r\n\r\n  // Calculate path distance\r\n  const calculatePathDistance = (start, end, road) => {\r\n    let totalDistance = 0;\r\n    road.segments.forEach(segment => {\r\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n    });\r\n    return totalDistance;\r\n  };\r\n\r\n  // Create detailed route with curves and road segments\r\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\r\n    const route = [start];\r\n    const road = roadNetwork[roadPath.road];\r\n    \r\n    // Add road segments with curves\r\n    road.segments.forEach((segment, index) => {\r\n      // Add start of segment\r\n      route.push(segment.start);\r\n      \r\n      // Add curve points if available\r\n      if (road.curves && road.curves[index]) {\r\n        const curve = road.curves[index];\r\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\r\n        route.push(...curvePoints);\r\n      }\r\n      \r\n      // Add end of segment\r\n      route.push(segment.end);\r\n    });\r\n    \r\n    // Add final destination\r\n    route.push(end);\r\n    \r\n    // Remove duplicate consecutive points\r\n    return removeDuplicatePoints(route);\r\n  };\r\n\r\n  // Generate curve points between two road segments\r\n  const generateCurvePoints = (start, end, curve) => {\r\n    const curvePoints = [];\r\n    const numCurvePoints = 3; // Number of points to create the curve\r\n    \r\n    for (let i = 1; i <= numCurvePoints; i++) {\r\n      const t = i / (numCurvePoints + 1);\r\n      \r\n      // Create a curved path using the curve center and radius\r\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\r\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\r\n      \r\n      const curvePoint = [\r\n        start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI/2),\r\n        start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI/2)\r\n      ];\r\n      \r\n      curvePoints.push(curvePoint);\r\n    }\r\n    \r\n    return curvePoints;\r\n  };\r\n\r\n  // Remove duplicate consecutive points\r\n  const removeDuplicatePoints = (points) => {\r\n    const uniquePoints = [points[0]];\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\r\n      const currentPoint = points[i];\r\n      \r\n      const distance = calculateDistance(\r\n        prevPoint[0], prevPoint[1],\r\n        currentPoint[0], currentPoint[1]\r\n      );\r\n      \r\n      // Only add point if it's more than 10 meters away from previous point\r\n      if (distance > 0.01) {\r\n        uniquePoints.push(currentPoint);\r\n      }\r\n    }\r\n    \r\n    return uniquePoints;\r\n  };\r\n\r\n  // Create Google Maps-style realistic route with curves and road segments\r\n  const createRealisticColomboRoute = (start, end) => {\r\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\r\n    \r\n    // Get detailed Colombo road network with curves and segments\r\n    const colomboRoadNetwork = getColomboRoadNetwork();\r\n    \r\n    // Find the best road path between start and end\r\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\r\n    \r\n    // Create detailed route with curves and road segments\r\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\r\n    \r\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\r\n    return detailedRoute;\r\n  };\r\n\r\n  // Generate turn-by-turn directions like Google Maps\r\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\r\n    const directions = [];\r\n    \r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const currentPoint = route[i];\r\n      const nextPoint = route[i + 1];\r\n      \r\n      // Find which road segment this is on\r\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\r\n      \r\n      if (roadSegment) {\r\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\r\n        if (direction) {\r\n          directions.push({\r\n            step: i + 1,\r\n            instruction: direction.instruction,\r\n            distance: direction.distance,\r\n            road: roadSegment.name,\r\n            coordinates: currentPoint\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return directions;\r\n  };\r\n\r\n  // Find which road segment a route segment belongs to\r\n  const findRoadSegment = (start, end, roadNetwork) => {\r\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\r\n      for (const segment of roadData.segments) {\r\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\r\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\r\n        \r\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) { // Within 100m\r\n          return { ...segment, roadName };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Generate direction text for a route segment\r\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\r\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\r\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\r\n    \r\n    if (stepIndex === 0) {\r\n      return {\r\n        instruction: `Start from ${roadSegment.name}`,\r\n        distance: distanceText\r\n      };\r\n    }\r\n    \r\n    // Determine direction based on coordinates\r\n    const latDiff = end[0] - start[0];\r\n    const lngDiff = end[1] - start[1];\r\n    \r\n    let direction = '';\r\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\r\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\r\n    } else {\r\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\r\n    }\r\n    \r\n    return {\r\n      instruction: `${direction} on ${roadSegment.name}`,\r\n      distance: distanceText\r\n    };\r\n  };\r\n\r\n  // Find closest intersection to a point\r\n  const findClosestIntersection = (point, intersections) => {\r\n    let closest = null;\r\n    let minDistance = Infinity;\r\n    \r\n    Object.entries(intersections).forEach(([name, coords]) => {\r\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = { name, coords, distance };\r\n      }\r\n    });\r\n    \r\n    return closest;\r\n  };\r\n\r\n  // Get intermediate intersections for routing\r\n  const getIntermediateIntersections = (startName, endName, intersections) => {\r\n    const route = [];\r\n    \r\n    // Define common routing patterns in Colombo\r\n    const routingPatterns = {\r\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\r\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\r\n      'fort-to-maradana': ['unionPlace'],\r\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\r\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\r\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\r\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\r\n      'wellawatta-to-mountLavinia': ['mountLavinia']\r\n    };\r\n    \r\n    // Find matching pattern\r\n    const patternKey = `${startName}-to-${endName}`;\r\n    const reversePatternKey = `${endName}-to-${startName}`;\r\n    \r\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\r\n    \r\n    if (pattern) {\r\n      pattern.forEach(intersectionName => {\r\n        if (intersections[intersectionName]) {\r\n          route.push(intersections[intersectionName]);\r\n        }\r\n      });\r\n    } else {\r\n      // Default routing through major intersections\r\n      if (startName === 'fort') {\r\n        route.push(intersections.chathamStreet);\r\n        route.push(intersections.pettah);\r\n        route.push(intersections.slaveIsland);\r\n      }\r\n    }\r\n    \r\n    return route;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (emergencyRequest && branchLocation) {\r\n      console.log('üîÑ useEffect triggered - calculating route');\r\n      console.log('üìç Emergency request:', emergencyRequest);\r\n      console.log('üìç Branch location:', branchLocation);\r\n      calculateRoute();\r\n    } else {\r\n      console.log('‚ö†Ô∏è useEffect - missing data:', { emergencyRequest: !!emergencyRequest, branchLocation: !!branchLocation });\r\n    }\r\n  }, [emergencyRequest, branchLocation]);\r\n\r\n  // Manual route calculation trigger\r\n  const handleManualRouteCalculation = () => {\r\n    console.log('üîß Manual route calculation triggered');\r\n    calculateRoute();\r\n  };\r\n\r\n  // Test route function to ensure Polyline works\r\n  const createTestRoute = () => {\r\n    console.log('üß™ Creating test route');\r\n    const testRoute = [\r\n      branchCoords,\r\n      [branchCoords[0] + 0.01, branchCoords[1] + 0.01], // Add some offset\r\n      [branchCoords[0] + 0.02, branchCoords[1] + 0.02], // Add more offset\r\n      emergencyCoords\r\n    ];\r\n    setRoute(testRoute);\r\n    console.log('üß™ Test route set:', testRoute);\r\n  };\r\n\r\n  // Calculate center point for map\r\n  const mapCenter = [\r\n    (branchCoords[0] + emergencyCoords[0]) / 2,\r\n    (branchCoords[1] + emergencyCoords[1]) / 2\r\n  ];\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n      <div className=\"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\">\r\n        <div className=\"mt-3\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900\">\r\n              Emergency Route Map\r\n            </h3>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <h4 className=\"font-medium text-blue-900 mb-2\">Emergency Details:</h4>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <p><strong>Location:</strong> {emergencyRequest?.brigadeLocation}</p>\r\n                <p><strong>Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                <p><strong>Water Level:</strong> {emergencyRequest?.waterLevel}</p>\r\n                <p><strong>Priority:</strong> {emergencyRequest?.priority}</p>\r\n              </div>\r\n              <div>\r\n                <p><strong>Branch:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                <p><strong>Branch Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                {distance && <p><strong>Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                {estimatedTime && <p><strong>Est. Time:</strong> {estimatedTime}</p>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {loading && (\r\n            <div className=\"text-center py-4\">\r\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n              <p className=\"mt-2 text-gray-600\">Calculating route...</p>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\">\r\n              <p className=\"text-yellow-800\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Debug Route Information */}\r\n          <div className=\"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-md text-sm\">\r\n            <h4 className=\"font-medium text-gray-700 mb-2\">üõ£Ô∏è Real Road Routing Info:</h4>\r\n            <p><strong>Route Status:</strong> {route ? `‚úÖ Real road route calculated (${route.length} waypoints)` : '‚ùå No route'}</p>\r\n            <p><strong>Branch Location:</strong> Colombo Central Branch ({branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)})</p>\r\n            <p><strong>Emergency Location:</strong> {emergencyRequest?.brigadeLocation} ({emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)})</p>\r\n            {route && route.length > 0 && (\r\n              <div>\r\n                <p><strong>Route Preview:</strong> {route.slice(0, 3).map((point, i) => `${i+1}:(${point[0].toFixed(4)},${point[1].toFixed(4)})`).join(' ‚Üí ')}...</p>\r\n                <p><strong>Routing Method:</strong> Real Colombo road intersections and landmarks</p>\r\n                <p><strong>Road Distance:</strong> {distance ? `${distance.toFixed(2)} km` : 'Calculating...'}</p>\r\n                <p><strong>Estimated Time:</strong> {estimatedTime || 'Calculating...'}</p>\r\n              </div>\r\n            )}\r\n            <p className=\"text-xs text-gray-600 mt-2\">\r\n              üí° <strong>Note:</strong> Routes follow actual Colombo roads through real intersections like Fort, Pettah, Slave Island, Kollupitiya, etc.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"h-96 w-full border border-gray-300 rounded-md\">\r\n            <MapContainer\r\n              center={mapCenter}\r\n              zoom={12}\r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              \r\n              {/* Branch Marker */}\r\n              <Marker position={branchCoords}>\r\n                <Popup>\r\n                  <div className=\"p-2\">\r\n                    <h4 className=\"font-medium text-green-700\">üè¢ Your Branch</h4>\r\n                    <p className=\"text-sm\"><strong>Name:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                    <p className=\"text-sm\"><strong>Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                    <p className=\"text-sm\"><strong>Coordinates:</strong> {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}</p>\r\n                    <p className=\"text-xs text-gray-600 mt-1\">üìç Starting point for emergency delivery</p>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* Emergency Location Marker */}\r\n              <Marker position={emergencyCoords}>\r\n                <Popup>\r\n                  <div className=\"p-2\">\r\n                    <h4 className=\"font-medium text-red-700\">üö® Emergency Location</h4>\r\n                    <p className=\"text-sm\"><strong>Location:</strong> {emergencyRequest?.brigadeLocation}</p>\r\n                    <p className=\"text-sm\"><strong>Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                    <p className=\"text-sm\"><strong>Water Level:</strong> {emergencyRequest?.waterLevel}</p>\r\n                    <p className=\"text-sm\"><strong>Priority:</strong> {emergencyRequest?.priority}</p>\r\n                    <p className=\"text-sm\"><strong>Coordinates:</strong> {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}</p>\r\n                    {distance && <p className=\"text-sm\"><strong>Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                    {estimatedTime && <p className=\"text-sm\"><strong>Est. Time:</strong> {estimatedTime}</p>}\r\n                    <p className=\"text-xs text-gray-600 mt-1\">üéØ Destination for water delivery</p>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* Route Line */}\r\n              {route && route.length > 0 && (\r\n                <Polyline\r\n                  positions={route}\r\n                  color=\"red\"\r\n                  weight={4}\r\n                  opacity={0.8}\r\n                />\r\n              )}\r\n              \r\n              {/* Debug: Always show a fallback line if no route */}\r\n              {(!route || route.length === 0) && (\r\n                <Polyline\r\n                  positions={[branchCoords, emergencyCoords]}\r\n                  color=\"orange\"\r\n                  weight={3}\r\n                  opacity={0.6}\r\n                  dashArray=\"5, 5\"\r\n                />\r\n              )}\r\n              \r\n              {/* Route waypoints */}\r\n              {route && route.length > 2 && route.slice(1, -1).map((waypoint, index) => (\r\n                <Marker key={index} position={waypoint}>\r\n                  <Popup>\r\n                    <div className=\"p-2\">\r\n                      <h4 className=\"font-medium text-blue-700\">üõ£Ô∏è Road Waypoint {index + 1}</h4>\r\n                      <p className=\"text-sm\">Following actual Colombo roads</p>\r\n                      <p className=\"text-sm\"><strong>Coordinates:</strong> {waypoint[0].toFixed(6)}, {waypoint[1].toFixed(6)}</p>\r\n                      <p className=\"text-xs text-gray-600 mt-1\">üìç Real road intersection/landmark</p>\r\n                    </div>\r\n                  </Popup>\r\n                </Marker>\r\n              ))}\r\n            </MapContainer>\r\n          </div>\r\n\r\n          {/* Turn-by-Turn Directions Panel */}\r\n          {directions.length > 0 && (\r\n            <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md\">\r\n              <h4 className=\"font-medium text-blue-800 mb-3\">üß≠ Turn-by-Turn Directions</h4>\r\n              <div className=\"max-h-48 overflow-y-auto\">\r\n                {directions.map((direction, index) => (\r\n                  <div key={index} className=\"flex items-start space-x-3 py-2 border-b border-blue-100 last:border-b-0\">\r\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium\">\r\n                      {direction.step}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"text-sm text-blue-800 font-medium\">{direction.instruction}</p>\r\n                      <p className=\"text-xs text-blue-600\">{direction.distance} ‚Ä¢ {direction.road}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mt-4 flex justify-between items-center\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              <p>üìç Red line shows Google Maps-style route to emergency location</p>\r\n              <p>üõ£Ô∏è Route follows actual Colombo roads with curves and turns</p>\r\n              <p>üöó Distance calculated along roads, not straight line</p>\r\n              <p>üö® Follow traffic rules and emergency protocols</p>\r\n              <p>‚è±Ô∏è Estimated time based on 40 km/h average speed</p>\r\n              {distance && <p>üìè Road distance: {distance.toFixed(2)} km</p>}\r\n              {directions.length > 0 && <p>üß≠ {directions.length} turn-by-turn directions provided</p>}\r\n            </div>\r\n            <div className=\"flex space-x-3\">\r\n              <button\r\n                onClick={handleManualRouteCalculation}\r\n                disabled={loading}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n              >\r\n                {loading ? 'Calculating...' : 'Calculate Route'}\r\n              </button>\r\n              <button\r\n                onClick={calculateRoute}\r\n                disabled={loading}\r\n                className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n              >\r\n                {loading ? 'Recalculating...' : 'Recalculate Route'}\r\n              </button>\r\n              <button\r\n                onClick={createTestRoute}\r\n                className=\"px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700\"\r\n              >\r\n                Test Route\r\n              </button>\r\n              <button\r\n                onClick={onClose}\r\n                className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmergencyRouteMap;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}