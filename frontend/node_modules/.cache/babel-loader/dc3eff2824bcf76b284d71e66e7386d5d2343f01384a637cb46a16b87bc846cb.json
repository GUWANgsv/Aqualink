{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\InteractiveMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Custom icons for different markers\nconst createCustomIcon = (color, iconType) => {\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 30px;\n        height: 30px;\n        border-radius: 50% 50% 50% 0;\n        border: 3px solid white;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 14px;\n        color: white;\n        transform: rotate(-45deg);\n      \">\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\n      </div>\n    `,\n    iconSize: [30, 30],\n    iconAnchor: [15, 30]\n  });\n};\nconst branchIcon = createCustomIcon('#3B82F6', '🏢');\nconst emergencyIcon = createCustomIcon('#EF4444', '🚨');\nconst exactEmergencyIcon = createCustomIcon('#DC2626', '🎯'); // Darker red for exact locations\nconst driverIcon = createCustomIcon('#10B981', '🚚');\n\n// Component to handle map updates\nconst MapUpdater = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center && zoom) {\n      map.setView(center, zoom);\n    }\n  }, [center, zoom, map]);\n  return null;\n};\n\n// Comprehensive database of Sri Lankan locations with accurate coordinates\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nconst sriLankanLocations = {\n  // Colombo areas - Updated with more accurate coordinates\n  'maradana': [6.9271, 79.8665],\n  // More accurate Maradana coordinates\n  'colombo 01': [6.9344, 79.8428],\n  // Fort - more accurate\n  'colombo 02': [6.9200, 79.8500],\n  // Slave Island\n  'colombo 03': [6.9100, 79.8500],\n  // Kollupitiya\n  'colombo 04': [6.9000, 79.8600],\n  // Bambalapitiya\n  'colombo 05': [6.8900, 79.8600],\n  // Wellawatta\n  'colombo 06': [6.8800, 79.8700],\n  // Mount Lavinia\n  'colombo 07': [6.8700, 79.8700],\n  // Dehiwala\n  'colombo 08': [6.9047, 79.8844],\n  // Borella\n  'colombo 09': [6.8900, 79.8800],\n  // Dematagoda\n  'colombo 10': [6.9271, 79.8665],\n  // Maradana - same as main Maradana\n  'colombo 11': [6.9400, 79.8500],\n  // Pettah\n  'colombo 12': [6.9500, 79.8400],\n  // Kotahena\n  'colombo 13': [6.9600, 79.8300],\n  // Modara\n  'colombo 14': [6.9700, 79.8200],\n  // Grandpass\n  'colombo 15': [6.9608, 79.9227],\n  // Peliyagoda - corrected coordinates\n\n  // Specific areas\n  'fort': [6.9300, 79.8400],\n  'pettah': [6.9400, 79.8500],\n  'slave island': [6.9200, 79.8500],\n  'kollupitiya': [6.9100, 79.8500],\n  'bambalapitiya': [6.8900, 79.8600],\n  'wellawatta': [6.8900, 79.8600],\n  'mount lavinia': [6.8800, 79.8700],\n  'dehiwala': [6.8700, 79.8700],\n  'borella': [6.9047, 79.8844],\n  'dematagoda': [6.8900, 79.8800],\n  'kotahena': [6.9500, 79.8400],\n  'modara': [6.9600, 79.8300],\n  'grandpass': [6.9700, 79.8200],\n  'mattakkuliya': [6.9800, 79.8100],\n  'peliyagoda': [6.9608, 79.9227],\n  // Major roads\n  'galle road': [6.9100, 79.8500],\n  'baseline road': [6.9047, 79.8844],\n  'high level road': [6.8481, 79.9285],\n  'reid avenue': [6.9200, 79.8500],\n  'bauddhaloka mawatha': [6.9100, 79.8500],\n  'negombo road': [6.9608, 79.9227],\n  // Peliyagoda area\n\n  // Southern areas\n  'maharagama': [6.8481, 79.9285],\n  'nugegoda': [6.8631, 79.8996],\n  'kottawa': [6.8400, 79.9500],\n  'homagama': [6.8400, 80.0000],\n  'piliyandala': [6.8500, 79.9000],\n  'kaduwela': [6.9300, 79.9800],\n  'avissawella': [6.9500, 80.2000],\n  'rathmalana': [6.8200, 79.8800],\n  'moratuwa': [6.8000, 79.9000],\n  'panadura': [6.7200, 79.9000],\n  'kalutara': [6.5800, 79.9600],\n  // Other major cities\n  'kandy': [7.2906, 80.6337],\n  'galle': [6.0329, 80.2169],\n  'jaffna': [9.6615, 80.0255],\n  'anuradhapura': [8.3114, 80.4037],\n  'trincomalee': [8.5874, 81.2152],\n  'batticaloa': [7.7102, 81.6924],\n  'kurunegala': [7.4863, 80.3633],\n  'negombo': [7.2086, 79.8358],\n  'ratnapura': [6.6828, 80.4012],\n  'badulla': [6.9934, 81.0550]\n};\n\n// Function to get exact coordinates for specific known addresses\nconst getExactCoordinatesForAddress = address => {\n  if (!address) return null;\n  const addressLower = address.toLowerCase();\n  console.log('🔍 Checking address for exact coordinates:', address);\n  console.log('🔍 Address in lowercase:', addressLower);\n\n  // Check for exact matches in our database\n  for (const [location, coords] of Object.entries(sriLankanLocations)) {\n    if (addressLower.includes(location)) {\n      console.log(`🎯 Found exact location: ${location}`);\n      console.log(`📍 Returning coordinates: [${coords[0]}, ${coords[1]}]`);\n      return coords;\n    }\n  }\n\n  // Check for specific combinations\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\n    console.log('🎯 Found exact address: Maradana, Baseline Road, Colombo 10');\n    return [6.9271, 79.8665]; // Updated with more accurate coordinates\n  }\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\n    console.log('🎯 Found exact address: Maharagama High Level Road');\n    return [6.8481, 79.9285];\n  }\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\n    console.log('🎯 Found exact address: Borella Baseline Road');\n    return [6.9047, 79.8844];\n  }\n  console.log('❌ No exact match found for address:', address);\n  return null; // No exact match found\n};\n\n// Function to geocode any address to get exact coordinates\nconst geocodeAddress = async address => {\n  if (!address) return null;\n  try {\n    console.log('🌍 Geocoding address:', address);\n\n    // Extract key components from the address\n    const addressParts = address.split(',').map(part => part.trim());\n    const mainLocation = addressParts[0];\n    const area = addressParts[1] || '';\n    const city = addressParts[2] || 'Colombo';\n\n    // Try multiple search strategies with different combinations\n    const searchQueries = [\n    // Full address variations\n    `${address}, Sri Lanka`, `${address}, Colombo, Sri Lanka`, address,\n    // Main location with city\n    `${mainLocation}, ${city}, Sri Lanka`, `${mainLocation}, Colombo, Sri Lanka`, `${mainLocation}, Sri Lanka`,\n    // Main location only\n    mainLocation,\n    // Area-based searches\n    `${mainLocation} ${area}, Sri Lanka`, `${mainLocation} ${area}, Colombo, Sri Lanka`,\n    // Common Sri Lankan location patterns\n    `${mainLocation}, Western Province, Sri Lanka`, `${mainLocation}, Colombo District, Sri Lanka`,\n    // Postal code patterns (if any)\n    address.replace(/colombo\\s*(\\d+)/i, 'Colombo $1, Sri Lanka'),\n    // Road-specific searches\n    address.replace(/road|street|mawatha|place/i, match => `${match}, Sri Lanka`),\n    // Specific address patterns for better matching\n    address.replace(/(\\w+)\\s*road/i, '$1 Road, Sri Lanka'), address.replace(/(\\w+)\\s*street/i, '$1 Street, Sri Lanka'), address.replace(/(\\w+)\\s*mawatha/i, '$1 Mawatha, Sri Lanka'),\n    // Remove common words and try again\n    address.replace(/\\b(near|close to|beside|opposite)\\s+/gi, ''), address.replace(/\\b(road|street|mawatha|place|avenue|lane)\\b/gi, ''),\n    // Try with different formatting\n    address.replace(/,/g, ' ').replace(/\\s+/g, ' ').trim() + ', Sri Lanka'];\n\n    // Remove duplicates and empty strings\n    const uniqueQueries = [...new Set(searchQueries.filter(q => q && q.trim()))];\n    console.log(`🔍 Trying ${uniqueQueries.length} geocoding strategies...`);\n    for (const searchQuery of uniqueQueries) {\n      try {\n        console.log(`🔍 Trying geocoding: \"${searchQuery}\"`);\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=10&countrycodes=lk&addressdetails=1&extratags=1`);\n        if (!response.ok) {\n          console.log(`⚠️ HTTP error: ${response.status}`);\n          continue;\n        }\n        const data = await response.json();\n        if (data && data.length > 0) {\n          console.log(`📊 Found ${data.length} results for: \"${searchQuery}\"`);\n\n          // Score and rank results\n          const scoredResults = data.map(result => {\n            const score = calculateLocationScore(result, address, mainLocation);\n            return {\n              ...result,\n              score\n            };\n          }).sort((a, b) => b.score - a.score);\n\n          // Find the best result within Sri Lanka bounds\n          for (const result of scoredResults) {\n            const lat = parseFloat(result.lat);\n            const lon = parseFloat(result.lon);\n\n            // More precise Sri Lanka bounds\n            if (lat > 5.5 && lat < 10.0 && lon > 79.0 && lon < 82.0) {\n              const coords = [lat, lon];\n              console.log('🎯 Found best Sri Lankan location:', result.display_name);\n              console.log('📍 Coordinates:', coords);\n              console.log('⭐ Score:', result.score);\n              console.log('🏷️ Type:', result.type);\n              console.log('🏷️ Class:', result.class);\n\n              // Additional validation for better accuracy\n              if (result.type === 'administrative' || result.type === 'residential' || result.type === 'highway') {\n                console.log('✅ High confidence result selected');\n                return coords;\n              } else if (result.score > 50) {\n                console.log('✅ Good score result selected');\n                return coords;\n              }\n            }\n          }\n\n          // If no high-confidence result, return the first valid one\n          for (const result of scoredResults) {\n            const lat = parseFloat(result.lat);\n            const lon = parseFloat(result.lon);\n            if (lat > 5.5 && lat < 10.0 && lon > 79.0 && lon < 82.0) {\n              const coords = [lat, lon];\n              console.log('🎯 Using fallback Sri Lankan location:', result.display_name);\n              console.log('📍 Coordinates:', coords);\n              return coords;\n            }\n          }\n        }\n      } catch (strategyError) {\n        console.log(`⚠️ Geocoding strategy failed: ${strategyError.message}`);\n        continue;\n      }\n    }\n    console.log('⚠️ All geocoding attempts failed');\n    return null;\n  } catch (error) {\n    console.error('❌ Geocoding failed:', error);\n    return null;\n  }\n};\n\n// Function to score location results based on relevance\nconst calculateLocationScore = (result, originalAddress, mainLocation) => {\n  let score = 0;\n  const displayName = (result.display_name || '').toLowerCase();\n  const address = (result.address || {}).address29 || '';\n  const originalLower = originalAddress.toLowerCase();\n  const mainLower = mainLocation.toLowerCase();\n\n  // Extract key components from original address\n  const addressWords = originalLower.split(/[\\s,]+/).filter(word => word.length > 2);\n\n  // Exact match bonus\n  if (displayName.includes(mainLower)) score += 100;\n  if (address.includes(mainLower)) score += 80;\n\n  // Word-by-word matching for better accuracy\n  addressWords.forEach(word => {\n    if (displayName.includes(word)) score += 20;\n    if (address.includes(word)) score += 15;\n  });\n\n  // Partial match bonus\n  if (displayName.includes(originalLower)) score += 60;\n\n  // Sri Lanka context bonus\n  if (displayName.includes('sri lanka') || displayName.includes('colombo')) score += 40;\n\n  // Road/street match bonus\n  if (originalLower.includes('road') && displayName.includes('road')) score += 30;\n  if (originalLower.includes('street') && displayName.includes('street')) score += 30;\n  if (originalLower.includes('mawatha') && displayName.includes('mawatha')) score += 30;\n  if (originalLower.includes('avenue') && displayName.includes('avenue')) score += 30;\n  if (originalLower.includes('place') && displayName.includes('place')) score += 30;\n\n  // Postal code matching\n  const postalMatch = originalLower.match(/colombo\\s*(\\d+)/);\n  if (postalMatch && displayName.includes(`colombo ${postalMatch[1]}`)) score += 50;\n\n  // Importance bonus (from OSM importance field)\n  if (result.importance) score += result.importance * 20;\n\n  // Type bonus - prioritize more specific types\n  if (result.type === 'administrative') score += 10;\n  if (result.type === 'residential') score += 5;\n  if (result.type === 'highway') score += 8;\n  if (result.type === 'amenity') score += 12;\n\n  // Class bonus\n  if (result.class === 'highway') score += 5;\n  if (result.class === 'place') score += 8;\n  return score;\n};\n\n// Component to generate emergency location (exact or random)\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\n  // First, try to get exact coordinates for the address\n  if (address) {\n    const exactCoords = getExactCoordinatesForAddress(address);\n    if (exactCoords) {\n      console.log('📍 Using exact coordinates for address:', address);\n      return exactCoords;\n    }\n  }\n\n  // If no exact match, generate random location within distance from branch\n  console.log('🎲 Generating random location within', maxDistanceKm, 'km from branch coordinates');\n  const R = 6371; // Earth's radius in km\n\n  // Convert to radians\n  const lat1 = branchCoords[0] * Math.PI / 180;\n  const lng1 = branchCoords[1] * Math.PI / 180;\n\n  // Generate random distance (0 to maxDistanceKm)\n  const distance = Math.random() * maxDistanceKm;\n\n  // Generate random bearing (0 to 2π)\n  const bearing = Math.random() * 2 * Math.PI;\n\n  // Calculate new coordinates\n  const lat2 = Math.asin(Math.sin(lat1) * Math.cos(distance / R) + Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing));\n  const lng2 = lng1 + Math.atan2(Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1), Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2));\n  const generatedCoords = [lat2 * 180 / Math.PI, lng2 * 180 / Math.PI];\n  console.log('🎲 Generated emergency location:', generatedCoords);\n  console.log('📍 Base coordinates used:', branchCoords);\n  console.log('📏 Distance from branch:', calculateDistance(branchCoords[0], branchCoords[1], generatedCoords[0], generatedCoords[1]).toFixed(2), 'km');\n  return generatedCoords;\n};\n\n// Calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst InteractiveMap = ({\n  branchLocation,\n  emergencyRequest,\n  showRoute = false,\n  onRouteCalculated,\n  onEmergencyLocationGenerated\n}) => {\n  _s2();\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\n  const [route, setRoute] = useState([]);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\n  const [mapZoom, setMapZoom] = useState(12);\n  const [isGeocoding, setIsGeocoding] = useState(false);\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\n  const mapRef = useRef(null);\n\n  // Colombo 7 branch coordinates (more accurate)\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\n\n  // Default branch location if not provided\n  const defaultBranchLocation = {\n    name: 'Colombo 7 Branch',\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\n    coordinates: colombo7BranchCoords\n  };\n  const branch = branchLocation || defaultBranchLocation;\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\n\n  // Generate emergency location when emergency request is provided\n  useEffect(() => {\n    const processEmergencyLocation = async () => {\n      console.log('🚀 Processing emergency location...');\n      console.log('📋 Emergency request:', emergencyRequest);\n      console.log('📍 Current emergency coords:', emergencyCoords);\n      if (emergencyRequest && !emergencyCoords) {\n        let coords;\n        let locationType = 'generated';\n        console.log('🔍 Emergency request found, processing location...');\n        if (emergencyRequest.brigadeLocation) {\n          // First, try to get exact coordinates for the address (prioritize over provided coordinates)\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\n          console.log('🎯 Exact coords result:', exactCoords);\n          if (exactCoords) {\n            coords = exactCoords;\n            locationType = 'exact';\n            console.log('✅ Using exact coordinates for address (overriding provided):', emergencyRequest.brigadeLocation, '->', coords);\n          } else if (emergencyRequest.coordinates) {\n            // Use provided coordinates only if no exact match found\n            coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n            locationType = 'provided';\n            console.log('📍 Using provided coordinates:', coords);\n          } else {\n            // Try to geocode the address to get real coordinates\n            console.log('🌍 Attempting to geocode address:', emergencyRequest.brigadeLocation);\n            setIsGeocoding(true);\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\n            setIsGeocoding(false);\n            if (geocodedCoords) {\n              coords = geocodedCoords;\n              locationType = 'geocoded';\n              console.log('✅ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\n            } else {\n              // Fallback: Generate random location within 30km\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\n              locationType = 'generated';\n              console.log('🎲 Generated random emergency location within 30km:', coords);\n            }\n          }\n        } else if (emergencyRequest.coordinates) {\n          // Use provided coordinates only if no address provided\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n          locationType = 'provided';\n          console.log('📍 Using provided coordinates (no address):', coords);\n        } else {\n          // No address provided, generate random location\n          coords = generateEmergencyLocation(branchCoords, 30);\n          locationType = 'generated';\n          console.log('🎲 Generated random emergency location within 30km (no address):', coords);\n        }\n\n        // Set the generated location state\n        const locationData = {\n          lat: coords[0],\n          lng: coords[1],\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\n          type: locationType\n        };\n        setGeneratedEmergencyLocation(locationData);\n\n        // Notify parent component about generated location\n        if (onEmergencyLocationGenerated) {\n          onEmergencyLocationGenerated(locationData);\n        }\n        setEmergencyCoords(coords);\n\n        // Debug: Log the coordinates being used\n        console.log('🗺️ Emergency location coordinates set:', coords);\n        console.log('📍 Address:', emergencyRequest.brigadeLocation);\n        console.log('🎯 Location type:', locationType);\n        console.log('🔍 Final coordinates for map marker:', coords);\n        console.log('📊 Location data object:', locationData);\n\n        // Calculate distance\n        const calculatedDistance = calculateDistance(branchCoords[0], branchCoords[1], coords[0], coords[1]);\n        setDistance(calculatedDistance);\n\n        // Calculate estimated time (assuming 40 km/h average speed)\n        const timeInHours = calculatedDistance / 40;\n        const hours = Math.floor(timeInHours);\n        const minutes = Math.round((timeInHours - hours) * 60);\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n        setEstimatedTime(timeString);\n\n        // Update map center to show both locations\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\n        setMapCenter([centerLat, centerLng]);\n        setMapZoom(11);\n      }\n    };\n    processEmergencyLocation();\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\n\n  // Calculate route when showRoute is true\n  useEffect(() => {\n    if (showRoute && emergencyCoords && branchCoords) {\n      calculateRoute();\n    }\n  }, [showRoute, emergencyCoords, branchCoords]);\n  const calculateRoute = async () => {\n    if (!emergencyCoords || !branchCoords) return;\n    setLoading(true);\n    try {\n      // Create a simple route with waypoints\n      const routePoints = [branchCoords, [(branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01, (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01], emergencyCoords];\n      setRoute(routePoints);\n\n      // Calculate road distance (approximate)\n      let roadDistance = 0;\n      for (let i = 0; i < routePoints.length - 1; i++) {\n        roadDistance += calculateDistance(routePoints[i][0], routePoints[i][1], routePoints[i + 1][0], routePoints[i + 1][1]);\n      }\n\n      // Add some road factor (roads are not straight lines)\n      roadDistance *= 1.3; // 30% longer than straight line\n      setDistance(roadDistance);\n\n      // Calculate estimated time\n      const timeInHours = roadDistance / 40; // 40 km/h average\n      const hours = Math.floor(timeInHours);\n      const minutes = Math.round((timeInHours - hours) * 60);\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n      setEstimatedTime(timeString);\n\n      // Notify parent component\n      if (onRouteCalculated) {\n        onRouteCalculated({\n          distance: roadDistance,\n          estimatedTime: timeString,\n          route: routePoints\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating route:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-96 border border-gray-300 rounded-lg overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef,\n      center: mapCenter,\n      zoom: mapZoom,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(MapUpdater, {\n        center: mapCenter,\n        zoom: mapZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: branchCoords,\n        icon: branchIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-blue-600\",\n              children: [\"\\uD83C\\uDFE2 \", branch.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: branch.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), emergencyCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: emergencyCoords,\n        icon: (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'exact' || (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'geocoded' ? exactEmergencyIcon : emergencyIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-red-600\",\n              children: \"\\uD83D\\uDEA8 Emergency Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName) || 'Emergency Request'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) || 'Generated Location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this), generatedEmergencyLocation && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: generatedEmergencyLocation.type === 'exact' ? '✅ Exact location' : generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded location' : generatedEmergencyLocation.type === 'provided' ? '📍 Provided coordinates' : '🎲 Generated location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 19\n            }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: [\"\\uD83D\\uDCCF Distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 19\n            }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-green-600\",\n              children: [\"\\u23F1\\uFE0F Est. Time: \", estimatedTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }, this), showRoute && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"#3B82F6\",\n        weight: 4,\n        opacity: 0.8,\n        dashArray: \"10, 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 11\n      }, this), (loading || isGeocoding) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: isGeocoding ? 'Finding exact location...' : 'Calculating route...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold text-gray-800 mb-2\",\n        children: \"\\uD83D\\uDCCD Route Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm space-y-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"From:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 14\n          }, this), \" \", branch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-500\",\n          children: [\"\\uD83D\\uDCCD Branch: \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"To:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 14\n          }, this), \" \", (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName) || 'Emergency Location']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 11\n        }, this), (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 50\n          }, this), \" \", emergencyRequest.brigadeLocation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 13\n        }, this), emergencyCoords && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Emergency Coords:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 50\n          }, this), \" \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 13\n        }, this), generatedEmergencyLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: `text-xs font-medium ${generatedEmergencyLocation.type === 'exact' ? 'text-green-600' : generatedEmergencyLocation.type === 'geocoded' ? 'text-blue-600' : generatedEmergencyLocation.type === 'provided' ? 'text-blue-600' : 'text-orange-600'}`,\n            children: generatedEmergencyLocation.type === 'exact' ? '✅ Exact location from database' : generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded from address' : generatedEmergencyLocation.type === 'provided' ? '📍 Using provided coordinates' : '🎲 Generated location within 30km'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 15\n          }, this), generatedEmergencyLocation.type === 'exact' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-green-500\",\n            children: \"\\uD83C\\uDFAF High accuracy - known location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 17\n          }, this), generatedEmergencyLocation.type === 'geocoded' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-blue-500\",\n            children: \"\\uD83C\\uDF0D Online geocoding used\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 17\n          }, this), generatedEmergencyLocation.type === 'generated' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-orange-500\",\n            children: \"\\uD83D\\uDCCD Generated from branch location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 13\n        }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Distance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 16\n          }, this), \" \", distance.toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Est. Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 16\n          }, this), \" \", estimatedTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this), (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `text-xs px-2 py-1 rounded ${emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' : emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' : 'bg-yellow-100 text-yellow-800'}`,\n          children: [\"Priority: \", emergencyRequest.priority]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 618,\n    columnNumber: 5\n  }, this);\n};\n_s2(InteractiveMap, \"fvCVIVj+0UpGTKBzeourP/wmeCs=\");\n_c2 = InteractiveMap;\nexport default InteractiveMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"InteractiveMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","iconType","divIcon","className","html","iconSize","iconAnchor","branchIcon","emergencyIcon","exactEmergencyIcon","driverIcon","MapUpdater","center","zoom","_s","map","setView","_c","sriLankanLocations","getExactCoordinatesForAddress","address","addressLower","toLowerCase","console","log","location","coords","Object","entries","includes","geocodeAddress","addressParts","split","part","trim","mainLocation","area","city","searchQueries","replace","match","uniqueQueries","Set","filter","q","length","searchQuery","response","fetch","encodeURIComponent","ok","status","data","json","scoredResults","result","score","calculateLocationScore","sort","a","b","lat","parseFloat","lon","display_name","type","class","strategyError","message","error","originalAddress","displayName","address29","originalLower","mainLower","addressWords","word","forEach","postalMatch","importance","generateEmergencyLocation","branchCoords","maxDistanceKm","exactCoords","R","lat1","Math","PI","lng1","distance","random","bearing","lat2","asin","sin","cos","lng2","atan2","generatedCoords","calculateDistance","toFixed","dLat","dLng","c","sqrt","InteractiveMap","branchLocation","emergencyRequest","showRoute","onRouteCalculated","onEmergencyLocationGenerated","_s2","emergencyCoords","setEmergencyCoords","route","setRoute","setDistance","estimatedTime","setEstimatedTime","loading","setLoading","mapCenter","setMapCenter","mapZoom","setMapZoom","isGeocoding","setIsGeocoding","generatedEmergencyLocation","setGeneratedEmergencyLocation","mapRef","colombo7BranchCoords","defaultBranchLocation","name","coordinates","branch","processEmergencyLocation","locationType","brigadeLocation","lng","geocodedCoords","locationData","calculatedDistance","timeInHours","hours","floor","minutes","round","timeString","centerLat","centerLng","calculateRoute","routePoints","roadDistance","i","children","ref","style","height","width","scrollWheelZoom","fileName","_jsxFileName","lineNumber","columnNumber","attribution","url","position","icon","brigadeName","positions","weight","opacity","dashArray","priority","_c2","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/InteractiveMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Custom icons for different markers\r\nconst createCustomIcon = (color, iconType) => {\r\n  return L.divIcon({\r\n    className: 'custom-div-icon',\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50% 50% 50% 0;\r\n        border: 3px solid white;\r\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 14px;\r\n        color: white;\r\n        transform: rotate(-45deg);\r\n      \">\r\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\r\n      </div>\r\n    `,\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30],\r\n  });\r\n};\r\n\r\nconst branchIcon = createCustomIcon('#3B82F6', '🏢');\r\nconst emergencyIcon = createCustomIcon('#EF4444', '🚨');\r\nconst exactEmergencyIcon = createCustomIcon('#DC2626', '🎯'); // Darker red for exact locations\r\nconst driverIcon = createCustomIcon('#10B981', '🚚');\r\n\r\n// Component to handle map updates\r\nconst MapUpdater = ({ center, zoom }) => {\r\n  const map = useMap();\r\n  \r\n  useEffect(() => {\r\n    if (center && zoom) {\r\n      map.setView(center, zoom);\r\n    }\r\n  }, [center, zoom, map]);\r\n  \r\n  return null;\r\n};\r\n\r\n// Comprehensive database of Sri Lankan locations with accurate coordinates\r\nconst sriLankanLocations = {\r\n  // Colombo areas - Updated with more accurate coordinates\r\n  'maradana': [6.9271, 79.8665], // More accurate Maradana coordinates\r\n  'colombo 01': [6.9344, 79.8428], // Fort - more accurate\r\n  'colombo 02': [6.9200, 79.8500], // Slave Island\r\n  'colombo 03': [6.9100, 79.8500], // Kollupitiya\r\n  'colombo 04': [6.9000, 79.8600], // Bambalapitiya\r\n  'colombo 05': [6.8900, 79.8600], // Wellawatta\r\n  'colombo 06': [6.8800, 79.8700], // Mount Lavinia\r\n  'colombo 07': [6.8700, 79.8700], // Dehiwala\r\n  'colombo 08': [6.9047, 79.8844], // Borella\r\n  'colombo 09': [6.8900, 79.8800], // Dematagoda\r\n  'colombo 10': [6.9271, 79.8665], // Maradana - same as main Maradana\r\n  'colombo 11': [6.9400, 79.8500], // Pettah\r\n  'colombo 12': [6.9500, 79.8400], // Kotahena\r\n  'colombo 13': [6.9600, 79.8300], // Modara\r\n  'colombo 14': [6.9700, 79.8200], // Grandpass\r\n  'colombo 15': [6.9608, 79.9227], // Peliyagoda - corrected coordinates\r\n  \r\n  // Specific areas\r\n  'fort': [6.9300, 79.8400],\r\n  'pettah': [6.9400, 79.8500],\r\n  'slave island': [6.9200, 79.8500],\r\n  'kollupitiya': [6.9100, 79.8500],\r\n  'bambalapitiya': [6.8900, 79.8600],\r\n  'wellawatta': [6.8900, 79.8600],\r\n  'mount lavinia': [6.8800, 79.8700],\r\n  'dehiwala': [6.8700, 79.8700],\r\n  'borella': [6.9047, 79.8844],\r\n  'dematagoda': [6.8900, 79.8800],\r\n  'kotahena': [6.9500, 79.8400],\r\n  'modara': [6.9600, 79.8300],\r\n  'grandpass': [6.9700, 79.8200],\r\n  'mattakkuliya': [6.9800, 79.8100],\r\n  'peliyagoda': [6.9608, 79.9227],\r\n  \r\n  // Major roads\r\n  'galle road': [6.9100, 79.8500],\r\n  'baseline road': [6.9047, 79.8844],\r\n  'high level road': [6.8481, 79.9285],\r\n  'reid avenue': [6.9200, 79.8500],\r\n  'bauddhaloka mawatha': [6.9100, 79.8500],\r\n  'negombo road': [6.9608, 79.9227], // Peliyagoda area\r\n  \r\n  // Southern areas\r\n  'maharagama': [6.8481, 79.9285],\r\n  'nugegoda': [6.8631, 79.8996],\r\n  'kottawa': [6.8400, 79.9500],\r\n  'homagama': [6.8400, 80.0000],\r\n  'piliyandala': [6.8500, 79.9000],\r\n  'kaduwela': [6.9300, 79.9800],\r\n  'avissawella': [6.9500, 80.2000],\r\n  'rathmalana': [6.8200, 79.8800],\r\n  'moratuwa': [6.8000, 79.9000],\r\n  'panadura': [6.7200, 79.9000],\r\n  'kalutara': [6.5800, 79.9600],\r\n  \r\n  // Other major cities\r\n  'kandy': [7.2906, 80.6337],\r\n  'galle': [6.0329, 80.2169],\r\n  'jaffna': [9.6615, 80.0255],\r\n  'anuradhapura': [8.3114, 80.4037],\r\n  'trincomalee': [8.5874, 81.2152],\r\n  'batticaloa': [7.7102, 81.6924],\r\n  'kurunegala': [7.4863, 80.3633],\r\n  'negombo': [7.2086, 79.8358],\r\n  'ratnapura': [6.6828, 80.4012],\r\n  'badulla': [6.9934, 81.0550]\r\n};\r\n\r\n// Function to get exact coordinates for specific known addresses\r\nconst getExactCoordinatesForAddress = (address) => {\r\n  if (!address) return null;\r\n  \r\n  const addressLower = address.toLowerCase();\r\n  console.log('🔍 Checking address for exact coordinates:', address);\r\n  console.log('🔍 Address in lowercase:', addressLower);\r\n  \r\n  // Check for exact matches in our database\r\n  for (const [location, coords] of Object.entries(sriLankanLocations)) {\r\n    if (addressLower.includes(location)) {\r\n      console.log(`🎯 Found exact location: ${location}`);\r\n      console.log(`📍 Returning coordinates: [${coords[0]}, ${coords[1]}]`);\r\n      return coords;\r\n    }\r\n  }\r\n  \r\n  // Check for specific combinations\r\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\r\n    console.log('🎯 Found exact address: Maradana, Baseline Road, Colombo 10');\r\n    return [6.9271, 79.8665]; // Updated with more accurate coordinates\r\n  }\r\n  \r\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\r\n    console.log('🎯 Found exact address: Maharagama High Level Road');\r\n    return [6.8481, 79.9285];\r\n  }\r\n  \r\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\r\n    console.log('🎯 Found exact address: Borella Baseline Road');\r\n    return [6.9047, 79.8844];\r\n  }\r\n  \r\n  console.log('❌ No exact match found for address:', address);\r\n  return null; // No exact match found\r\n};\r\n\r\n// Function to geocode any address to get exact coordinates\r\nconst geocodeAddress = async (address) => {\r\n  if (!address) return null;\r\n  \r\n  try {\r\n    console.log('🌍 Geocoding address:', address);\r\n    \r\n    // Extract key components from the address\r\n    const addressParts = address.split(',').map(part => part.trim());\r\n    const mainLocation = addressParts[0];\r\n    const area = addressParts[1] || '';\r\n    const city = addressParts[2] || 'Colombo';\r\n    \r\n    // Try multiple search strategies with different combinations\r\n    const searchQueries = [\r\n      // Full address variations\r\n      `${address}, Sri Lanka`,\r\n      `${address}, Colombo, Sri Lanka`,\r\n      address,\r\n      \r\n      // Main location with city\r\n      `${mainLocation}, ${city}, Sri Lanka`,\r\n      `${mainLocation}, Colombo, Sri Lanka`,\r\n      `${mainLocation}, Sri Lanka`,\r\n      \r\n      // Main location only\r\n      mainLocation,\r\n      \r\n      // Area-based searches\r\n      `${mainLocation} ${area}, Sri Lanka`,\r\n      `${mainLocation} ${area}, Colombo, Sri Lanka`,\r\n      \r\n      // Common Sri Lankan location patterns\r\n      `${mainLocation}, Western Province, Sri Lanka`,\r\n      `${mainLocation}, Colombo District, Sri Lanka`,\r\n      \r\n      // Postal code patterns (if any)\r\n      address.replace(/colombo\\s*(\\d+)/i, 'Colombo $1, Sri Lanka'),\r\n      \r\n      // Road-specific searches\r\n      address.replace(/road|street|mawatha|place/i, (match) => `${match}, Sri Lanka`),\r\n      \r\n      // Specific address patterns for better matching\r\n      address.replace(/(\\w+)\\s*road/i, '$1 Road, Sri Lanka'),\r\n      address.replace(/(\\w+)\\s*street/i, '$1 Street, Sri Lanka'),\r\n      address.replace(/(\\w+)\\s*mawatha/i, '$1 Mawatha, Sri Lanka'),\r\n      \r\n      // Remove common words and try again\r\n      address.replace(/\\b(near|close to|beside|opposite)\\s+/gi, ''),\r\n      address.replace(/\\b(road|street|mawatha|place|avenue|lane)\\b/gi, ''),\r\n      \r\n      // Try with different formatting\r\n      address.replace(/,/g, ' ').replace(/\\s+/g, ' ').trim() + ', Sri Lanka'\r\n    ];\r\n    \r\n    // Remove duplicates and empty strings\r\n    const uniqueQueries = [...new Set(searchQueries.filter(q => q && q.trim()))];\r\n    \r\n    console.log(`🔍 Trying ${uniqueQueries.length} geocoding strategies...`);\r\n    \r\n    for (const searchQuery of uniqueQueries) {\r\n      try {\r\n        console.log(`🔍 Trying geocoding: \"${searchQuery}\"`);\r\n        \r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=10&countrycodes=lk&addressdetails=1&extratags=1`\r\n        );\r\n        \r\n        if (!response.ok) {\r\n          console.log(`⚠️ HTTP error: ${response.status}`);\r\n          continue;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        if (data && data.length > 0) {\r\n          console.log(`📊 Found ${data.length} results for: \"${searchQuery}\"`);\r\n          \r\n          // Score and rank results\r\n          const scoredResults = data.map(result => {\r\n            const score = calculateLocationScore(result, address, mainLocation);\r\n            return { ...result, score };\r\n          }).sort((a, b) => b.score - a.score);\r\n          \r\n          // Find the best result within Sri Lanka bounds\r\n          for (const result of scoredResults) {\r\n            const lat = parseFloat(result.lat);\r\n            const lon = parseFloat(result.lon);\r\n            \r\n            // More precise Sri Lanka bounds\r\n            if (lat > 5.5 && lat < 10.0 && lon > 79.0 && lon < 82.0) {\r\n              const coords = [lat, lon];\r\n              console.log('🎯 Found best Sri Lankan location:', result.display_name);\r\n              console.log('📍 Coordinates:', coords);\r\n              console.log('⭐ Score:', result.score);\r\n              console.log('🏷️ Type:', result.type);\r\n              console.log('🏷️ Class:', result.class);\r\n              \r\n              // Additional validation for better accuracy\r\n              if (result.type === 'administrative' || result.type === 'residential' || result.type === 'highway') {\r\n                console.log('✅ High confidence result selected');\r\n                return coords;\r\n              } else if (result.score > 50) {\r\n                console.log('✅ Good score result selected');\r\n                return coords;\r\n              }\r\n            }\r\n          }\r\n          \r\n          // If no high-confidence result, return the first valid one\r\n          for (const result of scoredResults) {\r\n            const lat = parseFloat(result.lat);\r\n            const lon = parseFloat(result.lon);\r\n            \r\n            if (lat > 5.5 && lat < 10.0 && lon > 79.0 && lon < 82.0) {\r\n              const coords = [lat, lon];\r\n              console.log('🎯 Using fallback Sri Lankan location:', result.display_name);\r\n              console.log('📍 Coordinates:', coords);\r\n              return coords;\r\n            }\r\n          }\r\n        }\r\n      } catch (strategyError) {\r\n        console.log(`⚠️ Geocoding strategy failed: ${strategyError.message}`);\r\n        continue;\r\n      }\r\n    }\r\n    \r\n    console.log('⚠️ All geocoding attempts failed');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Geocoding failed:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Function to score location results based on relevance\r\nconst calculateLocationScore = (result, originalAddress, mainLocation) => {\r\n  let score = 0;\r\n  const displayName = (result.display_name || '').toLowerCase();\r\n  const address = (result.address || {}).address29 || '';\r\n  const originalLower = originalAddress.toLowerCase();\r\n  const mainLower = mainLocation.toLowerCase();\r\n  \r\n  // Extract key components from original address\r\n  const addressWords = originalLower.split(/[\\s,]+/).filter(word => word.length > 2);\r\n  \r\n  // Exact match bonus\r\n  if (displayName.includes(mainLower)) score += 100;\r\n  if (address.includes(mainLower)) score += 80;\r\n  \r\n  // Word-by-word matching for better accuracy\r\n  addressWords.forEach(word => {\r\n    if (displayName.includes(word)) score += 20;\r\n    if (address.includes(word)) score += 15;\r\n  });\r\n  \r\n  // Partial match bonus\r\n  if (displayName.includes(originalLower)) score += 60;\r\n  \r\n  // Sri Lanka context bonus\r\n  if (displayName.includes('sri lanka') || displayName.includes('colombo')) score += 40;\r\n  \r\n  // Road/street match bonus\r\n  if (originalLower.includes('road') && displayName.includes('road')) score += 30;\r\n  if (originalLower.includes('street') && displayName.includes('street')) score += 30;\r\n  if (originalLower.includes('mawatha') && displayName.includes('mawatha')) score += 30;\r\n  if (originalLower.includes('avenue') && displayName.includes('avenue')) score += 30;\r\n  if (originalLower.includes('place') && displayName.includes('place')) score += 30;\r\n  \r\n  // Postal code matching\r\n  const postalMatch = originalLower.match(/colombo\\s*(\\d+)/);\r\n  if (postalMatch && displayName.includes(`colombo ${postalMatch[1]}`)) score += 50;\r\n  \r\n  // Importance bonus (from OSM importance field)\r\n  if (result.importance) score += result.importance * 20;\r\n  \r\n  // Type bonus - prioritize more specific types\r\n  if (result.type === 'administrative') score += 10;\r\n  if (result.type === 'residential') score += 5;\r\n  if (result.type === 'highway') score += 8;\r\n  if (result.type === 'amenity') score += 12;\r\n  \r\n  // Class bonus\r\n  if (result.class === 'highway') score += 5;\r\n  if (result.class === 'place') score += 8;\r\n  \r\n  return score;\r\n};\r\n\r\n// Component to generate emergency location (exact or random)\r\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\r\n  // First, try to get exact coordinates for the address\r\n  if (address) {\r\n    const exactCoords = getExactCoordinatesForAddress(address);\r\n    if (exactCoords) {\r\n      console.log('📍 Using exact coordinates for address:', address);\r\n      return exactCoords;\r\n    }\r\n  }\r\n  \r\n  // If no exact match, generate random location within distance from branch\r\n  console.log('🎲 Generating random location within', maxDistanceKm, 'km from branch coordinates');\r\n  const R = 6371; // Earth's radius in km\r\n  \r\n  // Convert to radians\r\n  const lat1 = branchCoords[0] * Math.PI / 180;\r\n  const lng1 = branchCoords[1] * Math.PI / 180;\r\n  \r\n  // Generate random distance (0 to maxDistanceKm)\r\n  const distance = Math.random() * maxDistanceKm;\r\n  \r\n  // Generate random bearing (0 to 2π)\r\n  const bearing = Math.random() * 2 * Math.PI;\r\n  \r\n  // Calculate new coordinates\r\n  const lat2 = Math.asin(\r\n    Math.sin(lat1) * Math.cos(distance / R) +\r\n    Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing)\r\n  );\r\n  \r\n  const lng2 = lng1 + Math.atan2(\r\n    Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1),\r\n    Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2)\r\n  );\r\n  \r\n  const generatedCoords = [\r\n    lat2 * 180 / Math.PI,\r\n    lng2 * 180 / Math.PI\r\n  ];\r\n  \r\n  console.log('🎲 Generated emergency location:', generatedCoords);\r\n  console.log('📍 Base coordinates used:', branchCoords);\r\n  console.log('📏 Distance from branch:', calculateDistance(branchCoords[0], branchCoords[1], generatedCoords[0], generatedCoords[1]).toFixed(2), 'km');\r\n  \r\n  return generatedCoords;\r\n};\r\n\r\n// Calculate distance between two points using Haversine formula\r\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n  const R = 6371; // Earth's radius in km\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n};\r\n\r\nconst InteractiveMap = ({ \r\n  branchLocation, \r\n  emergencyRequest, \r\n  showRoute = false,\r\n  onRouteCalculated,\r\n  onEmergencyLocationGenerated \r\n}) => {\r\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\r\n  const [route, setRoute] = useState([]);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\r\n  const [mapZoom, setMapZoom] = useState(12);\r\n  const [isGeocoding, setIsGeocoding] = useState(false);\r\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\r\n  \r\n  const mapRef = useRef(null);\r\n\r\n  // Colombo 7 branch coordinates (more accurate)\r\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\r\n  \r\n  \r\n  // Default branch location if not provided\r\n  const defaultBranchLocation = {\r\n    name: 'Colombo 7 Branch',\r\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\r\n    coordinates: colombo7BranchCoords\r\n  };\r\n\r\n  const branch = branchLocation || defaultBranchLocation;\r\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\r\n\r\n  // Generate emergency location when emergency request is provided\r\n  useEffect(() => {\r\n    const processEmergencyLocation = async () => {\r\n      console.log('🚀 Processing emergency location...');\r\n      console.log('📋 Emergency request:', emergencyRequest);\r\n      console.log('📍 Current emergency coords:', emergencyCoords);\r\n      \r\n      if (emergencyRequest && !emergencyCoords) {\r\n        let coords;\r\n        let locationType = 'generated';\r\n        \r\n        console.log('🔍 Emergency request found, processing location...');\r\n        \r\n        if (emergencyRequest.brigadeLocation) {\r\n          // First, try to get exact coordinates for the address (prioritize over provided coordinates)\r\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\r\n          console.log('🎯 Exact coords result:', exactCoords);\r\n          \r\n          if (exactCoords) {\r\n            coords = exactCoords;\r\n            locationType = 'exact';\r\n            console.log('✅ Using exact coordinates for address (overriding provided):', emergencyRequest.brigadeLocation, '->', coords);\r\n          } else if (emergencyRequest.coordinates) {\r\n            // Use provided coordinates only if no exact match found\r\n            coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n            locationType = 'provided';\r\n            console.log('📍 Using provided coordinates:', coords);\r\n          } else {\r\n            // Try to geocode the address to get real coordinates\r\n            console.log('🌍 Attempting to geocode address:', emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(true);\r\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(false);\r\n            \r\n            if (geocodedCoords) {\r\n              coords = geocodedCoords;\r\n              locationType = 'geocoded';\r\n              console.log('✅ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\r\n            } else {\r\n              // Fallback: Generate random location within 30km\r\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\r\n              locationType = 'generated';\r\n              console.log('🎲 Generated random emergency location within 30km:', coords);\r\n            }\r\n          }\r\n        } else if (emergencyRequest.coordinates) {\r\n          // Use provided coordinates only if no address provided\r\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n          locationType = 'provided';\r\n          console.log('📍 Using provided coordinates (no address):', coords);\r\n        } else {\r\n          // No address provided, generate random location\r\n          coords = generateEmergencyLocation(branchCoords, 30);\r\n          locationType = 'generated';\r\n          console.log('🎲 Generated random emergency location within 30km (no address):', coords);\r\n        }\r\n        \r\n        // Set the generated location state\r\n        const locationData = {\r\n          lat: coords[0],\r\n          lng: coords[1],\r\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\r\n          type: locationType\r\n        };\r\n        setGeneratedEmergencyLocation(locationData);\r\n        \r\n        // Notify parent component about generated location\r\n        if (onEmergencyLocationGenerated) {\r\n          onEmergencyLocationGenerated(locationData);\r\n        }\r\n        \r\n        setEmergencyCoords(coords);\r\n        \r\n        // Debug: Log the coordinates being used\r\n        console.log('🗺️ Emergency location coordinates set:', coords);\r\n        console.log('📍 Address:', emergencyRequest.brigadeLocation);\r\n        console.log('🎯 Location type:', locationType);\r\n        console.log('🔍 Final coordinates for map marker:', coords);\r\n        console.log('📊 Location data object:', locationData);\r\n        \r\n        // Calculate distance\r\n        const calculatedDistance = calculateDistance(\r\n          branchCoords[0], branchCoords[1],\r\n          coords[0], coords[1]\r\n        );\r\n        setDistance(calculatedDistance);\r\n        \r\n        // Calculate estimated time (assuming 40 km/h average speed)\r\n        const timeInHours = calculatedDistance / 40;\r\n        const hours = Math.floor(timeInHours);\r\n        const minutes = Math.round((timeInHours - hours) * 60);\r\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n        setEstimatedTime(timeString);\r\n        \r\n        // Update map center to show both locations\r\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\r\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\r\n        setMapCenter([centerLat, centerLng]);\r\n        setMapZoom(11);\r\n      }\r\n    };\r\n\r\n    processEmergencyLocation();\r\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\r\n\r\n  // Calculate route when showRoute is true\r\n  useEffect(() => {\r\n    if (showRoute && emergencyCoords && branchCoords) {\r\n      calculateRoute();\r\n    }\r\n  }, [showRoute, emergencyCoords, branchCoords]);\r\n\r\n  const calculateRoute = async () => {\r\n    if (!emergencyCoords || !branchCoords) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Create a simple route with waypoints\r\n      const routePoints = [\r\n        branchCoords,\r\n        [\r\n          (branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01,\r\n          (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01\r\n        ],\r\n        emergencyCoords\r\n      ];\r\n      \r\n      setRoute(routePoints);\r\n      \r\n      // Calculate road distance (approximate)\r\n      let roadDistance = 0;\r\n      for (let i = 0; i < routePoints.length - 1; i++) {\r\n        roadDistance += calculateDistance(\r\n          routePoints[i][0], routePoints[i][1],\r\n          routePoints[i + 1][0], routePoints[i + 1][1]\r\n        );\r\n      }\r\n      \r\n      // Add some road factor (roads are not straight lines)\r\n      roadDistance *= 1.3; // 30% longer than straight line\r\n      setDistance(roadDistance);\r\n      \r\n      // Calculate estimated time\r\n      const timeInHours = roadDistance / 40; // 40 km/h average\r\n      const hours = Math.floor(timeInHours);\r\n      const minutes = Math.round((timeInHours - hours) * 60);\r\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n      setEstimatedTime(timeString);\r\n      \r\n      // Notify parent component\r\n      if (onRouteCalculated) {\r\n        onRouteCalculated({\r\n          distance: roadDistance,\r\n          estimatedTime: timeString,\r\n          route: routePoints\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error calculating route:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-96 border border-gray-300 rounded-lg overflow-hidden\">\r\n      <MapContainer\r\n        ref={mapRef}\r\n        center={mapCenter}\r\n        zoom={mapZoom}\r\n        style={{ height: '100%', width: '100%' }}\r\n        scrollWheelZoom={true}\r\n      >\r\n        <MapUpdater center={mapCenter} zoom={mapZoom} />\r\n        \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        \r\n        {/* Branch Marker */}\r\n        <Marker position={branchCoords} icon={branchIcon}>\r\n          <Popup>\r\n            <div className=\"p-2\">\r\n              <h3 className=\"font-bold text-blue-600\">🏢 {branch.name}</h3>\r\n              <p className=\"text-sm text-gray-600\">{branch.address}</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                📍 {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}\r\n              </p>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n        \r\n        {/* Emergency Location Marker */}\r\n        {emergencyCoords && (\r\n          <Marker \r\n            position={emergencyCoords} \r\n            icon={\r\n              generatedEmergencyLocation?.type === 'exact' || generatedEmergencyLocation?.type === 'geocoded' \r\n                ? exactEmergencyIcon \r\n                : emergencyIcon\r\n            }\r\n          >\r\n            <Popup>\r\n              <div className=\"p-2\">\r\n                <h3 className=\"font-bold text-red-600\">🚨 Emergency Location</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeName || 'Emergency Request'}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeLocation || 'Generated Location'}\r\n                </p>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  📍 {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}\r\n                </p>\r\n                {generatedEmergencyLocation && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    {generatedEmergencyLocation.type === 'exact' ? '✅ Exact location' :\r\n                     generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded location' :\r\n                     generatedEmergencyLocation.type === 'provided' ? '📍 Provided coordinates' :\r\n                     '🎲 Generated location'}\r\n                  </p>\r\n                )}\r\n                {distance && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    📏 Distance: {distance.toFixed(2)} km\r\n                  </p>\r\n                )}\r\n                {estimatedTime && (\r\n                  <p className=\"text-xs text-green-600\">\r\n                    ⏱️ Est. Time: {estimatedTime}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        )}\r\n        \r\n        {/* Route Line */}\r\n        {showRoute && route.length > 0 && (\r\n          <Polyline\r\n            positions={route}\r\n            color=\"#3B82F6\"\r\n            weight={4}\r\n            opacity={0.8}\r\n            dashArray=\"10, 10\"\r\n          />\r\n        )}\r\n        \r\n        {/* Loading indicator */}\r\n        {(loading || isGeocoding) && (\r\n          <div className=\"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\r\n              <span className=\"text-sm text-gray-600\">\r\n                {isGeocoding ? 'Finding exact location...' : 'Calculating route...'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </MapContainer>\r\n      \r\n      {/* Map Info Panel */}\r\n      <div className=\"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\">\r\n        <h4 className=\"font-semibold text-gray-800 mb-2\">📍 Route Information</h4>\r\n        <div className=\"text-sm space-y-1\">\r\n          <p><strong>From:</strong> {branch.name}</p>\r\n          <p className=\"text-xs text-gray-500\">📍 Branch: {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}</p>\r\n          <p><strong>To:</strong> {emergencyRequest?.brigadeName || 'Emergency Location'}</p>\r\n          {emergencyRequest?.brigadeLocation && (\r\n            <p className=\"text-xs text-gray-600\"><strong>Address:</strong> {emergencyRequest.brigadeLocation}</p>\r\n          )}\r\n          {emergencyCoords && (\r\n            <p className=\"text-xs text-gray-600\"><strong>Emergency Coords:</strong> {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}</p>\r\n          )}\r\n          {generatedEmergencyLocation && (\r\n            <div className=\"mt-2\">\r\n              <p className={`text-xs font-medium ${\r\n                generatedEmergencyLocation.type === 'exact' ? 'text-green-600' :\r\n                generatedEmergencyLocation.type === 'geocoded' ? 'text-blue-600' :\r\n                generatedEmergencyLocation.type === 'provided' ? 'text-blue-600' :\r\n                'text-orange-600'\r\n              }`}>\r\n                {generatedEmergencyLocation.type === 'exact' ? '✅ Exact location from database' :\r\n                 generatedEmergencyLocation.type === 'geocoded' ? '🌍 Geocoded from address' :\r\n                 generatedEmergencyLocation.type === 'provided' ? '📍 Using provided coordinates' :\r\n                 '🎲 Generated location within 30km'}\r\n              </p>\r\n              {generatedEmergencyLocation.type === 'exact' && (\r\n                <p className=\"text-xs text-green-500\">🎯 High accuracy - known location</p>\r\n              )}\r\n              {generatedEmergencyLocation.type === 'geocoded' && (\r\n                <p className=\"text-xs text-blue-500\">🌍 Online geocoding used</p>\r\n              )}\r\n              {generatedEmergencyLocation.type === 'generated' && (\r\n                <p className=\"text-xs text-orange-500\">📍 Generated from branch location</p>\r\n              )}\r\n            </div>\r\n          )}\r\n          {distance && (\r\n            <p><strong>Distance:</strong> {distance.toFixed(2)} km</p>\r\n          )}\r\n          {estimatedTime && (\r\n            <p><strong>Est. Time:</strong> {estimatedTime}</p>\r\n          )}\r\n          {emergencyRequest?.priority && (\r\n            <p className={`text-xs px-2 py-1 rounded ${\r\n              emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' :\r\n              emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' :\r\n              'bg-yellow-100 text-yellow-800'\r\n            }`}>\r\n              Priority: {emergencyRequest.priority}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}