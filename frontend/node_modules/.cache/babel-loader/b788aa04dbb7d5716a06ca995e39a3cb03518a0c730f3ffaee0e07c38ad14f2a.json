{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for debugging\napiClient.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n\n// Emergency Request API calls\nexport const emergencyRequestAPI = {\n  // Create new emergency request\n  createRequest: async requestData => {\n    try {\n      const response = await apiClient.post('/emergency-requests/create', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating emergency request:', error);\n      throw error;\n    }\n  },\n  // Get all emergency requests\n  getAllRequests: async () => {\n    try {\n      const response = await apiClient.get('/emergency-requests/all');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests:', error);\n      throw error;\n    }\n  },\n  // Get emergency request by ID\n  getRequestById: async id => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency request:', error);\n      throw error;\n    }\n  },\n  // Update emergency request status\n  updateRequestStatus: async (id, updateData) => {\n    try {\n      console.log('Updating request status:', id, updateData);\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating emergency request status:', error);\n      throw error;\n    }\n  },\n  // Get emergency requests by status\n  getRequestsByStatus: async status => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests by status:', error);\n      throw error;\n    }\n  },\n  // Get emergency requests by brigade\n  getRequestsByBrigade: async brigadeId => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests by brigade:', error);\n      throw error;\n    }\n  },\n  // Find nearest branch\n  findNearestBranch: async coordinates => {\n    try {\n      console.log('Finding nearest branch with coordinates:', coordinates);\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\n      return response.data;\n    } catch (error) {\n      console.error('Error finding nearest branch:', error);\n      throw error;\n    }\n  },\n  // Delete emergency request\n  deleteRequest: async id => {\n    try {\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting emergency request:', error);\n      throw error;\n    }\n  }\n};\n\n// Branch API calls\nexport const branchAPI = {\n  getAllBranches: async () => {\n    try {\n      const response = await apiClient.get('/branches');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branches:', error);\n      throw error;\n    }\n  },\n  getBranchById: async id => {\n    try {\n      const response = await apiClient.get(`/branches/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branch:', error);\n      throw error;\n    }\n  }\n};\n\n// User API calls\nexport const userAPI = {\n  getAllUsers: async () => {\n    try {\n      const response = await apiClient.get('/users');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  },\n  getUserById: async id => {\n    try {\n      const response = await apiClient.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n};\n\n// Employee API calls\nexport const employeeAPI = {\n  getAllEmployees: async () => {\n    try {\n      const response = await apiClient.get('/employees');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n  getEmployeeById: async id => {\n    try {\n      const response = await apiClient.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","emergencyRequestAPI","createRequest","requestData","post","getAllRequests","get","getRequestById","id","updateRequestStatus","updateData","put","getRequestsByStatus","getRequestsByBrigade","brigadeId","findNearestBranch","coordinates","deleteRequest","delete","branchAPI","getAllBranches","getBranchById","userAPI","getAllUsers","getUserById","employeeAPI","getAllEmployees","getEmployeeById"],"sources":["E:/Y2S2/Project/frontend/src/utils/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    console.log('API Request:', config.method?.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for debugging\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Emergency Request API calls\r\nexport const emergencyRequestAPI = {\r\n  // Create new emergency request\r\n  createRequest: async (requestData) => {\r\n    try {\r\n      const response = await apiClient.post('/emergency-requests/create', requestData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating emergency request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all emergency requests\r\n  getAllRequests: async () => {\r\n    try {\r\n      const response = await apiClient.get('/emergency-requests/all');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency request by ID\r\n  getRequestById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update emergency request status\r\n  updateRequestStatus: async (id, updateData) => {\r\n    try {\r\n      console.log('Updating request status:', id, updateData);\r\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating emergency request status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by status\r\n  getRequestsByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests by status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by brigade\r\n  getRequestsByBrigade: async (brigadeId) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests by brigade:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Find nearest branch\r\n  findNearestBranch: async (coordinates) => {\r\n    try {\r\n      console.log('Finding nearest branch with coordinates:', coordinates);\r\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error finding nearest branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete emergency request\r\n  deleteRequest: async (id) => {\r\n    try {\r\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting emergency request:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Branch API calls\r\nexport const branchAPI = {\r\n  getAllBranches: async () => {\r\n    try {\r\n      const response = await apiClient.get('/branches');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branches:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/branches/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branch:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// User API calls\r\nexport const userAPI = {\r\n  getAllUsers: async () => {\r\n    try {\r\n      const response = await apiClient.get('/users');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getUserById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/users/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Employee API calls\r\nexport const employeeAPI = {\r\n  getAllEmployees: async () => {\r\n    try {\r\n      const response = await apiClient.get('/employees');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching employees:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getEmployeeById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/employees/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching employee:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}