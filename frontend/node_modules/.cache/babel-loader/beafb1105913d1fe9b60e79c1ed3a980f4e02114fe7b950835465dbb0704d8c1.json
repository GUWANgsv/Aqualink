{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Cart reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        return {\n          ...state,\n          items: state.items.map(item => item.id === action.payload.id ? {\n            ...item,\n            quantity: item.quantity + action.payload.quantity\n          } : item)\n        };\n      } else {\n        return {\n          ...state,\n          items: [...state.items, {\n            ...action.payload,\n            quantity: action.payload.quantity\n          }]\n        };\n      }\n    case 'REMOVE_ITEM':\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload)\n      };\n    case 'UPDATE_QUANTITY':\n      return {\n        ...state,\n        items: state.items.map(item => item.id === action.payload.id ? {\n          ...item,\n          quantity: action.payload.quantity\n        } : item)\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        items: []\n      };\n    default:\n      return state;\n  }\n};\n\n// Cart provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, {\n    items: []\n  });\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      const parsedCart = JSON.parse(savedCart);\n      parsedCart.items.forEach(item => {\n        dispatch({\n          type: 'ADD_ITEM',\n          payload: item\n        });\n      });\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(state));\n  }, [state]);\n\n  // Calculate total items in cart\n  const getTotalItems = () => {\n    return state.items.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  // Calculate total price\n  const getTotalPrice = () => {\n    return state.items.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1) => {\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        category: product.category,\n        quantity: quantity\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: productId\n    });\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n    } else {\n      dispatch({\n        type: 'UPDATE_QUANTITY',\n        payload: {\n          id: productId,\n          quantity\n        }\n      });\n    }\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n  };\n\n  // Checkout function - process all cart items\n  const checkout = async (customerInfo = {}) => {\n    if (state.items.length === 0) {\n      throw new Error('Cart is empty');\n    }\n    try {\n      // Prepare purchase data\n      const purchaseData = {\n        customerId: customerInfo.customerId || 'customer-' + Date.now(),\n        customerName: customerInfo.customerName || 'Customer',\n        customerEmail: customerInfo.customerEmail || 'customer@example.com',\n        customerPhone: customerInfo.customerPhone || '+94 77 123 4567',\n        items: state.items.map(item => ({\n          itemName: item.name,\n          quantity: item.quantity,\n          unitPrice: item.price\n        })),\n        paymentMethod: customerInfo.paymentMethod || 'Cash',\n        deliveryAddress: customerInfo.deliveryAddress || {\n          street: 'Customer Address',\n          city: 'Colombo',\n          postalCode: '00100',\n          country: 'Sri Lanka'\n        },\n        notes: `Cart checkout - ${state.items.length} items`\n      };\n\n      // Make API call to process purchase\n      const response = await axios.post('http://localhost:5000/CustomerPurchases', purchaseData);\n      if (response.data.success) {\n        // Clear cart after successful purchase\n        clearCart();\n        return response.data;\n      } else {\n        throw new Error(response.data.message || 'Purchase failed');\n      }\n    } catch (error) {\n      console.error('Checkout failed:', error);\n      throw error;\n    }\n  };\n  const value = {\n    items: state.items,\n    totalItems: getTotalItems(),\n    totalPrice: getTotalPrice(),\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    checkout\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use cart context\n_s(CartProvider, \"7PMpzngYTraD2+4OxieRfUDlJSg=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","existingItem","items","find","item","id","payload","map","quantity","filter","CartProvider","children","_s","dispatch","savedCart","localStorage","getItem","parsedCart","JSON","parse","forEach","setItem","stringify","getTotalItems","reduce","total","getTotalPrice","price","addToCart","product","name","image","category","removeFromCart","productId","updateQuantity","clearCart","checkout","customerInfo","length","Error","purchaseData","customerId","Date","now","customerName","customerEmail","customerPhone","itemName","unitPrice","paymentMethod","deliveryAddress","street","city","postalCode","country","notes","response","post","data","success","message","error","console","value","totalItems","totalPrice","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CartContext = createContext();\r\n\r\n// Cart reducer\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      const existingItem = state.items.find(item => item.id === action.payload.id);\r\n      if (existingItem) {\r\n        return {\r\n          ...state,\r\n          items: state.items.map(item =>\r\n            item.id === action.payload.id\r\n              ? { ...item, quantity: item.quantity + action.payload.quantity }\r\n              : item\r\n          )\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          items: [...state.items, { ...action.payload, quantity: action.payload.quantity }]\r\n        };\r\n      }\r\n\r\n    case 'REMOVE_ITEM':\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item.id !== action.payload)\r\n      };\r\n\r\n    case 'UPDATE_QUANTITY':\r\n      return {\r\n        ...state,\r\n        items: state.items.map(item =>\r\n          item.id === action.payload.id\r\n            ? { ...item, quantity: action.payload.quantity }\r\n            : item\r\n        )\r\n      };\r\n\r\n    case 'CLEAR_CART':\r\n      return {\r\n        ...state,\r\n        items: []\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Cart provider component\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, {\r\n    items: []\r\n  });\r\n\r\n  // Load cart from localStorage on mount\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      const parsedCart = JSON.parse(savedCart);\r\n      parsedCart.items.forEach(item => {\r\n        dispatch({ type: 'ADD_ITEM', payload: item });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  // Calculate total items in cart\r\n  const getTotalItems = () => {\r\n    return state.items.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n\r\n  // Calculate total price\r\n  const getTotalPrice = () => {\r\n    return state.items.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n  };\r\n\r\n  // Add item to cart\r\n  const addToCart = (product, quantity = 1) => {\r\n    dispatch({\r\n      type: 'ADD_ITEM',\r\n      payload: {\r\n        id: product.id,\r\n        name: product.name,\r\n        price: product.price,\r\n        image: product.image,\r\n        category: product.category,\r\n        quantity: quantity\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (productId) => {\r\n    dispatch({\r\n      type: 'REMOVE_ITEM',\r\n      payload: productId\r\n    });\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (productId, quantity) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId);\r\n    } else {\r\n      dispatch({\r\n        type: 'UPDATE_QUANTITY',\r\n        payload: { id: productId, quantity }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Clear cart\r\n  const clearCart = () => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n  };\r\n\r\n  // Checkout function - process all cart items\r\n  const checkout = async (customerInfo = {}) => {\r\n    if (state.items.length === 0) {\r\n      throw new Error('Cart is empty');\r\n    }\r\n\r\n    try {\r\n      // Prepare purchase data\r\n      const purchaseData = {\r\n        customerId: customerInfo.customerId || 'customer-' + Date.now(),\r\n        customerName: customerInfo.customerName || 'Customer',\r\n        customerEmail: customerInfo.customerEmail || 'customer@example.com',\r\n        customerPhone: customerInfo.customerPhone || '+94 77 123 4567',\r\n        items: state.items.map(item => ({\r\n          itemName: item.name,\r\n          quantity: item.quantity,\r\n          unitPrice: item.price\r\n        })),\r\n        paymentMethod: customerInfo.paymentMethod || 'Cash',\r\n        deliveryAddress: customerInfo.deliveryAddress || {\r\n          street: 'Customer Address',\r\n          city: 'Colombo',\r\n          postalCode: '00100',\r\n          country: 'Sri Lanka'\r\n        },\r\n        notes: `Cart checkout - ${state.items.length} items`\r\n      };\r\n\r\n      // Make API call to process purchase\r\n      const response = await axios.post('http://localhost:5000/CustomerPurchases', purchaseData);\r\n      \r\n      if (response.data.success) {\r\n        // Clear cart after successful purchase\r\n        clearCart();\r\n        return response.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Purchase failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Checkout failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    items: state.items,\r\n    totalItems: getTotalItems(),\r\n    totalPrice: getTotalPrice(),\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    checkout\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}