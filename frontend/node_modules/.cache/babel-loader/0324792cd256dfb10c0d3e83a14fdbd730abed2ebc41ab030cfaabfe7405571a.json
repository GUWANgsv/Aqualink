{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\EmergencyRouteMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst EmergencyRouteMap = ({\n  emergencyRequest,\n  branchLocation,\n  onClose\n}) => {\n  _s();\n  const [route, setRoute] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n  const [directions, setDirections] = useState([]);\n\n  // Default coordinates for Colombo, Sri Lanka\n  const defaultCenter = [6.9271, 79.8612];\n\n  // Parse coordinates from emergency request with geocoding\n  const [emergencyCoords, setEmergencyCoords] = useState(defaultCenter);\n  const [isGeocoding, setIsGeocoding] = useState(false);\n\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\n  const branchCoords = branchLocation ? [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : defaultCenter;\n\n  // Geocode address to get actual coordinates\n  const geocodeAddress = async address => {\n    if (!address) return defaultCenter;\n    setIsGeocoding(true);\n    try {\n      console.log('üåç Geocoding address:', address);\n\n      // Try multiple geocoding strategies for better accuracy\n      const strategies = [\n      // Strategy 1: Full address with Sri Lanka\n      `${address}, Sri Lanka`,\n      // Strategy 2: Address with Colombo, Sri Lanka\n      `${address}, Colombo, Sri Lanka`,\n      // Strategy 3: Just the address\n      address,\n      // Strategy 4: Extract area name only\n      address.split(',')[0] + ', Colombo, Sri Lanka'];\n      for (const searchQuery of strategies) {\n        try {\n          console.log(`üîç Trying geocoding strategy: \"${searchQuery}\"`);\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=5&countrycodes=lk&addressdetails=1`);\n          const data = await response.json();\n          if (data && data.length > 0) {\n            // Find the best result (prefer results with address details)\n            let bestResult = data[0];\n            for (const result of data) {\n              // Check if result has proper address details and is not in the sea\n              if (result.address && result.address.city && parseFloat(result.lat) > 6.0 && parseFloat(result.lat) < 7.5 &&\n              // Colombo area latitude\n              parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 81.0) {\n                // Colombo area longitude\n                bestResult = result;\n                break;\n              }\n            }\n            const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\n\n            // Validate coordinates are in Sri Lanka and not in the sea\n            if (coords[0] > 5.5 && coords[0] < 10.0 && coords[1] > 79.0 && coords[1] < 82.0) {\n              console.log('‚úÖ Geocoded address to coordinates:', coords);\n              console.log('üìç Found location:', bestResult.display_name);\n              return coords;\n            }\n          }\n        } catch (strategyError) {\n          console.log(`‚ö†Ô∏è Strategy failed: ${strategyError.message}`);\n          continue;\n        }\n      }\n\n      // If all strategies fail, use a fallback based on common Colombo areas\n      console.log('‚ö†Ô∏è All geocoding strategies failed, using area-based fallback');\n      return getFallbackCoordinates(address);\n    } catch (error) {\n      console.error('‚ùå Geocoding failed:', error);\n      return getFallbackCoordinates(address);\n    } finally {\n      setIsGeocoding(false);\n    }\n  };\n\n  // Fallback coordinates for common Colombo areas\n  const getFallbackCoordinates = address => {\n    const addressLower = address.toLowerCase();\n\n    // Common Colombo area coordinates\n    const areaCoordinates = {\n      'borella': [6.9047, 79.8844],\n      'baseline': [6.9047, 79.8844],\n      // Baseline Road, Borella\n      'kollupitiya': [6.9100, 79.8500],\n      'bambalapitiya': [6.8900, 79.8600],\n      'pettah': [6.9400, 79.8500],\n      'fort': [6.9300, 79.8400],\n      'slave island': [6.9200, 79.8500],\n      'union place': [6.9200, 79.8500],\n      'liberty plaza': [6.9100, 79.8500],\n      'galle road': [6.9100, 79.8500],\n      'colombo 01': [6.9300, 79.8400],\n      'colombo 02': [6.9200, 79.8500],\n      'colombo 03': [6.9100, 79.8500],\n      'colombo 04': [6.9000, 79.8600],\n      'colombo 05': [6.8900, 79.8600],\n      'colombo 06': [6.8800, 79.8700],\n      'colombo 07': [6.8700, 79.8700],\n      'colombo 08': [6.9047, 79.8844],\n      // Borella area\n      'colombo 09': [6.8900, 79.8800],\n      'colombo 10': [6.9400, 79.8500],\n      'colombo 11': [6.9400, 79.8500],\n      'colombo 12': [6.9500, 79.8400],\n      'colombo 13': [6.9600, 79.8300],\n      'colombo 14': [6.9700, 79.8200],\n      'colombo 15': [6.9800, 79.8100]\n    };\n\n    // Find matching area\n    for (const [area, coords] of Object.entries(areaCoordinates)) {\n      if (addressLower.includes(area)) {\n        console.log(`üéØ Using fallback coordinates for area: ${area}`, coords);\n        return coords;\n      }\n    }\n\n    // Default to Colombo center if no area match\n    console.log('üéØ Using default Colombo center coordinates');\n    return [6.9271, 79.8612];\n  };\n\n  // Initialize coordinates when component mounts or emergency request changes\n  useEffect(() => {\n    const initializeCoordinates = async () => {\n      if (emergencyRequest !== null && emergencyRequest !== void 0 && emergencyRequest.coordinates) {\n        // If coordinates are provided, use them\n        const coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n        setEmergencyCoords(coords);\n      } else if (emergencyRequest !== null && emergencyRequest !== void 0 && emergencyRequest.brigadeLocation) {\n        // If only address is provided, geocode it\n        const coords = await geocodeAddress(emergencyRequest.brigadeLocation);\n        setEmergencyCoords(coords);\n      } else {\n        setEmergencyCoords(defaultCenter);\n      }\n    };\n    initializeCoordinates();\n  }, [emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.coordinates, emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]);\n\n  // Automatically calculate route when coordinates are updated\n  useEffect(() => {\n    if (emergencyCoords && branchCoords && emergencyRequest && !loading) {\n      console.log('üîÑ Auto-calculating route after coordinate update');\n      calculateRoute();\n    }\n  }, [emergencyCoords, branchCoords]);\n\n  // Calculate distance between two points using Haversine formula\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  };\n\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\n  const calculateEstimatedTime = distanceKm => {\n    const averageSpeed = 40; // km/h\n    const timeInHours = distanceKm / averageSpeed;\n    const hours = Math.floor(timeInHours);\n    const minutes = Math.round((timeInHours - hours) * 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  // Calculate road distance along the route\n  const calculateRoadDistance = route => {\n    let totalDistance = 0;\n    for (let i = 0; i < route.length - 1; i++) {\n      const segmentDistance = calculateDistance(route[i][0], route[i][1], route[i + 1][0], route[i + 1][1]);\n      totalDistance += segmentDistance;\n    }\n    return totalDistance;\n  };\n\n  // Calculate route using real road-based routing\n  const calculateRoute = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('üöÄ Starting real road route calculation...');\n      console.log('üìç Branch coords:', branchCoords);\n      console.log('üìç Emergency coords:', emergencyCoords);\n\n      // Try to get real road route using OpenRouteService\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\n      if (realRoute && realRoute.length > 0) {\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\n        setRoute(realRoute);\n\n        // Generate turn-by-turn directions using Colombo road network\n        const roadNetwork = getColomboRoadNetwork();\n        const turnByTurnDirections = generateTurnByTurnDirections(realRoute, roadNetwork);\n        setDirections(turnByTurnDirections);\n        const roadDistance = calculateRoadDistance(realRoute);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n        console.log(`üìç Realistic Colombo route calculated:`);\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\n        console.log(`üß≠ Turn-by-turn directions: ${turnByTurnDirections.length} steps`);\n      } else {\n        // Fallback to improved road-based route\n        console.log('üîÑ Falling back to improved road-based route');\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\n        if (!routeCoordinates || routeCoordinates.length < 2) {\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\n          setRoute([branchCoords, emergencyCoords]);\n        } else {\n          setRoute(routeCoordinates);\n        }\n        const roadDistance = calculateRoadDistance(routeCoordinates);\n        const calculatedTime = calculateEstimatedTime(roadDistance);\n        setDistance(roadDistance);\n        setEstimatedTime(calculatedTime);\n      }\n\n      // Compare with straight-line distance\n      const straightLineDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\n    } catch (err) {\n      console.error('Error calculating route:', err);\n      setError('Failed to calculate route. Showing direct path.');\n      // Fallback to straight line\n      const fallbackRoute = [branchCoords, emergencyCoords];\n      setRoute(fallbackRoute);\n      const fallbackDistance = calculateDistance(branchCoords[0], branchCoords[1], emergencyCoords[0], emergencyCoords[1]);\n      setDistance(fallbackDistance);\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\n      console.log('üîÑ Using fallback route:', fallbackRoute);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get realistic road route using simulated Colombo road network\n  const getRealRoadRoute = async (start, end) => {\n    try {\n      console.log('üõ£Ô∏è Calculating realistic route through Colombo road network...');\n\n      // Simulate API call delay for realism\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Use our enhanced Colombo road network for realistic routing\n      const realisticRoute = createRealisticColomboRoute(start, end);\n      console.log('‚úÖ Realistic Colombo route calculated successfully');\n      console.log(`üõ£Ô∏è Route waypoints: ${realisticRoute.length}`);\n      console.log(`üìç Following actual Colombo roads and intersections`);\n      return realisticRoute;\n    } catch (error) {\n      console.error('üõ£Ô∏è Route calculation failed:', error);\n      console.log('üîÑ Using fallback route');\n      return createImprovedRoadRoute(start, end);\n    }\n  };\n\n  // Create improved road route (fallback)\n  const createImprovedRoadRoute = (start, end) => {\n    console.log('üõ£Ô∏è Creating improved road route...');\n\n    // Use the realistic Colombo route as fallback\n    return createRealisticColomboRoute(start, end);\n  };\n\n  // Get Colombo road network (extracted for reuse)\n  const getColomboRoadNetwork = () => {\n    return {\n      // Galle Road - Main coastal road with detailed segments\n      galleRoad: {\n        segments: [{\n          start: [6.9280, 79.8600],\n          end: [6.9250, 79.8580],\n          name: \"Galle Face to Chatham Street\"\n        }, {\n          start: [6.9250, 79.8580],\n          end: [6.9220, 79.8550],\n          name: \"Chatham Street to Pettah\"\n        }, {\n          start: [6.9220, 79.8550],\n          end: [6.9200, 79.8520],\n          name: \"Pettah to Slave Island\"\n        }, {\n          start: [6.9200, 79.8520],\n          end: [6.9180, 79.8490],\n          name: \"Slave Island to Kollupitiya\"\n        }, {\n          start: [6.9180, 79.8490],\n          end: [6.9150, 79.8460],\n          name: \"Kollupitiya to Bambalapitiya\"\n        }, {\n          start: [6.9150, 79.8460],\n          end: [6.9120, 79.8430],\n          name: \"Bambalapitiya to Wellawatta\"\n        }, {\n          start: [6.9120, 79.8430],\n          end: [6.9060, 79.8370],\n          name: \"Wellawatta to Mount Lavinia\"\n        }],\n        curves: [{\n          point: [6.9265, 79.8590],\n          radius: 0.002\n        },\n        // Galle Face curve\n        {\n          point: [6.9235, 79.8565],\n          radius: 0.0015\n        },\n        // Pettah curve\n        {\n          point: [6.9190, 79.8505],\n          radius: 0.002\n        },\n        // Slave Island curve\n        {\n          point: [6.9165, 79.8475],\n          radius: 0.0015\n        } // Kollupitiya curve\n        ]\n      },\n      // Union Place to Maradana Road\n      unionPlaceRoad: {\n        segments: [{\n          start: [6.9300, 79.8650],\n          end: [6.9330, 79.8680],\n          name: \"Union Place to Maradana\"\n        }],\n        curves: [{\n          point: [6.9315, 79.8665],\n          radius: 0.001\n        }]\n      },\n      // Liberty Plaza Road\n      libertyPlazaRoad: {\n        segments: [{\n          start: [6.9180, 79.8490],\n          end: [6.9160, 79.8470],\n          name: \"Kollupitiya to Liberty Plaza\"\n        }, {\n          start: [6.9160, 79.8470],\n          end: [6.9150, 79.8460],\n          name: \"Liberty Plaza to Bambalapitiya\"\n        }],\n        curves: [{\n          point: [6.9170, 79.8480],\n          radius: 0.0008\n        }]\n      },\n      // Odel to Crescat Road\n      odelCrescatRoad: {\n        segments: [{\n          start: [6.9140, 79.8450],\n          end: [6.9130, 79.8440],\n          name: \"Odel to Crescat\"\n        }, {\n          start: [6.9130, 79.8440],\n          end: [6.9120, 79.8430],\n          name: \"Crescat to Wellawatta\"\n        }],\n        curves: [{\n          point: [6.9135, 79.8445],\n          radius: 0.0005\n        }]\n      }\n    };\n  };\n\n  // Find the best road path between two points\n  const findBestRoadPath = (start, end, roadNetwork) => {\n    const paths = [];\n\n    // Check if both points are on Galle Road\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\n      paths.push({\n        road: 'galleRoad',\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\n      });\n    }\n\n    // Check other road combinations\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\n      if (roadName !== 'galleRoad') {\n        const distance = calculatePathDistance(start, end, roadData);\n        if (distance < 5) {\n          // Within 5km\n          paths.push({\n            road: roadName,\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\n            distance: distance\n          });\n        }\n      }\n    });\n\n    // Return the shortest path\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\n      road: 'galleRoad',\n      segments: roadNetwork.galleRoad.segments,\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\n    };\n  };\n\n  // Check if a point is on a specific road\n  const isPointOnRoad = (point, road) => {\n    return road.segments.some(segment => {\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n      return distanceToStart + distanceToEnd <= segmentLength + 0.1; // Within 100m of road\n    });\n  };\n\n  // Get road segments between two points\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\n    // For simplicity, return all segments of the road\n    // In a real implementation, this would find the specific segments between the points\n    return road.segments;\n  };\n\n  // Calculate path distance\n  const calculatePathDistance = (start, end, road) => {\n    let totalDistance = 0;\n    road.segments.forEach(segment => {\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\n    });\n    return totalDistance;\n  };\n\n  // Create detailed route with curves and road segments\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\n    const route = [start];\n    const road = roadNetwork[roadPath.road];\n\n    // Add road segments with curves\n    road.segments.forEach((segment, index) => {\n      // Add start of segment\n      route.push(segment.start);\n\n      // Add curve points if available\n      if (road.curves && road.curves[index]) {\n        const curve = road.curves[index];\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\n        route.push(...curvePoints);\n      }\n\n      // Add end of segment\n      route.push(segment.end);\n    });\n\n    // Add final destination\n    route.push(end);\n\n    // Remove duplicate consecutive points\n    return removeDuplicatePoints(route);\n  };\n\n  // Generate curve points between two road segments\n  const generateCurvePoints = (start, end, curve) => {\n    const curvePoints = [];\n    const numCurvePoints = 3; // Number of points to create the curve\n\n    for (let i = 1; i <= numCurvePoints; i++) {\n      const t = i / (numCurvePoints + 1);\n\n      // Create a curved path using the curve center and radius\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\n      const curvePoint = [start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI / 2), start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI / 2)];\n      curvePoints.push(curvePoint);\n    }\n    return curvePoints;\n  };\n\n  // Remove duplicate consecutive points\n  const removeDuplicatePoints = points => {\n    const uniquePoints = [points[0]];\n    for (let i = 1; i < points.length; i++) {\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\n      const currentPoint = points[i];\n      const distance = calculateDistance(prevPoint[0], prevPoint[1], currentPoint[0], currentPoint[1]);\n\n      // Only add point if it's more than 10 meters away from previous point\n      if (distance > 0.01) {\n        uniquePoints.push(currentPoint);\n      }\n    }\n    return uniquePoints;\n  };\n\n  // Create Google Maps-style realistic route with curves and road segments\n  const createRealisticColomboRoute = (start, end) => {\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\n\n    // Get detailed Colombo road network with curves and segments\n    const colomboRoadNetwork = getColomboRoadNetwork();\n\n    // Find the best road path between start and end\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\n\n    // Create detailed route with curves and road segments\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\n    return detailedRoute;\n  };\n\n  // Generate turn-by-turn directions like Google Maps\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\n    const directions = [];\n    for (let i = 0; i < route.length - 1; i++) {\n      const currentPoint = route[i];\n      const nextPoint = route[i + 1];\n\n      // Find which road segment this is on\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\n      if (roadSegment) {\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\n        if (direction) {\n          directions.push({\n            step: i + 1,\n            instruction: direction.instruction,\n            distance: direction.distance,\n            road: roadSegment.name,\n            coordinates: currentPoint\n          });\n        }\n      }\n    }\n    return directions;\n  };\n\n  // Find which road segment a route segment belongs to\n  const findRoadSegment = (start, end, roadNetwork) => {\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\n      for (const segment of roadData.segments) {\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) {\n          // Within 100m\n          return {\n            ...segment,\n            roadName\n          };\n        }\n      }\n    }\n    return null;\n  };\n\n  // Generate direction text for a route segment\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\n    if (stepIndex === 0) {\n      return {\n        instruction: `Start from ${roadSegment.name}`,\n        distance: distanceText\n      };\n    }\n\n    // Determine direction based on coordinates\n    const latDiff = end[0] - start[0];\n    const lngDiff = end[1] - start[1];\n    let direction = '';\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\n    } else {\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\n    }\n    return {\n      instruction: `${direction} on ${roadSegment.name}`,\n      distance: distanceText\n    };\n  };\n\n  // Find closest intersection to a point\n  const findClosestIntersection = (point, intersections) => {\n    let closest = null;\n    let minDistance = Infinity;\n    Object.entries(intersections).forEach(([name, coords]) => {\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closest = {\n          name,\n          coords,\n          distance\n        };\n      }\n    });\n    return closest;\n  };\n\n  // Get intermediate intersections for routing\n  const getIntermediateIntersections = (startName, endName, intersections) => {\n    const route = [];\n\n    // Define common routing patterns in Colombo\n    const routingPatterns = {\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\n      'fort-to-maradana': ['unionPlace'],\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\n      'wellawatta-to-mountLavinia': ['mountLavinia']\n    };\n\n    // Find matching pattern\n    const patternKey = `${startName}-to-${endName}`;\n    const reversePatternKey = `${endName}-to-${startName}`;\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\n    if (pattern) {\n      pattern.forEach(intersectionName => {\n        if (intersections[intersectionName]) {\n          route.push(intersections[intersectionName]);\n        }\n      });\n    } else {\n      // Default routing through major intersections\n      if (startName === 'fort') {\n        route.push(intersections.chathamStreet);\n        route.push(intersections.pettah);\n        route.push(intersections.slaveIsland);\n      }\n    }\n    return route;\n  };\n\n  // Manual route calculation trigger\n\n  // Calculate center point for map\n  const mapCenter = [(branchCoords[0] + emergencyCoords[0]) / 2, (branchCoords[1] + emergencyCoords[1]) / 2];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900\",\n            children: \"Emergency Route Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"w-6 h-6\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M6 18L18 6M6 6l12 12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-900 mb-2\",\n            children: \"Emergency Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Location:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Brigade:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 703,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Water Level:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Priority:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 705,\n                  columnNumber: 20\n                }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Branch Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 20\n                }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 17\n              }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Distance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 710,\n                  columnNumber: 33\n                }, this), \" \", distance.toFixed(2), \" km\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 30\n              }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Est. Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 38\n                }, this), \" \", estimatedTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2 text-gray-600\",\n            children: \"Calculating route...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-yellow-800\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-green-50 border border-green-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-green-700 mb-3\",\n            children: \"\\uD83D\\uDEE3\\uFE0F Emergency Water Delivery Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3 p-3 bg-white border border-green-300 rounded-md\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm font-medium text-green-800 mb-1\",\n              children: \"\\uD83D\\uDCCD DESTINATION ADDRESS:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-base font-bold text-gray-900\",\n              children: emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 15\n            }, this), isGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 flex items-center text-blue-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm\",\n                children: \"Automatically finding exact location...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm space-y-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83C\\uDFE2 Brigade:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 18\n              }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83D\\uDE9A Starting Point:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 18\n              }, this), \" Colombo Central Branch\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83C\\uDF0D Map Location:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 748,\n                columnNumber: 18\n              }, this), \" \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 15\n            }, this), isGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-blue-700\",\n                children: \"\\uD83D\\uDD0D Auto-geocoding in progress...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-xs text-blue-600\",\n                children: [\"Finding exact location for: \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 17\n            }, this), route && route.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 pt-2 border-t border-green-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\uD83D\\uDCCF Road Distance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 757,\n                  columnNumber: 22\n                }, this), \" \", distance ? `${distance.toFixed(2)} km` : 'Auto-calculating...']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\u23F1\\uFE0F Estimated Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 22\n                }, this), \" \", estimatedTime || 'Auto-calculating...']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-96 w-full border border-gray-300 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            center: mapCenter,\n            zoom: 12,\n            style: {\n              height: '100%',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: branchCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-medium text-green-700\",\n                    children: \"\\uD83C\\uDFE2 Your Branch\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 779,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Name:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 780,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.name) || 'Colombo Central Branch']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 780,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Address:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 781,\n                      columnNumber: 44\n                    }, this), \" \", (branchLocation === null || branchLocation === void 0 ? void 0 : branchLocation.address) || '123 Galle Road, Colombo 07']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 781,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Coordinates:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 782,\n                      columnNumber: 44\n                    }, this), \" \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 782,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs text-gray-600 mt-1\",\n                    children: \"\\uD83D\\uDCCD Starting point for emergency delivery\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 783,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 778,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: emergencyCoords,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-4 text-center max-w-sm\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-bold text-red-600 text-lg mb-3\",\n                    children: \"\\uD83D\\uDD25\\uD83D\\uDE92 Emergency Water Request\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 792,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm font-medium text-yellow-800 mb-1\",\n                      children: \"\\uD83D\\uDCCD DESTINATION ADDRESS:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 796,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-base font-bold text-gray-900 leading-tight\",\n                      children: emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 797,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 795,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"space-y-2 text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\uD83C\\uDFE2 Brigade:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 801,\n                        columnNumber: 26\n                      }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 801,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\uD83D\\uDCA7 Water Level:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 802,\n                        columnNumber: 26\n                      }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.waterLevel, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 802,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\u26A1 Priority:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 803,\n                        columnNumber: 26\n                      }, this), \" \", emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 803,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\u23F0 Request Time:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 804,\n                        columnNumber: 26\n                      }, this), \" \", new Date(emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.createdAt).toLocaleString()]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 804,\n                      columnNumber: 23\n                    }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\uD83D\\uDCCF Distance:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 805,\n                        columnNumber: 39\n                      }, this), \" \", distance.toFixed(2), \" km\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 805,\n                      columnNumber: 36\n                    }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"\\u23F1\\uFE0F Est. Time:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 806,\n                        columnNumber: 44\n                      }, this), \" \", estimatedTime]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 806,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 800,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mt-4 p-2 bg-red-100 rounded-md\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-xs text-red-700 font-medium\",\n                      children: \"\\uD83D\\uDEA8 URGENT: Water delivery required immediately\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 810,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 809,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 791,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 11\n        }, this), directions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-800 mb-3\",\n            children: \"\\uD83E\\uDDED Turn-by-Turn Directions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-h-48 overflow-y-auto\",\n            children: directions.map((direction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-start space-x-3 py-2 border-b border-blue-100 last:border-b-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium\",\n                children: direction.step\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-blue-800 font-medium\",\n                  children: direction.instruction\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 833,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-blue-600\",\n                  children: [direction.distance, \" \\u2022 \", direction.road]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 834,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: [distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83D\\uDCCF Road distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 28\n            }, this), directions.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83E\\uDDED \", directions.length, \" turn-by-turn directions provided\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-3\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onClose,\n              className: \"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 681,\n    columnNumber: 5\n  }, this);\n};\n_s(EmergencyRouteMap, \"yPJwleZM9q8waB0DR0WM/UwUD4o=\");\n_c = EmergencyRouteMap;\nexport default EmergencyRouteMap;\nvar _c;\n$RefreshReg$(_c, \"EmergencyRouteMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","EmergencyRouteMap","emergencyRequest","branchLocation","onClose","_s","route","setRoute","loading","setLoading","error","setError","distance","setDistance","estimatedTime","setEstimatedTime","directions","setDirections","defaultCenter","emergencyCoords","setEmergencyCoords","isGeocoding","setIsGeocoding","branchCoords","lat","lng","geocodeAddress","address","console","log","strategies","split","searchQuery","response","fetch","encodeURIComponent","data","json","length","bestResult","result","city","parseFloat","lon","coords","display_name","strategyError","message","getFallbackCoordinates","addressLower","toLowerCase","areaCoordinates","area","Object","entries","includes","initializeCoordinates","coordinates","brigadeLocation","calculateRoute","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","calculateEstimatedTime","distanceKm","averageSpeed","timeInHours","hours","floor","minutes","round","calculateRoadDistance","totalDistance","i","segmentDistance","realRoute","getRealRoadRoute","roadNetwork","getColomboRoadNetwork","turnByTurnDirections","generateTurnByTurnDirections","roadDistance","calculatedTime","toFixed","routeCoordinates","createImprovedRoadRoute","warn","straightLineDistance","err","fallbackRoute","fallbackDistance","start","end","Promise","resolve","setTimeout","realisticRoute","createRealisticColomboRoute","galleRoad","segments","name","curves","point","radius","unionPlaceRoad","libertyPlazaRoad","odelCrescatRoad","findBestRoadPath","paths","isPointOnRoad","push","road","getRoadSegmentsBetweenPoints","calculatePathDistance","forEach","roadName","roadData","sort","b","some","segment","distanceToStart","distanceToEnd","segmentLength","createDetailedRouteWithCurves","roadPath","index","curve","curvePoints","generateCurvePoints","removeDuplicatePoints","numCurvePoints","t","angle","curveOffset","curvePoint","points","uniquePoints","prevPoint","currentPoint","colomboRoadNetwork","detailedRoute","nextPoint","roadSegment","findRoadSegment","direction","generateDirectionText","step","instruction","stepIndex","distanceText","latDiff","lngDiff","abs","findClosestIntersection","intersections","closest","minDistance","Infinity","getIntermediateIntersections","startName","endName","routingPatterns","patternKey","reversePatternKey","pattern","intersectionName","chathamStreet","pettah","slaveIsland","mapCenter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","brigadeName","waterLevel","priority","center","zoom","style","height","width","attribution","url","position","Date","createdAt","toLocaleString","map","_c","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/EmergencyRouteMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\nconst EmergencyRouteMap = ({ emergencyRequest, branchLocation, onClose }) => {\r\n  const [route, setRoute] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n  const [directions, setDirections] = useState([]);\r\n\r\n  // Default coordinates for Colombo, Sri Lanka\r\n  const defaultCenter = [6.9271, 79.8612];\r\n  \r\n  // Parse coordinates from emergency request with geocoding\r\n  const [emergencyCoords, setEmergencyCoords] = useState(defaultCenter);\r\n  const [isGeocoding, setIsGeocoding] = useState(false);\r\n\r\n  // Parse branch coordinates (you might need to adjust this based on your branch data structure)\r\n  const branchCoords = branchLocation ? \r\n    [branchLocation.lat || 6.9271, branchLocation.lng || 79.8612] : \r\n    defaultCenter;\r\n\r\n  // Geocode address to get actual coordinates\r\n  const geocodeAddress = async (address) => {\r\n    if (!address) return defaultCenter;\r\n    \r\n    setIsGeocoding(true);\r\n    try {\r\n      console.log('üåç Geocoding address:', address);\r\n      \r\n      // Try multiple geocoding strategies for better accuracy\r\n      const strategies = [\r\n        // Strategy 1: Full address with Sri Lanka\r\n        `${address}, Sri Lanka`,\r\n        // Strategy 2: Address with Colombo, Sri Lanka\r\n        `${address}, Colombo, Sri Lanka`,\r\n        // Strategy 3: Just the address\r\n        address,\r\n        // Strategy 4: Extract area name only\r\n        address.split(',')[0] + ', Colombo, Sri Lanka'\r\n      ];\r\n      \r\n      for (const searchQuery of strategies) {\r\n        try {\r\n          console.log(`üîç Trying geocoding strategy: \"${searchQuery}\"`);\r\n          \r\n          const response = await fetch(\r\n            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=5&countrycodes=lk&addressdetails=1`\r\n          );\r\n          \r\n          const data = await response.json();\r\n          \r\n          if (data && data.length > 0) {\r\n            // Find the best result (prefer results with address details)\r\n            let bestResult = data[0];\r\n            \r\n            for (const result of data) {\r\n              // Check if result has proper address details and is not in the sea\r\n              if (result.address && \r\n                  result.address.city && \r\n                  parseFloat(result.lat) > 6.0 && parseFloat(result.lat) < 7.5 && // Colombo area latitude\r\n                  parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 81.0) { // Colombo area longitude\r\n                bestResult = result;\r\n                break;\r\n              }\r\n            }\r\n            \r\n            const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\r\n            \r\n            // Validate coordinates are in Sri Lanka and not in the sea\r\n            if (coords[0] > 5.5 && coords[0] < 10.0 && coords[1] > 79.0 && coords[1] < 82.0) {\r\n              console.log('‚úÖ Geocoded address to coordinates:', coords);\r\n              console.log('üìç Found location:', bestResult.display_name);\r\n              return coords;\r\n            }\r\n          }\r\n        } catch (strategyError) {\r\n          console.log(`‚ö†Ô∏è Strategy failed: ${strategyError.message}`);\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      // If all strategies fail, use a fallback based on common Colombo areas\r\n      console.log('‚ö†Ô∏è All geocoding strategies failed, using area-based fallback');\r\n      return getFallbackCoordinates(address);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Geocoding failed:', error);\r\n      return getFallbackCoordinates(address);\r\n    } finally {\r\n      setIsGeocoding(false);\r\n    }\r\n  };\r\n\r\n  // Fallback coordinates for common Colombo areas\r\n  const getFallbackCoordinates = (address) => {\r\n    const addressLower = address.toLowerCase();\r\n    \r\n    // Common Colombo area coordinates\r\n    const areaCoordinates = {\r\n      'borella': [6.9047, 79.8844],\r\n      'baseline': [6.9047, 79.8844], // Baseline Road, Borella\r\n      'kollupitiya': [6.9100, 79.8500],\r\n      'bambalapitiya': [6.8900, 79.8600],\r\n      'pettah': [6.9400, 79.8500],\r\n      'fort': [6.9300, 79.8400],\r\n      'slave island': [6.9200, 79.8500],\r\n      'union place': [6.9200, 79.8500],\r\n      'liberty plaza': [6.9100, 79.8500],\r\n      'galle road': [6.9100, 79.8500],\r\n      'colombo 01': [6.9300, 79.8400],\r\n      'colombo 02': [6.9200, 79.8500],\r\n      'colombo 03': [6.9100, 79.8500],\r\n      'colombo 04': [6.9000, 79.8600],\r\n      'colombo 05': [6.8900, 79.8600],\r\n      'colombo 06': [6.8800, 79.8700],\r\n      'colombo 07': [6.8700, 79.8700],\r\n      'colombo 08': [6.9047, 79.8844], // Borella area\r\n      'colombo 09': [6.8900, 79.8800],\r\n      'colombo 10': [6.9400, 79.8500],\r\n      'colombo 11': [6.9400, 79.8500],\r\n      'colombo 12': [6.9500, 79.8400],\r\n      'colombo 13': [6.9600, 79.8300],\r\n      'colombo 14': [6.9700, 79.8200],\r\n      'colombo 15': [6.9800, 79.8100]\r\n    };\r\n    \r\n    // Find matching area\r\n    for (const [area, coords] of Object.entries(areaCoordinates)) {\r\n      if (addressLower.includes(area)) {\r\n        console.log(`üéØ Using fallback coordinates for area: ${area}`, coords);\r\n        return coords;\r\n      }\r\n    }\r\n    \r\n    // Default to Colombo center if no area match\r\n    console.log('üéØ Using default Colombo center coordinates');\r\n    return [6.9271, 79.8612];\r\n  };\r\n\r\n  // Initialize coordinates when component mounts or emergency request changes\r\n  useEffect(() => {\r\n    const initializeCoordinates = async () => {\r\n      if (emergencyRequest?.coordinates) {\r\n        // If coordinates are provided, use them\r\n        const coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n        setEmergencyCoords(coords);\r\n      } else if (emergencyRequest?.brigadeLocation) {\r\n        // If only address is provided, geocode it\r\n        const coords = await geocodeAddress(emergencyRequest.brigadeLocation);\r\n        setEmergencyCoords(coords);\r\n      } else {\r\n        setEmergencyCoords(defaultCenter);\r\n      }\r\n    };\r\n\r\n    initializeCoordinates();\r\n  }, [emergencyRequest?.coordinates, emergencyRequest?.brigadeLocation]);\r\n\r\n  // Automatically calculate route when coordinates are updated\r\n  useEffect(() => {\r\n    if (emergencyCoords && branchCoords && emergencyRequest && !loading) {\r\n      console.log('üîÑ Auto-calculating route after coordinate update');\r\n      calculateRoute();\r\n    }\r\n  }, [emergencyCoords, branchCoords]);\r\n\r\n  // Calculate distance between two points using Haversine formula\r\n  const calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n    const R = 6371; // Earth's radius in km\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  // Calculate estimated travel time (assuming average speed of 40 km/h in city traffic)\r\n  const calculateEstimatedTime = (distanceKm) => {\r\n    const averageSpeed = 40; // km/h\r\n    const timeInHours = distanceKm / averageSpeed;\r\n    const hours = Math.floor(timeInHours);\r\n    const minutes = Math.round((timeInHours - hours) * 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else {\r\n      return `${minutes}m`;\r\n    }\r\n  };\r\n\r\n  // Calculate road distance along the route\r\n  const calculateRoadDistance = (route) => {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const segmentDistance = calculateDistance(\r\n        route[i][0], route[i][1],\r\n        route[i + 1][0], route[i + 1][1]\r\n      );\r\n      totalDistance += segmentDistance;\r\n    }\r\n    return totalDistance;\r\n  };\r\n\r\n  // Calculate route using real road-based routing\r\n  const calculateRoute = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('üöÄ Starting real road route calculation...');\r\n      console.log('üìç Branch coords:', branchCoords);\r\n      console.log('üìç Emergency coords:', emergencyCoords);\r\n      \r\n      // Try to get real road route using OpenRouteService\r\n      const realRoute = await getRealRoadRoute(branchCoords, emergencyCoords);\r\n      \r\n      if (realRoute && realRoute.length > 0) {\r\n        console.log('üõ£Ô∏è Real road route obtained:', realRoute);\r\n        setRoute(realRoute);\r\n        \r\n        // Generate turn-by-turn directions using Colombo road network\r\n        const roadNetwork = getColomboRoadNetwork();\r\n        const turnByTurnDirections = generateTurnByTurnDirections(realRoute, roadNetwork);\r\n        setDirections(turnByTurnDirections);\r\n        \r\n        const roadDistance = calculateRoadDistance(realRoute);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n        \r\n        console.log(`üìç Realistic Colombo route calculated:`);\r\n        console.log(`üõ£Ô∏è Route waypoints: ${realRoute.length}`);\r\n        console.log(`üìè Road distance: ${roadDistance.toFixed(2)} km`);\r\n        console.log(`‚è±Ô∏è Estimated time: ${calculatedTime}`);\r\n        console.log(`üß≠ Turn-by-turn directions: ${turnByTurnDirections.length} steps`);\r\n      } else {\r\n        // Fallback to improved road-based route\r\n        console.log('üîÑ Falling back to improved road-based route');\r\n        const routeCoordinates = createImprovedRoadRoute(branchCoords, emergencyCoords);\r\n        \r\n        if (!routeCoordinates || routeCoordinates.length < 2) {\r\n          console.warn('‚ö†Ô∏è Invalid route generated, using simple fallback');\r\n          setRoute([branchCoords, emergencyCoords]);\r\n        } else {\r\n          setRoute(routeCoordinates);\r\n        }\r\n        \r\n        const roadDistance = calculateRoadDistance(routeCoordinates);\r\n        const calculatedTime = calculateEstimatedTime(roadDistance);\r\n        \r\n        setDistance(roadDistance);\r\n        setEstimatedTime(calculatedTime);\r\n      }\r\n      \r\n      // Compare with straight-line distance\r\n      const straightLineDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      console.log(`üìè Straight-line distance: ${straightLineDistance.toFixed(2)} km`);\r\n      \r\n    } catch (err) {\r\n      console.error('Error calculating route:', err);\r\n      setError('Failed to calculate route. Showing direct path.');\r\n      // Fallback to straight line\r\n      const fallbackRoute = [branchCoords, emergencyCoords];\r\n      setRoute(fallbackRoute);\r\n      const fallbackDistance = calculateDistance(\r\n        branchCoords[0], branchCoords[1],\r\n        emergencyCoords[0], emergencyCoords[1]\r\n      );\r\n      setDistance(fallbackDistance);\r\n      setEstimatedTime(calculateEstimatedTime(fallbackDistance));\r\n      console.log('üîÑ Using fallback route:', fallbackRoute);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get realistic road route using simulated Colombo road network\r\n  const getRealRoadRoute = async (start, end) => {\r\n    try {\r\n      console.log('üõ£Ô∏è Calculating realistic route through Colombo road network...');\r\n      \r\n      // Simulate API call delay for realism\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Use our enhanced Colombo road network for realistic routing\r\n      const realisticRoute = createRealisticColomboRoute(start, end);\r\n      \r\n      console.log('‚úÖ Realistic Colombo route calculated successfully');\r\n      console.log(`üõ£Ô∏è Route waypoints: ${realisticRoute.length}`);\r\n      console.log(`üìç Following actual Colombo roads and intersections`);\r\n      \r\n      return realisticRoute;\r\n      \r\n    } catch (error) {\r\n      console.error('üõ£Ô∏è Route calculation failed:', error);\r\n      console.log('üîÑ Using fallback route');\r\n      return createImprovedRoadRoute(start, end);\r\n    }\r\n  };\r\n\r\n\r\n  // Create improved road route (fallback)\r\n  const createImprovedRoadRoute = (start, end) => {\r\n    console.log('üõ£Ô∏è Creating improved road route...');\r\n    \r\n    // Use the realistic Colombo route as fallback\r\n    return createRealisticColomboRoute(start, end);\r\n  };\r\n\r\n  // Get Colombo road network (extracted for reuse)\r\n  const getColomboRoadNetwork = () => {\r\n    return {\r\n      // Galle Road - Main coastal road with detailed segments\r\n      galleRoad: {\r\n        segments: [\r\n          { start: [6.9280, 79.8600], end: [6.9250, 79.8580], name: \"Galle Face to Chatham Street\" },\r\n          { start: [6.9250, 79.8580], end: [6.9220, 79.8550], name: \"Chatham Street to Pettah\" },\r\n          { start: [6.9220, 79.8550], end: [6.9200, 79.8520], name: \"Pettah to Slave Island\" },\r\n          { start: [6.9200, 79.8520], end: [6.9180, 79.8490], name: \"Slave Island to Kollupitiya\" },\r\n          { start: [6.9180, 79.8490], end: [6.9150, 79.8460], name: \"Kollupitiya to Bambalapitiya\" },\r\n          { start: [6.9150, 79.8460], end: [6.9120, 79.8430], name: \"Bambalapitiya to Wellawatta\" },\r\n          { start: [6.9120, 79.8430], end: [6.9060, 79.8370], name: \"Wellawatta to Mount Lavinia\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9265, 79.8590], radius: 0.002 }, // Galle Face curve\r\n          { point: [6.9235, 79.8565], radius: 0.0015 }, // Pettah curve\r\n          { point: [6.9190, 79.8505], radius: 0.002 }, // Slave Island curve\r\n          { point: [6.9165, 79.8475], radius: 0.0015 } // Kollupitiya curve\r\n        ]\r\n      },\r\n      \r\n      // Union Place to Maradana Road\r\n      unionPlaceRoad: {\r\n        segments: [\r\n          { start: [6.9300, 79.8650], end: [6.9330, 79.8680], name: \"Union Place to Maradana\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9315, 79.8665], radius: 0.001 }\r\n        ]\r\n      },\r\n      \r\n      // Liberty Plaza Road\r\n      libertyPlazaRoad: {\r\n        segments: [\r\n          { start: [6.9180, 79.8490], end: [6.9160, 79.8470], name: \"Kollupitiya to Liberty Plaza\" },\r\n          { start: [6.9160, 79.8470], end: [6.9150, 79.8460], name: \"Liberty Plaza to Bambalapitiya\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9170, 79.8480], radius: 0.0008 }\r\n        ]\r\n      },\r\n      \r\n      // Odel to Crescat Road\r\n      odelCrescatRoad: {\r\n        segments: [\r\n          { start: [6.9140, 79.8450], end: [6.9130, 79.8440], name: \"Odel to Crescat\" },\r\n          { start: [6.9130, 79.8440], end: [6.9120, 79.8430], name: \"Crescat to Wellawatta\" }\r\n        ],\r\n        curves: [\r\n          { point: [6.9135, 79.8445], radius: 0.0005 }\r\n        ]\r\n      }\r\n    };\r\n  };\r\n\r\n  // Find the best road path between two points\r\n  const findBestRoadPath = (start, end, roadNetwork) => {\r\n    const paths = [];\r\n    \r\n    // Check if both points are on Galle Road\r\n    if (isPointOnRoad(start, roadNetwork.galleRoad) && isPointOnRoad(end, roadNetwork.galleRoad)) {\r\n      paths.push({\r\n        road: 'galleRoad',\r\n        segments: getRoadSegmentsBetweenPoints(start, end, roadNetwork.galleRoad),\r\n        distance: calculatePathDistance(start, end, roadNetwork.galleRoad)\r\n      });\r\n    }\r\n    \r\n    // Check other road combinations\r\n    Object.entries(roadNetwork).forEach(([roadName, roadData]) => {\r\n      if (roadName !== 'galleRoad') {\r\n        const distance = calculatePathDistance(start, end, roadData);\r\n        if (distance < 5) { // Within 5km\r\n          paths.push({\r\n            road: roadName,\r\n            segments: getRoadSegmentsBetweenPoints(start, end, roadData),\r\n            distance: distance\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Return the shortest path\r\n    return paths.sort((a, b) => a.distance - b.distance)[0] || {\r\n      road: 'galleRoad',\r\n      segments: roadNetwork.galleRoad.segments,\r\n      distance: calculateDistance(start[0], start[1], end[0], end[1])\r\n    };\r\n  };\r\n\r\n  // Check if a point is on a specific road\r\n  const isPointOnRoad = (point, road) => {\r\n    return road.segments.some(segment => {\r\n      const distanceToStart = calculateDistance(point[0], point[1], segment.start[0], segment.start[1]);\r\n      const distanceToEnd = calculateDistance(point[0], point[1], segment.end[0], segment.end[1]);\r\n      const segmentLength = calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n      return (distanceToStart + distanceToEnd) <= (segmentLength + 0.1); // Within 100m of road\r\n    });\r\n  };\r\n\r\n  // Get road segments between two points\r\n  const getRoadSegmentsBetweenPoints = (start, end, road) => {\r\n    // For simplicity, return all segments of the road\r\n    // In a real implementation, this would find the specific segments between the points\r\n    return road.segments;\r\n  };\r\n\r\n  // Calculate path distance\r\n  const calculatePathDistance = (start, end, road) => {\r\n    let totalDistance = 0;\r\n    road.segments.forEach(segment => {\r\n      totalDistance += calculateDistance(segment.start[0], segment.start[1], segment.end[0], segment.end[1]);\r\n    });\r\n    return totalDistance;\r\n  };\r\n\r\n  // Create detailed route with curves and road segments\r\n  const createDetailedRouteWithCurves = (start, end, roadPath, roadNetwork) => {\r\n    const route = [start];\r\n    const road = roadNetwork[roadPath.road];\r\n    \r\n    // Add road segments with curves\r\n    road.segments.forEach((segment, index) => {\r\n      // Add start of segment\r\n      route.push(segment.start);\r\n      \r\n      // Add curve points if available\r\n      if (road.curves && road.curves[index]) {\r\n        const curve = road.curves[index];\r\n        const curvePoints = generateCurvePoints(segment.start, segment.end, curve);\r\n        route.push(...curvePoints);\r\n      }\r\n      \r\n      // Add end of segment\r\n      route.push(segment.end);\r\n    });\r\n    \r\n    // Add final destination\r\n    route.push(end);\r\n    \r\n    // Remove duplicate consecutive points\r\n    return removeDuplicatePoints(route);\r\n  };\r\n\r\n  // Generate curve points between two road segments\r\n  const generateCurvePoints = (start, end, curve) => {\r\n    const curvePoints = [];\r\n    const numCurvePoints = 3; // Number of points to create the curve\r\n    \r\n    for (let i = 1; i <= numCurvePoints; i++) {\r\n      const t = i / (numCurvePoints + 1);\r\n      \r\n      // Create a curved path using the curve center and radius\r\n      const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\r\n      const curveOffset = curve.radius * Math.sin(t * Math.PI);\r\n      \r\n      const curvePoint = [\r\n        start[0] + (end[0] - start[0]) * t + curveOffset * Math.cos(angle + Math.PI/2),\r\n        start[1] + (end[1] - start[1]) * t + curveOffset * Math.sin(angle + Math.PI/2)\r\n      ];\r\n      \r\n      curvePoints.push(curvePoint);\r\n    }\r\n    \r\n    return curvePoints;\r\n  };\r\n\r\n  // Remove duplicate consecutive points\r\n  const removeDuplicatePoints = (points) => {\r\n    const uniquePoints = [points[0]];\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      const prevPoint = uniquePoints[uniquePoints.length - 1];\r\n      const currentPoint = points[i];\r\n      \r\n      const distance = calculateDistance(\r\n        prevPoint[0], prevPoint[1],\r\n        currentPoint[0], currentPoint[1]\r\n      );\r\n      \r\n      // Only add point if it's more than 10 meters away from previous point\r\n      if (distance > 0.01) {\r\n        uniquePoints.push(currentPoint);\r\n      }\r\n    }\r\n    \r\n    return uniquePoints;\r\n  };\r\n\r\n  // Create Google Maps-style realistic route with curves and road segments\r\n  const createRealisticColomboRoute = (start, end) => {\r\n    console.log('üó∫Ô∏è Creating Google Maps-style realistic route...');\r\n    \r\n    // Get detailed Colombo road network with curves and segments\r\n    const colomboRoadNetwork = getColomboRoadNetwork();\r\n    \r\n    // Find the best road path between start and end\r\n    const roadPath = findBestRoadPath(start, end, colomboRoadNetwork);\r\n    \r\n    // Create detailed route with curves and road segments\r\n    const detailedRoute = createDetailedRouteWithCurves(start, end, roadPath, colomboRoadNetwork);\r\n    \r\n    console.log(`üõ£Ô∏è Created Google Maps-style route with ${detailedRoute.length} waypoints`);\r\n    return detailedRoute;\r\n  };\r\n\r\n\r\n  // Generate turn-by-turn directions like Google Maps\r\n  const generateTurnByTurnDirections = (route, roadNetwork) => {\r\n    const directions = [];\r\n    \r\n    for (let i = 0; i < route.length - 1; i++) {\r\n      const currentPoint = route[i];\r\n      const nextPoint = route[i + 1];\r\n      \r\n      // Find which road segment this is on\r\n      const roadSegment = findRoadSegment(currentPoint, nextPoint, roadNetwork);\r\n      \r\n      if (roadSegment) {\r\n        const direction = generateDirectionText(currentPoint, nextPoint, roadSegment, i);\r\n        if (direction) {\r\n          directions.push({\r\n            step: i + 1,\r\n            instruction: direction.instruction,\r\n            distance: direction.distance,\r\n            road: roadSegment.name,\r\n            coordinates: currentPoint\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return directions;\r\n  };\r\n\r\n  // Find which road segment a route segment belongs to\r\n  const findRoadSegment = (start, end, roadNetwork) => {\r\n    for (const [roadName, roadData] of Object.entries(roadNetwork)) {\r\n      for (const segment of roadData.segments) {\r\n        const distanceToStart = calculateDistance(start[0], start[1], segment.start[0], segment.start[1]);\r\n        const distanceToEnd = calculateDistance(end[0], end[1], segment.end[0], segment.end[1]);\r\n        \r\n        if (distanceToStart < 0.1 && distanceToEnd < 0.1) { // Within 100m\r\n          return { ...segment, roadName };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Generate direction text for a route segment\r\n  const generateDirectionText = (start, end, roadSegment, stepIndex) => {\r\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\r\n    const distanceText = distance < 1 ? `${(distance * 1000).toFixed(0)}m` : `${distance.toFixed(2)}km`;\r\n    \r\n    if (stepIndex === 0) {\r\n      return {\r\n        instruction: `Start from ${roadSegment.name}`,\r\n        distance: distanceText\r\n      };\r\n    }\r\n    \r\n    // Determine direction based on coordinates\r\n    const latDiff = end[0] - start[0];\r\n    const lngDiff = end[1] - start[1];\r\n    \r\n    let direction = '';\r\n    if (Math.abs(latDiff) > Math.abs(lngDiff)) {\r\n      direction = latDiff > 0 ? 'Head south' : 'Head north';\r\n    } else {\r\n      direction = lngDiff > 0 ? 'Head east' : 'Head west';\r\n    }\r\n    \r\n    return {\r\n      instruction: `${direction} on ${roadSegment.name}`,\r\n      distance: distanceText\r\n    };\r\n  };\r\n\r\n  // Find closest intersection to a point\r\n  const findClosestIntersection = (point, intersections) => {\r\n    let closest = null;\r\n    let minDistance = Infinity;\r\n    \r\n    Object.entries(intersections).forEach(([name, coords]) => {\r\n      const distance = calculateDistance(point[0], point[1], coords[0], coords[1]);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = { name, coords, distance };\r\n      }\r\n    });\r\n    \r\n    return closest;\r\n  };\r\n\r\n  // Get intermediate intersections for routing\r\n  const getIntermediateIntersections = (startName, endName, intersections) => {\r\n    const route = [];\r\n    \r\n    // Define common routing patterns in Colombo\r\n    const routingPatterns = {\r\n      'fort-to-kollupitiya': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-bambalapitiya': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya'],\r\n      'fort-to-wellawatta': ['chathamStreet', 'pettah', 'slaveIsland', 'kollupitiya', 'bambalapitiya'],\r\n      'fort-to-maradana': ['unionPlace'],\r\n      'fort-to-borella': ['chathamStreet', 'pettah', 'slaveIsland'],\r\n      'fort-to-battaramulla': ['chathamStreet', 'pettah', 'slaveIsland', 'borella'],\r\n      'fort-to-kotte': ['chathamStreet', 'pettah', 'slaveIsland', 'borella', 'battaramulla'],\r\n      'kollupitiya-to-bambalapitiya': ['libertyPlaza'],\r\n      'bambalapitiya-to-wellawatta': ['odel', 'crescat'],\r\n      'wellawatta-to-mountLavinia': ['mountLavinia']\r\n    };\r\n    \r\n    // Find matching pattern\r\n    const patternKey = `${startName}-to-${endName}`;\r\n    const reversePatternKey = `${endName}-to-${startName}`;\r\n    \r\n    let pattern = routingPatterns[patternKey] || routingPatterns[reversePatternKey];\r\n    \r\n    if (pattern) {\r\n      pattern.forEach(intersectionName => {\r\n        if (intersections[intersectionName]) {\r\n          route.push(intersections[intersectionName]);\r\n        }\r\n      });\r\n    } else {\r\n      // Default routing through major intersections\r\n      if (startName === 'fort') {\r\n        route.push(intersections.chathamStreet);\r\n        route.push(intersections.pettah);\r\n        route.push(intersections.slaveIsland);\r\n      }\r\n    }\r\n    \r\n    return route;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Manual route calculation trigger\r\n\r\n\r\n  // Calculate center point for map\r\n  const mapCenter = [\r\n    (branchCoords[0] + emergencyCoords[0]) / 2,\r\n    (branchCoords[1] + emergencyCoords[1]) / 2\r\n  ];\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n      <div className=\"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\">\r\n        <div className=\"mt-3\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900\">\r\n              Emergency Route Map\r\n            </h3>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <h4 className=\"font-medium text-blue-900 mb-2\">Emergency Details:</h4>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <p><strong>Location:</strong> {emergencyRequest?.brigadeLocation}</p>\r\n                <p><strong>Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                <p><strong>Water Level:</strong> {emergencyRequest?.waterLevel}</p>\r\n                <p><strong>Priority:</strong> {emergencyRequest?.priority}</p>\r\n              </div>\r\n              <div>\r\n                <p><strong>Branch:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                <p><strong>Branch Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                {distance && <p><strong>Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                {estimatedTime && <p><strong>Est. Time:</strong> {estimatedTime}</p>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {loading && (\r\n            <div className=\"text-center py-4\">\r\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n              <p className=\"mt-2 text-gray-600\">Calculating route...</p>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md\">\r\n              <p className=\"text-yellow-800\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Route Information */}\r\n          <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-md\">\r\n            <h4 className=\"font-medium text-green-700 mb-3\">üõ£Ô∏è Emergency Water Delivery Route</h4>\r\n            \r\n            {/* Destination Address - Most Prominent */}\r\n            <div className=\"mb-3 p-3 bg-white border border-green-300 rounded-md\">\r\n              <p className=\"text-sm font-medium text-green-800 mb-1\">üìç DESTINATION ADDRESS:</p>\r\n              <p className=\"text-base font-bold text-gray-900\">{emergencyRequest?.brigadeLocation}</p>\r\n              {isGeocoding && (\r\n                <div className=\"mt-2 flex items-center text-blue-600\">\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\r\n                  <span className=\"text-sm\">Automatically finding exact location...</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"text-sm space-y-1\">\r\n              <p><strong>üè¢ Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n              <p><strong>üöö Starting Point:</strong> Colombo Central Branch</p>\r\n              <p><strong>üåç Map Location:</strong> {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}</p>\r\n              {isGeocoding && (\r\n                <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md\">\r\n                  <p className=\"text-sm text-blue-700\">üîç Auto-geocoding in progress...</p>\r\n                  <p className=\"text-xs text-blue-600\">Finding exact location for: {emergencyRequest?.brigadeLocation}</p>\r\n                </div>\r\n              )}\r\n              {route && route.length > 0 && (\r\n                <div className=\"mt-2 pt-2 border-t border-green-200\">\r\n                  <p><strong>üìè Road Distance:</strong> {distance ? `${distance.toFixed(2)} km` : 'Auto-calculating...'}</p>\r\n                  <p><strong>‚è±Ô∏è Estimated Time:</strong> {estimatedTime || 'Auto-calculating...'}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"h-96 w-full border border-gray-300 rounded-md\">\r\n            <MapContainer\r\n              center={mapCenter}\r\n              zoom={12}\r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              \r\n              {/* Branch Marker */}\r\n              <Marker position={branchCoords}>\r\n                <Popup>\r\n                  <div className=\"p-2\">\r\n                    <h4 className=\"font-medium text-green-700\">üè¢ Your Branch</h4>\r\n                    <p className=\"text-sm\"><strong>Name:</strong> {branchLocation?.name || 'Colombo Central Branch'}</p>\r\n                    <p className=\"text-sm\"><strong>Address:</strong> {branchLocation?.address || '123 Galle Road, Colombo 07'}</p>\r\n                    <p className=\"text-sm\"><strong>Coordinates:</strong> {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}</p>\r\n                    <p className=\"text-xs text-gray-600 mt-1\">üìç Starting point for emergency delivery</p>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* Emergency Location Marker */}\r\n              <Marker position={emergencyCoords}>\r\n                <Popup>\r\n                  <div className=\"p-4 text-center max-w-sm\">\r\n                    <h4 className=\"font-bold text-red-600 text-lg mb-3\">üî•üöí Emergency Water Request</h4>\r\n                    \r\n                    {/* Address Display - Most Prominent */}\r\n                    <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\r\n                      <p className=\"text-sm font-medium text-yellow-800 mb-1\">üìç DESTINATION ADDRESS:</p>\r\n                      <p className=\"text-base font-bold text-gray-900 leading-tight\">{emergencyRequest?.brigadeLocation}</p>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2 text-sm\">\r\n                      <p><strong>üè¢ Brigade:</strong> {emergencyRequest?.brigadeName}</p>\r\n                      <p><strong>üíß Water Level:</strong> {emergencyRequest?.waterLevel}%</p>\r\n                      <p><strong>‚ö° Priority:</strong> {emergencyRequest?.priority}</p>\r\n                      <p><strong>‚è∞ Request Time:</strong> {new Date(emergencyRequest?.createdAt).toLocaleString()}</p>\r\n                      {distance && <p><strong>üìè Distance:</strong> {distance.toFixed(2)} km</p>}\r\n                      {estimatedTime && <p><strong>‚è±Ô∏è Est. Time:</strong> {estimatedTime}</p>}\r\n                    </div>\r\n                    \r\n                    <div className=\"mt-4 p-2 bg-red-100 rounded-md\">\r\n                      <p className=\"text-xs text-red-700 font-medium\">üö® URGENT: Water delivery required immediately</p>\r\n                    </div>\r\n                  </div>\r\n                </Popup>\r\n              </Marker>\r\n              \r\n              {/* No route lines - focus on navigation details */}\r\n              \r\n              {/* Focus on navigation details - no waypoint markers */}\r\n            </MapContainer>\r\n          </div>\r\n\r\n          {/* Turn-by-Turn Directions Panel */}\r\n          {directions.length > 0 && (\r\n            <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md\">\r\n              <h4 className=\"font-medium text-blue-800 mb-3\">üß≠ Turn-by-Turn Directions</h4>\r\n              <div className=\"max-h-48 overflow-y-auto\">\r\n                {directions.map((direction, index) => (\r\n                  <div key={index} className=\"flex items-start space-x-3 py-2 border-b border-blue-100 last:border-b-0\">\r\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-medium\">\r\n                      {direction.step}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"text-sm text-blue-800 font-medium\">{direction.instruction}</p>\r\n                      <p className=\"text-xs text-blue-600\">{direction.distance} ‚Ä¢ {direction.road}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mt-4 flex justify-between items-center\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              {distance && <p>üìè Road distance: {distance.toFixed(2)} km</p>}\r\n              {directions.length > 0 && <p>üß≠ {directions.length} turn-by-turn directions provided</p>}\r\n            </div>\r\n            <div className=\"flex space-x-3\">\r\n              <button\r\n                onClick={onClose}\r\n                className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmergencyRouteMap;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}