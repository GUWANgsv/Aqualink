{"ast":null,"code":"var _jsxFileName = \"E:\\\\Y2S2\\\\Project\\\\frontend\\\\src\\\\Components\\\\Driver\\\\InteractiveMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Custom icons for different markers\nconst createCustomIcon = (color, iconType) => {\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 30px;\n        height: 30px;\n        border-radius: 50% 50% 50% 0;\n        border: 3px solid white;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 14px;\n        color: white;\n        transform: rotate(-45deg);\n      \">\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\n      </div>\n    `,\n    iconSize: [30, 30],\n    iconAnchor: [15, 30]\n  });\n};\nconst branchIcon = createCustomIcon('#3B82F6', 'üè¢');\nconst emergencyIcon = createCustomIcon('#EF4444', 'üö®');\nconst exactEmergencyIcon = createCustomIcon('#DC2626', 'üéØ'); // Darker red for exact locations\nconst driverIcon = createCustomIcon('#10B981', 'üöö');\n\n// Component to handle map updates\nconst MapUpdater = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (center && zoom) {\n      map.setView(center, zoom);\n    }\n  }, [center, zoom, map]);\n  return null;\n};\n\n// Function to get exact coordinates for specific known addresses\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nconst getExactCoordinatesForAddress = address => {\n  if (!address) return null;\n  const addressLower = address.toLowerCase();\n  console.log('üîç Checking address for exact coordinates:', address);\n  console.log('üîç Address in lowercase:', addressLower);\n\n  // Check for specific known addresses with exact coordinates\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\n    console.log('üéØ Found exact address: Maradana, Baseline Road, Colombo 10');\n    console.log('üìç Returning exact coordinates: [6.9400, 79.8500]');\n    return [6.9400, 79.8500]; // Exact coordinates for Maradana, Baseline Road, Colombo 10\n  }\n\n  // Add more specific addresses here as needed\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\n    console.log('üéØ Found exact address: Maharagama High Level Road');\n    return [6.8481, 79.9285];\n  }\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\n    console.log('üéØ Found exact address: Borella Baseline Road');\n    return [6.9047, 79.8844];\n  }\n  console.log('‚ùå No exact match found for address:', address);\n  return null; // No exact match found\n};\n\n// Function to geocode any address to get exact coordinates\nconst geocodeAddress = async address => {\n  if (!address) return null;\n  try {\n    console.log('üåç Geocoding address:', address);\n\n    // Try multiple search strategies\n    const searchQueries = [`${address}, Sri Lanka`, `${address}, Colombo, Sri Lanka`, address, address.split(',')[0] + ', Colombo, Sri Lanka'];\n    for (const searchQuery of searchQueries) {\n      try {\n        console.log(`üîç Trying geocoding: \"${searchQuery}\"`);\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=5&countrycodes=lk&addressdetails=1`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          let bestResult = data[0];\n\n          // Find the best result within Sri Lanka bounds\n          for (const result of data) {\n            if (result.address && parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 && parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0) {\n              bestResult = result;\n              console.log('üéØ Found Sri Lankan location:', result.display_name);\n              break;\n            }\n          }\n          const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\n          if (coords[0] > 5.5 && coords[0] < 10.0 && coords[1] > 79.0 && coords[1] < 82.0) {\n            console.log('‚úÖ Geocoded coordinates:', coords);\n            return coords;\n          }\n        }\n      } catch (strategyError) {\n        console.log(`‚ö†Ô∏è Geocoding strategy failed: ${strategyError.message}`);\n        continue;\n      }\n    }\n    console.log('‚ö†Ô∏è All geocoding attempts failed');\n    return null;\n  } catch (error) {\n    console.error('‚ùå Geocoding failed:', error);\n    return null;\n  }\n};\n\n// Component to generate emergency location (exact or random)\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\n  // First, try to get exact coordinates for the address\n  if (address) {\n    const exactCoords = getExactCoordinatesForAddress(address);\n    if (exactCoords) {\n      console.log('üìç Using exact coordinates for address:', address);\n      return exactCoords;\n    }\n  }\n\n  // If no exact match, generate random location within distance\n  console.log('üé≤ Generating random location within', maxDistanceKm, 'km');\n  const R = 6371; // Earth's radius in km\n\n  // Convert to radians\n  const lat1 = branchCoords[0] * Math.PI / 180;\n  const lng1 = branchCoords[1] * Math.PI / 180;\n\n  // Generate random distance (0 to maxDistanceKm)\n  const distance = Math.random() * maxDistanceKm;\n\n  // Generate random bearing (0 to 2œÄ)\n  const bearing = Math.random() * 2 * Math.PI;\n\n  // Calculate new coordinates\n  const lat2 = Math.asin(Math.sin(lat1) * Math.cos(distance / R) + Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing));\n  const lng2 = lng1 + Math.atan2(Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1), Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2));\n  return [lat2 * 180 / Math.PI, lng2 * 180 / Math.PI];\n};\n\n// Calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst InteractiveMap = ({\n  branchLocation,\n  emergencyRequest,\n  showRoute = false,\n  onRouteCalculated,\n  onEmergencyLocationGenerated\n}) => {\n  _s2();\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\n  const [route, setRoute] = useState([]);\n  const [distance, setDistance] = useState(null);\n  const [estimatedTime, setEstimatedTime] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\n  const [mapZoom, setMapZoom] = useState(12);\n  const [isGeocoding, setIsGeocoding] = useState(false);\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\n  const mapRef = useRef(null);\n\n  // Colombo 7 branch coordinates (more accurate)\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\n\n  // Default branch location if not provided\n  const defaultBranchLocation = {\n    name: 'Colombo 7 Branch',\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\n    coordinates: colombo7BranchCoords\n  };\n  const branch = branchLocation || defaultBranchLocation;\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\n\n  // Generate emergency location when emergency request is provided\n  useEffect(() => {\n    const processEmergencyLocation = async () => {\n      console.log('üöÄ Processing emergency location...');\n      console.log('üìã Emergency request:', emergencyRequest);\n      console.log('üìç Current emergency coords:', emergencyCoords);\n      if (emergencyRequest && !emergencyCoords) {\n        let coords;\n        let locationType = 'generated';\n        console.log('üîç Emergency request found, processing location...');\n        if (emergencyRequest.coordinates) {\n          // Use provided coordinates\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\n          locationType = 'provided';\n          console.log('üìç Using provided coordinates:', coords);\n        } else if (emergencyRequest.brigadeLocation) {\n          console.log('üè† Address provided:', emergencyRequest.brigadeLocation);\n\n          // Try to get exact coordinates for the address first\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\n          console.log('üéØ Exact coords result:', exactCoords);\n          if (exactCoords) {\n            coords = exactCoords;\n            locationType = 'exact';\n            console.log('‚úÖ Using exact coordinates for address:', emergencyRequest.brigadeLocation, '->', coords);\n          } else {\n            // Try to geocode the address to get real coordinates\n            console.log('üåç Attempting to geocode address:', emergencyRequest.brigadeLocation);\n            setIsGeocoding(true);\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\n            setIsGeocoding(false);\n            if (geocodedCoords) {\n              coords = geocodedCoords;\n              locationType = 'geocoded';\n              console.log('‚úÖ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\n            } else {\n              // Fallback: Generate random location within 30km\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\n              locationType = 'generated';\n              console.log('üé≤ Generated random emergency location within 30km:', coords);\n            }\n          }\n        } else {\n          // No address provided, generate random location\n          coords = generateEmergencyLocation(branchCoords, 30);\n          locationType = 'generated';\n          console.log('üé≤ Generated random emergency location within 30km (no address):', coords);\n        }\n\n        // Set the generated location state\n        const locationData = {\n          lat: coords[0],\n          lng: coords[1],\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\n          type: locationType\n        };\n        setGeneratedEmergencyLocation(locationData);\n\n        // Notify parent component about generated location\n        if (onEmergencyLocationGenerated) {\n          onEmergencyLocationGenerated(locationData);\n        }\n        setEmergencyCoords(coords);\n\n        // Debug: Log the coordinates being used\n        console.log('üó∫Ô∏è Emergency location coordinates set:', coords);\n        console.log('üìç Address:', emergencyRequest.brigadeLocation);\n        console.log('üéØ Location type:', locationType);\n        console.log('üîç Final coordinates for map marker:', coords);\n        console.log('üìä Location data object:', locationData);\n\n        // Calculate distance\n        const calculatedDistance = calculateDistance(branchCoords[0], branchCoords[1], coords[0], coords[1]);\n        setDistance(calculatedDistance);\n\n        // Calculate estimated time (assuming 40 km/h average speed)\n        const timeInHours = calculatedDistance / 40;\n        const hours = Math.floor(timeInHours);\n        const minutes = Math.round((timeInHours - hours) * 60);\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n        setEstimatedTime(timeString);\n\n        // Update map center to show both locations\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\n        setMapCenter([centerLat, centerLng]);\n        setMapZoom(11);\n      }\n    };\n    processEmergencyLocation();\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\n\n  // Calculate route when showRoute is true\n  useEffect(() => {\n    if (showRoute && emergencyCoords && branchCoords) {\n      calculateRoute();\n    }\n  }, [showRoute, emergencyCoords, branchCoords]);\n  const calculateRoute = async () => {\n    if (!emergencyCoords || !branchCoords) return;\n    setLoading(true);\n    try {\n      // Create a simple route with waypoints\n      const routePoints = [branchCoords, [(branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01, (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01], emergencyCoords];\n      setRoute(routePoints);\n\n      // Calculate road distance (approximate)\n      let roadDistance = 0;\n      for (let i = 0; i < routePoints.length - 1; i++) {\n        roadDistance += calculateDistance(routePoints[i][0], routePoints[i][1], routePoints[i + 1][0], routePoints[i + 1][1]);\n      }\n\n      // Add some road factor (roads are not straight lines)\n      roadDistance *= 1.3; // 30% longer than straight line\n      setDistance(roadDistance);\n\n      // Calculate estimated time\n      const timeInHours = roadDistance / 40; // 40 km/h average\n      const hours = Math.floor(timeInHours);\n      const minutes = Math.round((timeInHours - hours) * 60);\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n      setEstimatedTime(timeString);\n\n      // Notify parent component\n      if (onRouteCalculated) {\n        onRouteCalculated({\n          distance: roadDistance,\n          estimatedTime: timeString,\n          route: routePoints\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating route:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-96 border border-gray-300 rounded-lg overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef,\n      center: mapCenter,\n      zoom: mapZoom,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(MapUpdater, {\n        center: mapCenter,\n        zoom: mapZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: branchCoords,\n        icon: branchIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-blue-600\",\n              children: [\"\\uD83C\\uDFE2 \", branch.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: branch.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", branchCoords[0].toFixed(6), \", \", branchCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), emergencyCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: emergencyCoords,\n        icon: (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'exact' || (generatedEmergencyLocation === null || generatedEmergencyLocation === void 0 ? void 0 : generatedEmergencyLocation.type) === 'geocoded' ? exactEmergencyIcon : emergencyIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-red-600\",\n              children: \"\\uD83D\\uDEA8 Emergency Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName) || 'Emergency Request'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600\",\n              children: (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) || 'Generated Location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"\\uD83D\\uDCCD \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this), generatedEmergencyLocation && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: generatedEmergencyLocation.type === 'exact' ? '‚úÖ Exact location' : generatedEmergencyLocation.type === 'geocoded' ? 'üåç Geocoded location' : generatedEmergencyLocation.type === 'provided' ? 'üìç Provided coordinates' : 'üé≤ Generated location'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-blue-600 mt-1\",\n              children: [\"\\uD83D\\uDCCF Distance: \", distance.toFixed(2), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 19\n            }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-green-600\",\n              children: [\"\\u23F1\\uFE0F Est. Time: \", estimatedTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this), showRoute && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"#3B82F6\",\n        weight: 4,\n        opacity: 0.8,\n        dashArray: \"10, 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this), (loading || isGeocoding) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: isGeocoding ? 'Finding exact location...' : 'Calculating route...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold text-gray-800 mb-2\",\n        children: \"\\uD83D\\uDCCD Route Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm space-y-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"From:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 14\n          }, this), \" \", branch.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"To:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 14\n          }, this), \" \", (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeName) || 'Emergency Location']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.brigadeLocation) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 50\n          }, this), \" \", emergencyRequest.brigadeLocation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), emergencyCoords && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Map Coords:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 50\n          }, this), \" \", emergencyCoords[0].toFixed(6), \", \", emergencyCoords[1].toFixed(6)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), generatedEmergencyLocation && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `text-xs font-medium ${generatedEmergencyLocation.type === 'exact' ? 'text-green-600' : generatedEmergencyLocation.type === 'geocoded' ? 'text-blue-600' : generatedEmergencyLocation.type === 'provided' ? 'text-blue-600' : 'text-orange-600'}`,\n          children: generatedEmergencyLocation.type === 'exact' ? '‚úÖ Exact location' : generatedEmergencyLocation.type === 'geocoded' ? 'üåç Geocoded location' : generatedEmergencyLocation.type === 'provided' ? 'üìç Provided coordinates' : 'üé≤ Generated location'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), distance && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Distance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 16\n          }, this), \" \", distance.toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this), estimatedTime && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Est. Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 16\n          }, this), \" \", estimatedTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this), (emergencyRequest === null || emergencyRequest === void 0 ? void 0 : emergencyRequest.priority) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `text-xs px-2 py-1 rounded ${emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' : emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' : 'bg-yellow-100 text-yellow-800'}`,\n          children: [\"Priority: \", emergencyRequest.priority]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s2(InteractiveMap, \"fvCVIVj+0UpGTKBzeourP/wmeCs=\");\n_c2 = InteractiveMap;\nexport default InteractiveMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"InteractiveMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","iconType","divIcon","className","html","iconSize","iconAnchor","branchIcon","emergencyIcon","exactEmergencyIcon","driverIcon","MapUpdater","center","zoom","_s","map","setView","_c","getExactCoordinatesForAddress","address","addressLower","toLowerCase","console","log","includes","geocodeAddress","searchQueries","split","searchQuery","response","fetch","encodeURIComponent","data","json","length","bestResult","result","parseFloat","lat","lon","display_name","coords","strategyError","message","error","generateEmergencyLocation","branchCoords","maxDistanceKm","exactCoords","R","lat1","Math","PI","lng1","distance","random","bearing","lat2","asin","sin","cos","lng2","atan2","calculateDistance","dLat","dLng","a","c","sqrt","InteractiveMap","branchLocation","emergencyRequest","showRoute","onRouteCalculated","onEmergencyLocationGenerated","_s2","emergencyCoords","setEmergencyCoords","route","setRoute","setDistance","estimatedTime","setEstimatedTime","loading","setLoading","mapCenter","setMapCenter","mapZoom","setMapZoom","isGeocoding","setIsGeocoding","generatedEmergencyLocation","setGeneratedEmergencyLocation","mapRef","colombo7BranchCoords","defaultBranchLocation","name","coordinates","branch","processEmergencyLocation","locationType","lng","brigadeLocation","geocodedCoords","locationData","type","calculatedDistance","timeInHours","hours","floor","minutes","round","timeString","centerLat","centerLng","calculateRoute","routePoints","roadDistance","i","children","ref","style","height","width","scrollWheelZoom","fileName","_jsxFileName","lineNumber","columnNumber","attribution","url","position","icon","toFixed","brigadeName","positions","weight","opacity","dashArray","priority","_c2","$RefreshReg$"],"sources":["E:/Y2S2/Project/frontend/src/Components/Driver/InteractiveMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Custom icons for different markers\r\nconst createCustomIcon = (color, iconType) => {\r\n  return L.divIcon({\r\n    className: 'custom-div-icon',\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50% 50% 50% 0;\r\n        border: 3px solid white;\r\n        box-shadow: 0 2px 6px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 14px;\r\n        color: white;\r\n        transform: rotate(-45deg);\r\n      \">\r\n        <span style=\"transform: rotate(45deg);\">${iconType}</span>\r\n      </div>\r\n    `,\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30],\r\n  });\r\n};\r\n\r\nconst branchIcon = createCustomIcon('#3B82F6', 'üè¢');\r\nconst emergencyIcon = createCustomIcon('#EF4444', 'üö®');\r\nconst exactEmergencyIcon = createCustomIcon('#DC2626', 'üéØ'); // Darker red for exact locations\r\nconst driverIcon = createCustomIcon('#10B981', 'üöö');\r\n\r\n// Component to handle map updates\r\nconst MapUpdater = ({ center, zoom }) => {\r\n  const map = useMap();\r\n  \r\n  useEffect(() => {\r\n    if (center && zoom) {\r\n      map.setView(center, zoom);\r\n    }\r\n  }, [center, zoom, map]);\r\n  \r\n  return null;\r\n};\r\n\r\n// Function to get exact coordinates for specific known addresses\r\nconst getExactCoordinatesForAddress = (address) => {\r\n  if (!address) return null;\r\n  \r\n  const addressLower = address.toLowerCase();\r\n  console.log('üîç Checking address for exact coordinates:', address);\r\n  console.log('üîç Address in lowercase:', addressLower);\r\n  \r\n  // Check for specific known addresses with exact coordinates\r\n  if (addressLower.includes('maradana') && addressLower.includes('baseline road') && addressLower.includes('colombo 10')) {\r\n    console.log('üéØ Found exact address: Maradana, Baseline Road, Colombo 10');\r\n    console.log('üìç Returning exact coordinates: [6.9400, 79.8500]');\r\n    return [6.9400, 79.8500]; // Exact coordinates for Maradana, Baseline Road, Colombo 10\r\n  }\r\n  \r\n  // Add more specific addresses here as needed\r\n  if (addressLower.includes('maharagama') && addressLower.includes('high level road')) {\r\n    console.log('üéØ Found exact address: Maharagama High Level Road');\r\n    return [6.8481, 79.9285];\r\n  }\r\n  \r\n  if (addressLower.includes('borella') && addressLower.includes('baseline road')) {\r\n    console.log('üéØ Found exact address: Borella Baseline Road');\r\n    return [6.9047, 79.8844];\r\n  }\r\n  \r\n  console.log('‚ùå No exact match found for address:', address);\r\n  return null; // No exact match found\r\n};\r\n\r\n// Function to geocode any address to get exact coordinates\r\nconst geocodeAddress = async (address) => {\r\n  if (!address) return null;\r\n  \r\n  try {\r\n    console.log('üåç Geocoding address:', address);\r\n    \r\n    // Try multiple search strategies\r\n    const searchQueries = [\r\n      `${address}, Sri Lanka`,\r\n      `${address}, Colombo, Sri Lanka`,\r\n      address,\r\n      address.split(',')[0] + ', Colombo, Sri Lanka'\r\n    ];\r\n    \r\n    for (const searchQuery of searchQueries) {\r\n      try {\r\n        console.log(`üîç Trying geocoding: \"${searchQuery}\"`);\r\n        \r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=5&countrycodes=lk&addressdetails=1`\r\n        );\r\n        \r\n        const data = await response.json();\r\n        \r\n        if (data && data.length > 0) {\r\n          let bestResult = data[0];\r\n          \r\n          // Find the best result within Sri Lanka bounds\r\n          for (const result of data) {\r\n            if (result.address && \r\n                parseFloat(result.lat) > 5.5 && parseFloat(result.lat) < 10.0 &&\r\n                parseFloat(result.lon) > 79.0 && parseFloat(result.lon) < 82.0) {\r\n              bestResult = result;\r\n              console.log('üéØ Found Sri Lankan location:', result.display_name);\r\n              break;\r\n            }\r\n          }\r\n          \r\n          const coords = [parseFloat(bestResult.lat), parseFloat(bestResult.lon)];\r\n          \r\n          if (coords[0] > 5.5 && coords[0] < 10.0 && coords[1] > 79.0 && coords[1] < 82.0) {\r\n            console.log('‚úÖ Geocoded coordinates:', coords);\r\n            return coords;\r\n          }\r\n        }\r\n      } catch (strategyError) {\r\n        console.log(`‚ö†Ô∏è Geocoding strategy failed: ${strategyError.message}`);\r\n        continue;\r\n      }\r\n    }\r\n    \r\n    console.log('‚ö†Ô∏è All geocoding attempts failed');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Geocoding failed:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Component to generate emergency location (exact or random)\r\nconst generateEmergencyLocation = (branchCoords, maxDistanceKm = 30, address = null) => {\r\n  // First, try to get exact coordinates for the address\r\n  if (address) {\r\n    const exactCoords = getExactCoordinatesForAddress(address);\r\n    if (exactCoords) {\r\n      console.log('üìç Using exact coordinates for address:', address);\r\n      return exactCoords;\r\n    }\r\n  }\r\n  \r\n  // If no exact match, generate random location within distance\r\n  console.log('üé≤ Generating random location within', maxDistanceKm, 'km');\r\n  const R = 6371; // Earth's radius in km\r\n  \r\n  // Convert to radians\r\n  const lat1 = branchCoords[0] * Math.PI / 180;\r\n  const lng1 = branchCoords[1] * Math.PI / 180;\r\n  \r\n  // Generate random distance (0 to maxDistanceKm)\r\n  const distance = Math.random() * maxDistanceKm;\r\n  \r\n  // Generate random bearing (0 to 2œÄ)\r\n  const bearing = Math.random() * 2 * Math.PI;\r\n  \r\n  // Calculate new coordinates\r\n  const lat2 = Math.asin(\r\n    Math.sin(lat1) * Math.cos(distance / R) +\r\n    Math.cos(lat1) * Math.sin(distance / R) * Math.cos(bearing)\r\n  );\r\n  \r\n  const lng2 = lng1 + Math.atan2(\r\n    Math.sin(bearing) * Math.sin(distance / R) * Math.cos(lat1),\r\n    Math.cos(distance / R) - Math.sin(lat1) * Math.sin(lat2)\r\n  );\r\n  \r\n  return [\r\n    lat2 * 180 / Math.PI,\r\n    lng2 * 180 / Math.PI\r\n  ];\r\n};\r\n\r\n// Calculate distance between two points using Haversine formula\r\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n  const R = 6371; // Earth's radius in km\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n};\r\n\r\nconst InteractiveMap = ({ \r\n  branchLocation, \r\n  emergencyRequest, \r\n  showRoute = false,\r\n  onRouteCalculated,\r\n  onEmergencyLocationGenerated \r\n}) => {\r\n  const [emergencyCoords, setEmergencyCoords] = useState(null);\r\n  const [route, setRoute] = useState([]);\r\n  const [distance, setDistance] = useState(null);\r\n  const [estimatedTime, setEstimatedTime] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [mapCenter, setMapCenter] = useState([6.9271, 79.8612]); // Colombo center\r\n  const [mapZoom, setMapZoom] = useState(12);\r\n  const [isGeocoding, setIsGeocoding] = useState(false);\r\n  const [generatedEmergencyLocation, setGeneratedEmergencyLocation] = useState(null);\r\n  \r\n  const mapRef = useRef(null);\r\n\r\n  // Colombo 7 branch coordinates (more accurate)\r\n  const colombo7BranchCoords = [6.8700, 79.8700]; // Dehiwala area coordinates\r\n  \r\n  // Default branch location if not provided\r\n  const defaultBranchLocation = {\r\n    name: 'Colombo 7 Branch',\r\n    address: '123 Galle Road, Colombo 07, Sri Lanka',\r\n    coordinates: colombo7BranchCoords\r\n  };\r\n\r\n  const branch = branchLocation || defaultBranchLocation;\r\n  const branchCoords = branch.coordinates || colombo7BranchCoords;\r\n\r\n  // Generate emergency location when emergency request is provided\r\n  useEffect(() => {\r\n    const processEmergencyLocation = async () => {\r\n      console.log('üöÄ Processing emergency location...');\r\n      console.log('üìã Emergency request:', emergencyRequest);\r\n      console.log('üìç Current emergency coords:', emergencyCoords);\r\n      \r\n      if (emergencyRequest && !emergencyCoords) {\r\n        let coords;\r\n        let locationType = 'generated';\r\n        \r\n        console.log('üîç Emergency request found, processing location...');\r\n        \r\n        if (emergencyRequest.coordinates) {\r\n          // Use provided coordinates\r\n          coords = [emergencyRequest.coordinates.lat, emergencyRequest.coordinates.lng];\r\n          locationType = 'provided';\r\n          console.log('üìç Using provided coordinates:', coords);\r\n        } else if (emergencyRequest.brigadeLocation) {\r\n          console.log('üè† Address provided:', emergencyRequest.brigadeLocation);\r\n          \r\n          // Try to get exact coordinates for the address first\r\n          const exactCoords = getExactCoordinatesForAddress(emergencyRequest.brigadeLocation);\r\n          console.log('üéØ Exact coords result:', exactCoords);\r\n          \r\n          if (exactCoords) {\r\n            coords = exactCoords;\r\n            locationType = 'exact';\r\n            console.log('‚úÖ Using exact coordinates for address:', emergencyRequest.brigadeLocation, '->', coords);\r\n          } else {\r\n            // Try to geocode the address to get real coordinates\r\n            console.log('üåç Attempting to geocode address:', emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(true);\r\n            const geocodedCoords = await geocodeAddress(emergencyRequest.brigadeLocation);\r\n            setIsGeocoding(false);\r\n            \r\n            if (geocodedCoords) {\r\n              coords = geocodedCoords;\r\n              locationType = 'geocoded';\r\n              console.log('‚úÖ Successfully geocoded address:', emergencyRequest.brigadeLocation, 'to:', coords);\r\n            } else {\r\n              // Fallback: Generate random location within 30km\r\n              coords = generateEmergencyLocation(branchCoords, 30, emergencyRequest.brigadeLocation);\r\n              locationType = 'generated';\r\n              console.log('üé≤ Generated random emergency location within 30km:', coords);\r\n            }\r\n          }\r\n        } else {\r\n          // No address provided, generate random location\r\n          coords = generateEmergencyLocation(branchCoords, 30);\r\n          locationType = 'generated';\r\n          console.log('üé≤ Generated random emergency location within 30km (no address):', coords);\r\n        }\r\n        \r\n        // Set the generated location state\r\n        const locationData = {\r\n          lat: coords[0],\r\n          lng: coords[1],\r\n          address: emergencyRequest.brigadeLocation || 'Generated Emergency Location',\r\n          type: locationType\r\n        };\r\n        setGeneratedEmergencyLocation(locationData);\r\n        \r\n        // Notify parent component about generated location\r\n        if (onEmergencyLocationGenerated) {\r\n          onEmergencyLocationGenerated(locationData);\r\n        }\r\n        \r\n        setEmergencyCoords(coords);\r\n        \r\n        // Debug: Log the coordinates being used\r\n        console.log('üó∫Ô∏è Emergency location coordinates set:', coords);\r\n        console.log('üìç Address:', emergencyRequest.brigadeLocation);\r\n        console.log('üéØ Location type:', locationType);\r\n        console.log('üîç Final coordinates for map marker:', coords);\r\n        console.log('üìä Location data object:', locationData);\r\n        \r\n        // Calculate distance\r\n        const calculatedDistance = calculateDistance(\r\n          branchCoords[0], branchCoords[1],\r\n          coords[0], coords[1]\r\n        );\r\n        setDistance(calculatedDistance);\r\n        \r\n        // Calculate estimated time (assuming 40 km/h average speed)\r\n        const timeInHours = calculatedDistance / 40;\r\n        const hours = Math.floor(timeInHours);\r\n        const minutes = Math.round((timeInHours - hours) * 60);\r\n        const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n        setEstimatedTime(timeString);\r\n        \r\n        // Update map center to show both locations\r\n        const centerLat = (branchCoords[0] + coords[0]) / 2;\r\n        const centerLng = (branchCoords[1] + coords[1]) / 2;\r\n        setMapCenter([centerLat, centerLng]);\r\n        setMapZoom(11);\r\n      }\r\n    };\r\n\r\n    processEmergencyLocation();\r\n  }, [emergencyRequest, branchCoords, emergencyCoords, onEmergencyLocationGenerated]);\r\n\r\n  // Calculate route when showRoute is true\r\n  useEffect(() => {\r\n    if (showRoute && emergencyCoords && branchCoords) {\r\n      calculateRoute();\r\n    }\r\n  }, [showRoute, emergencyCoords, branchCoords]);\r\n\r\n  const calculateRoute = async () => {\r\n    if (!emergencyCoords || !branchCoords) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Create a simple route with waypoints\r\n      const routePoints = [\r\n        branchCoords,\r\n        [\r\n          (branchCoords[0] + emergencyCoords[0]) / 2 + (Math.random() - 0.5) * 0.01,\r\n          (branchCoords[1] + emergencyCoords[1]) / 2 + (Math.random() - 0.5) * 0.01\r\n        ],\r\n        emergencyCoords\r\n      ];\r\n      \r\n      setRoute(routePoints);\r\n      \r\n      // Calculate road distance (approximate)\r\n      let roadDistance = 0;\r\n      for (let i = 0; i < routePoints.length - 1; i++) {\r\n        roadDistance += calculateDistance(\r\n          routePoints[i][0], routePoints[i][1],\r\n          routePoints[i + 1][0], routePoints[i + 1][1]\r\n        );\r\n      }\r\n      \r\n      // Add some road factor (roads are not straight lines)\r\n      roadDistance *= 1.3; // 30% longer than straight line\r\n      setDistance(roadDistance);\r\n      \r\n      // Calculate estimated time\r\n      const timeInHours = roadDistance / 40; // 40 km/h average\r\n      const hours = Math.floor(timeInHours);\r\n      const minutes = Math.round((timeInHours - hours) * 60);\r\n      const timeString = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\r\n      setEstimatedTime(timeString);\r\n      \r\n      // Notify parent component\r\n      if (onRouteCalculated) {\r\n        onRouteCalculated({\r\n          distance: roadDistance,\r\n          estimatedTime: timeString,\r\n          route: routePoints\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error calculating route:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-96 border border-gray-300 rounded-lg overflow-hidden\">\r\n      <MapContainer\r\n        ref={mapRef}\r\n        center={mapCenter}\r\n        zoom={mapZoom}\r\n        style={{ height: '100%', width: '100%' }}\r\n        scrollWheelZoom={true}\r\n      >\r\n        <MapUpdater center={mapCenter} zoom={mapZoom} />\r\n        \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        \r\n        {/* Branch Marker */}\r\n        <Marker position={branchCoords} icon={branchIcon}>\r\n          <Popup>\r\n            <div className=\"p-2\">\r\n              <h3 className=\"font-bold text-blue-600\">üè¢ {branch.name}</h3>\r\n              <p className=\"text-sm text-gray-600\">{branch.address}</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                üìç {branchCoords[0].toFixed(6)}, {branchCoords[1].toFixed(6)}\r\n              </p>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n        \r\n        {/* Emergency Location Marker */}\r\n        {emergencyCoords && (\r\n          <Marker \r\n            position={emergencyCoords} \r\n            icon={\r\n              generatedEmergencyLocation?.type === 'exact' || generatedEmergencyLocation?.type === 'geocoded' \r\n                ? exactEmergencyIcon \r\n                : emergencyIcon\r\n            }\r\n          >\r\n            <Popup>\r\n              <div className=\"p-2\">\r\n                <h3 className=\"font-bold text-red-600\">üö® Emergency Location</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeName || 'Emergency Request'}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {emergencyRequest?.brigadeLocation || 'Generated Location'}\r\n                </p>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  üìç {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}\r\n                </p>\r\n                {generatedEmergencyLocation && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    {generatedEmergencyLocation.type === 'exact' ? '‚úÖ Exact location' :\r\n                     generatedEmergencyLocation.type === 'geocoded' ? 'üåç Geocoded location' :\r\n                     generatedEmergencyLocation.type === 'provided' ? 'üìç Provided coordinates' :\r\n                     'üé≤ Generated location'}\r\n                  </p>\r\n                )}\r\n                {distance && (\r\n                  <p className=\"text-xs text-blue-600 mt-1\">\r\n                    üìè Distance: {distance.toFixed(2)} km\r\n                  </p>\r\n                )}\r\n                {estimatedTime && (\r\n                  <p className=\"text-xs text-green-600\">\r\n                    ‚è±Ô∏è Est. Time: {estimatedTime}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        )}\r\n        \r\n        {/* Route Line */}\r\n        {showRoute && route.length > 0 && (\r\n          <Polyline\r\n            positions={route}\r\n            color=\"#3B82F6\"\r\n            weight={4}\r\n            opacity={0.8}\r\n            dashArray=\"10, 10\"\r\n          />\r\n        )}\r\n        \r\n        {/* Loading indicator */}\r\n        {(loading || isGeocoding) && (\r\n          <div className=\"absolute top-4 left-4 bg-white p-2 rounded shadow-lg z-[1000]\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\r\n              <span className=\"text-sm text-gray-600\">\r\n                {isGeocoding ? 'Finding exact location...' : 'Calculating route...'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </MapContainer>\r\n      \r\n      {/* Map Info Panel */}\r\n      <div className=\"absolute bottom-4 left-4 bg-white p-3 rounded shadow-lg z-[1000] max-w-xs\">\r\n        <h4 className=\"font-semibold text-gray-800 mb-2\">üìç Route Information</h4>\r\n        <div className=\"text-sm space-y-1\">\r\n          <p><strong>From:</strong> {branch.name}</p>\r\n          <p><strong>To:</strong> {emergencyRequest?.brigadeName || 'Emergency Location'}</p>\r\n          {emergencyRequest?.brigadeLocation && (\r\n            <p className=\"text-xs text-gray-600\"><strong>Address:</strong> {emergencyRequest.brigadeLocation}</p>\r\n          )}\r\n          {emergencyCoords && (\r\n            <p className=\"text-xs text-gray-600\"><strong>Map Coords:</strong> {emergencyCoords[0].toFixed(6)}, {emergencyCoords[1].toFixed(6)}</p>\r\n          )}\r\n          {generatedEmergencyLocation && (\r\n            <p className={`text-xs font-medium ${\r\n              generatedEmergencyLocation.type === 'exact' ? 'text-green-600' :\r\n              generatedEmergencyLocation.type === 'geocoded' ? 'text-blue-600' :\r\n              generatedEmergencyLocation.type === 'provided' ? 'text-blue-600' :\r\n              'text-orange-600'\r\n            }`}>\r\n              {generatedEmergencyLocation.type === 'exact' ? '‚úÖ Exact location' :\r\n               generatedEmergencyLocation.type === 'geocoded' ? 'üåç Geocoded location' :\r\n               generatedEmergencyLocation.type === 'provided' ? 'üìç Provided coordinates' :\r\n               'üé≤ Generated location'}\r\n            </p>\r\n          )}\r\n          {distance && (\r\n            <p><strong>Distance:</strong> {distance.toFixed(2)} km</p>\r\n          )}\r\n          {estimatedTime && (\r\n            <p><strong>Est. Time:</strong> {estimatedTime}</p>\r\n          )}\r\n          {emergencyRequest?.priority && (\r\n            <p className={`text-xs px-2 py-1 rounded ${\r\n              emergencyRequest.priority === 'Critical' ? 'bg-red-100 text-red-800' :\r\n              emergencyRequest.priority === 'High' ? 'bg-orange-100 text-orange-800' :\r\n              'bg-yellow-100 text-yellow-800'\r\n            }`}>\r\n              Priority: {emergencyRequest.priority}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveMap;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,eAAe;AACxF,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAOF,CAAC,CAACG,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW;AAC3CN,CAAC,CAACG,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC;EAC1BC,aAAa,EAAEC,OAAO,CAAC,wCAAwC,CAAC;EAChEC,OAAO,EAAED,OAAO,CAAC,qCAAqC,CAAC;EACvDE,SAAS,EAAEF,OAAO,CAAC,uCAAuC;AAC5D,CAAC,CAAC;;AAEF;AACA,MAAMG,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOd,CAAC,CAACe,OAAO,CAAC;IACfC,SAAS,EAAE,iBAAiB;IAC5BC,IAAI,EAAE;AACV;AACA,4BAA4BJ,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkDC,QAAQ;AAC1D;AACA,KAAK;IACDI,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;EACrB,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,UAAU,GAAGR,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC;AACpD,MAAMS,aAAa,GAAGT,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC;AACvD,MAAMU,kBAAkB,GAAGV,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9D,MAAMW,UAAU,GAAGX,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC;;AAEpD;AACA,MAAMY,UAAU,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAMC,GAAG,GAAG7B,MAAM,CAAC,CAAC;EAEpBR,SAAS,CAAC,MAAM;IACd,IAAIkC,MAAM,IAAIC,IAAI,EAAE;MAClBE,GAAG,CAACC,OAAO,CAACJ,MAAM,EAAEC,IAAI,CAAC;IAC3B;EACF,CAAC,EAAE,CAACD,MAAM,EAAEC,IAAI,EAAEE,GAAG,CAAC,CAAC;EAEvB,OAAO,IAAI;AACb,CAAC;;AAED;AAAAD,EAAA,CAZMH,UAAU;EAAA,QACFzB,MAAM;AAAA;AAAA+B,EAAA,GADdN,UAAU;AAahB,MAAMO,6BAA6B,GAAIC,OAAO,IAAK;EACjD,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EAEzB,MAAMC,YAAY,GAAGD,OAAO,CAACE,WAAW,CAAC,CAAC;EAC1CC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEJ,OAAO,CAAC;EAClEG,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,YAAY,CAAC;;EAErD;EACA,IAAIA,YAAY,CAACI,QAAQ,CAAC,UAAU,CAAC,IAAIJ,YAAY,CAACI,QAAQ,CAAC,eAAe,CAAC,IAAIJ,YAAY,CAACI,QAAQ,CAAC,YAAY,CAAC,EAAE;IACtHF,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;IAC1ED,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAChE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;EAC5B;;EAEA;EACA,IAAIH,YAAY,CAACI,QAAQ,CAAC,YAAY,CAAC,IAAIJ,YAAY,CAACI,QAAQ,CAAC,iBAAiB,CAAC,EAAE;IACnFF,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;IACjE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;EAC1B;EAEA,IAAIH,YAAY,CAACI,QAAQ,CAAC,SAAS,CAAC,IAAIJ,YAAY,CAACI,QAAQ,CAAC,eAAe,CAAC,EAAE;IAC9EF,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC5D,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;EAC1B;EAEAD,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEJ,OAAO,CAAC;EAC3D,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA,MAAMM,cAAc,GAAG,MAAON,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EAEzB,IAAI;IACFG,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,OAAO,CAAC;;IAE7C;IACA,MAAMO,aAAa,GAAG,CACpB,GAAGP,OAAO,aAAa,EACvB,GAAGA,OAAO,sBAAsB,EAChCA,OAAO,EACPA,OAAO,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAC/C;IAED,KAAK,MAAMC,WAAW,IAAIF,aAAa,EAAE;MACvC,IAAI;QACFJ,OAAO,CAACC,GAAG,CAAC,yBAAyBK,WAAW,GAAG,CAAC;QAEpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4DAA4DC,kBAAkB,CAACH,WAAW,CAAC,2CAC7F,CAAC;QAED,MAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UAC3B,IAAIC,UAAU,GAAGH,IAAI,CAAC,CAAC,CAAC;;UAExB;UACA,KAAK,MAAMI,MAAM,IAAIJ,IAAI,EAAE;YACzB,IAAII,MAAM,CAACjB,OAAO,IACdkB,UAAU,CAACD,MAAM,CAACE,GAAG,CAAC,GAAG,GAAG,IAAID,UAAU,CAACD,MAAM,CAACE,GAAG,CAAC,GAAG,IAAI,IAC7DD,UAAU,CAACD,MAAM,CAACG,GAAG,CAAC,GAAG,IAAI,IAAIF,UAAU,CAACD,MAAM,CAACG,GAAG,CAAC,GAAG,IAAI,EAAE;cAClEJ,UAAU,GAAGC,MAAM;cACnBd,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,MAAM,CAACI,YAAY,CAAC;cACjE;YACF;UACF;UAEA,MAAMC,MAAM,GAAG,CAACJ,UAAU,CAACF,UAAU,CAACG,GAAG,CAAC,EAAED,UAAU,CAACF,UAAU,CAACI,GAAG,CAAC,CAAC;UAEvE,IAAIE,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YAC/EnB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkB,MAAM,CAAC;YAC9C,OAAOA,MAAM;UACf;QACF;MACF,CAAC,CAAC,OAAOC,aAAa,EAAE;QACtBpB,OAAO,CAACC,GAAG,CAAC,iCAAiCmB,aAAa,CAACC,OAAO,EAAE,CAAC;QACrE;MACF;IACF;IAEArB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,OAAO,IAAI;EAEb,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdtB,OAAO,CAACsB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMC,yBAAyB,GAAGA,CAACC,YAAY,EAAEC,aAAa,GAAG,EAAE,EAAE5B,OAAO,GAAG,IAAI,KAAK;EACtF;EACA,IAAIA,OAAO,EAAE;IACX,MAAM6B,WAAW,GAAG9B,6BAA6B,CAACC,OAAO,CAAC;IAC1D,IAAI6B,WAAW,EAAE;MACf1B,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEJ,OAAO,CAAC;MAC/D,OAAO6B,WAAW;IACpB;EACF;;EAEA;EACA1B,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEwB,aAAa,EAAE,IAAI,CAAC;EACxE,MAAME,CAAC,GAAG,IAAI,CAAC,CAAC;;EAEhB;EACA,MAAMC,IAAI,GAAGJ,YAAY,CAAC,CAAC,CAAC,GAAGK,IAAI,CAACC,EAAE,GAAG,GAAG;EAC5C,MAAMC,IAAI,GAAGP,YAAY,CAAC,CAAC,CAAC,GAAGK,IAAI,CAACC,EAAE,GAAG,GAAG;;EAE5C;EACA,MAAME,QAAQ,GAAGH,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGR,aAAa;;EAE9C;EACA,MAAMS,OAAO,GAAGL,IAAI,CAACI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAGJ,IAAI,CAACC,EAAE;;EAE3C;EACA,MAAMK,IAAI,GAAGN,IAAI,CAACO,IAAI,CACpBP,IAAI,CAACQ,GAAG,CAACT,IAAI,CAAC,GAAGC,IAAI,CAACS,GAAG,CAACN,QAAQ,GAAGL,CAAC,CAAC,GACvCE,IAAI,CAACS,GAAG,CAACV,IAAI,CAAC,GAAGC,IAAI,CAACQ,GAAG,CAACL,QAAQ,GAAGL,CAAC,CAAC,GAAGE,IAAI,CAACS,GAAG,CAACJ,OAAO,CAC5D,CAAC;EAED,MAAMK,IAAI,GAAGR,IAAI,GAAGF,IAAI,CAACW,KAAK,CAC5BX,IAAI,CAACQ,GAAG,CAACH,OAAO,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACL,QAAQ,GAAGL,CAAC,CAAC,GAAGE,IAAI,CAACS,GAAG,CAACV,IAAI,CAAC,EAC3DC,IAAI,CAACS,GAAG,CAACN,QAAQ,GAAGL,CAAC,CAAC,GAAGE,IAAI,CAACQ,GAAG,CAACT,IAAI,CAAC,GAAGC,IAAI,CAACQ,GAAG,CAACF,IAAI,CACzD,CAAC;EAED,OAAO,CACLA,IAAI,GAAG,GAAG,GAAGN,IAAI,CAACC,EAAE,EACpBS,IAAI,GAAG,GAAG,GAAGV,IAAI,CAACC,EAAE,CACrB;AACH,CAAC;;AAED;AACA,MAAMW,iBAAiB,GAAGA,CAACb,IAAI,EAAEG,IAAI,EAAEI,IAAI,EAAEI,IAAI,KAAK;EACpD,MAAMZ,CAAC,GAAG,IAAI,CAAC,CAAC;EAChB,MAAMe,IAAI,GAAG,CAACP,IAAI,GAAGP,IAAI,IAAIC,IAAI,CAACC,EAAE,GAAG,GAAG;EAC1C,MAAMa,IAAI,GAAG,CAACJ,IAAI,GAAGR,IAAI,IAAIF,IAAI,CAACC,EAAE,GAAG,GAAG;EAC1C,MAAMc,CAAC,GAAGf,IAAI,CAACQ,GAAG,CAACK,IAAI,GAAC,CAAC,CAAC,GAAGb,IAAI,CAACQ,GAAG,CAACK,IAAI,GAAC,CAAC,CAAC,GAC3Cb,IAAI,CAACS,GAAG,CAACV,IAAI,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,GAAGD,IAAI,CAACS,GAAG,CAACH,IAAI,GAAGN,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,GAC/DD,IAAI,CAACQ,GAAG,CAACM,IAAI,GAAC,CAAC,CAAC,GAAGd,IAAI,CAACQ,GAAG,CAACM,IAAI,GAAC,CAAC,CAAC;EACrC,MAAME,CAAC,GAAG,CAAC,GAAGhB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACiB,IAAI,CAACF,CAAC,CAAC,EAAEf,IAAI,CAACiB,IAAI,CAAC,CAAC,GAACF,CAAC,CAAC,CAAC;EACtD,OAAOjB,CAAC,GAAGkB,CAAC;AACd,CAAC;AAED,MAAME,cAAc,GAAGA,CAAC;EACtBC,cAAc;EACdC,gBAAgB;EAChBC,SAAS,GAAG,KAAK;EACjBC,iBAAiB;EACjBC;AACF,CAAC,KAAK;EAAAC,GAAA;EACJ,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlG,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACmG,KAAK,EAAEC,QAAQ,CAAC,GAAGpG,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC2E,QAAQ,EAAE0B,WAAW,CAAC,GAAGrG,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACsG,aAAa,EAAEC,gBAAgB,CAAC,GAAGvG,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACwG,OAAO,EAAEC,UAAU,CAAC,GAAGzG,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0G,SAAS,EAAEC,YAAY,CAAC,GAAG3G,QAAQ,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/D,MAAM,CAAC4G,OAAO,EAAEC,UAAU,CAAC,GAAG7G,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC8G,WAAW,EAAEC,cAAc,CAAC,GAAG/G,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgH,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGjH,QAAQ,CAAC,IAAI,CAAC;EAElF,MAAMkH,MAAM,GAAGjH,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAMkH,oBAAoB,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMC,qBAAqB,GAAG;IAC5BC,IAAI,EAAE,kBAAkB;IACxB7E,OAAO,EAAE,uCAAuC;IAChD8E,WAAW,EAAEH;EACf,CAAC;EAED,MAAMI,MAAM,GAAG5B,cAAc,IAAIyB,qBAAqB;EACtD,MAAMjD,YAAY,GAAGoD,MAAM,CAACD,WAAW,IAAIH,oBAAoB;;EAE/D;EACApH,SAAS,CAAC,MAAM;IACd,MAAMyH,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C7E,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEgD,gBAAgB,CAAC;MACtDjD,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEqD,eAAe,CAAC;MAE5D,IAAIL,gBAAgB,IAAI,CAACK,eAAe,EAAE;QACxC,IAAInC,MAAM;QACV,IAAI2D,YAAY,GAAG,WAAW;QAE9B9E,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QAEjE,IAAIgD,gBAAgB,CAAC0B,WAAW,EAAE;UAChC;UACAxD,MAAM,GAAG,CAAC8B,gBAAgB,CAAC0B,WAAW,CAAC3D,GAAG,EAAEiC,gBAAgB,CAAC0B,WAAW,CAACI,GAAG,CAAC;UAC7ED,YAAY,GAAG,UAAU;UACzB9E,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEkB,MAAM,CAAC;QACvD,CAAC,MAAM,IAAI8B,gBAAgB,CAAC+B,eAAe,EAAE;UAC3ChF,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgD,gBAAgB,CAAC+B,eAAe,CAAC;;UAErE;UACA,MAAMtD,WAAW,GAAG9B,6BAA6B,CAACqD,gBAAgB,CAAC+B,eAAe,CAAC;UACnFhF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEyB,WAAW,CAAC;UAEnD,IAAIA,WAAW,EAAE;YACfP,MAAM,GAAGO,WAAW;YACpBoD,YAAY,GAAG,OAAO;YACtB9E,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEgD,gBAAgB,CAAC+B,eAAe,EAAE,IAAI,EAAE7D,MAAM,CAAC;UACvG,CAAC,MAAM;YACL;YACAnB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEgD,gBAAgB,CAAC+B,eAAe,CAAC;YAClFZ,cAAc,CAAC,IAAI,CAAC;YACpB,MAAMa,cAAc,GAAG,MAAM9E,cAAc,CAAC8C,gBAAgB,CAAC+B,eAAe,CAAC;YAC7EZ,cAAc,CAAC,KAAK,CAAC;YAErB,IAAIa,cAAc,EAAE;cAClB9D,MAAM,GAAG8D,cAAc;cACvBH,YAAY,GAAG,UAAU;cACzB9E,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEgD,gBAAgB,CAAC+B,eAAe,EAAE,KAAK,EAAE7D,MAAM,CAAC;YAClG,CAAC,MAAM;cACL;cACAA,MAAM,GAAGI,yBAAyB,CAACC,YAAY,EAAE,EAAE,EAAEyB,gBAAgB,CAAC+B,eAAe,CAAC;cACtFF,YAAY,GAAG,WAAW;cAC1B9E,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEkB,MAAM,CAAC;YAC5E;UACF;QACF,CAAC,MAAM;UACL;UACAA,MAAM,GAAGI,yBAAyB,CAACC,YAAY,EAAE,EAAE,CAAC;UACpDsD,YAAY,GAAG,WAAW;UAC1B9E,OAAO,CAACC,GAAG,CAAC,kEAAkE,EAAEkB,MAAM,CAAC;QACzF;;QAEA;QACA,MAAM+D,YAAY,GAAG;UACnBlE,GAAG,EAAEG,MAAM,CAAC,CAAC,CAAC;UACd4D,GAAG,EAAE5D,MAAM,CAAC,CAAC,CAAC;UACdtB,OAAO,EAAEoD,gBAAgB,CAAC+B,eAAe,IAAI,8BAA8B;UAC3EG,IAAI,EAAEL;QACR,CAAC;QACDR,6BAA6B,CAACY,YAAY,CAAC;;QAE3C;QACA,IAAI9B,4BAA4B,EAAE;UAChCA,4BAA4B,CAAC8B,YAAY,CAAC;QAC5C;QAEA3B,kBAAkB,CAACpC,MAAM,CAAC;;QAE1B;QACAnB,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEkB,MAAM,CAAC;QAC9DnB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgD,gBAAgB,CAAC+B,eAAe,CAAC;QAC5DhF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE6E,YAAY,CAAC;QAC9C9E,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEkB,MAAM,CAAC;QAC3DnB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEiF,YAAY,CAAC;;QAErD;QACA,MAAME,kBAAkB,GAAG3C,iBAAiB,CAC1CjB,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,EAChCL,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CACrB,CAAC;QACDuC,WAAW,CAAC0B,kBAAkB,CAAC;;QAE/B;QACA,MAAMC,WAAW,GAAGD,kBAAkB,GAAG,EAAE;QAC3C,MAAME,KAAK,GAAGzD,IAAI,CAAC0D,KAAK,CAACF,WAAW,CAAC;QACrC,MAAMG,OAAO,GAAG3D,IAAI,CAAC4D,KAAK,CAAC,CAACJ,WAAW,GAAGC,KAAK,IAAI,EAAE,CAAC;QACtD,MAAMI,UAAU,GAAGJ,KAAK,GAAG,CAAC,GAAG,GAAGA,KAAK,KAAKE,OAAO,GAAG,GAAG,GAAGA,OAAO,GAAG;QACtE5B,gBAAgB,CAAC8B,UAAU,CAAC;;QAE5B;QACA,MAAMC,SAAS,GAAG,CAACnE,YAAY,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACnD,MAAMyE,SAAS,GAAG,CAACpE,YAAY,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACnD6C,YAAY,CAAC,CAAC2B,SAAS,EAAEC,SAAS,CAAC,CAAC;QACpC1B,UAAU,CAAC,EAAE,CAAC;MAChB;IACF,CAAC;IAEDW,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAAC5B,gBAAgB,EAAEzB,YAAY,EAAE8B,eAAe,EAAEF,4BAA4B,CAAC,CAAC;;EAEnF;EACAhG,SAAS,CAAC,MAAM;IACd,IAAI8F,SAAS,IAAII,eAAe,IAAI9B,YAAY,EAAE;MAChDqE,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAAC3C,SAAS,EAAEI,eAAe,EAAE9B,YAAY,CAAC,CAAC;EAE9C,MAAMqE,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACvC,eAAe,IAAI,CAAC9B,YAAY,EAAE;IAEvCsC,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF;MACA,MAAMgC,WAAW,GAAG,CAClBtE,YAAY,EACZ,CACE,CAACA,YAAY,CAAC,CAAC,CAAC,GAAG8B,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAACzB,IAAI,CAACI,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,EACzE,CAACT,YAAY,CAAC,CAAC,CAAC,GAAG8B,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAACzB,IAAI,CAACI,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAC1E,EACDqB,eAAe,CAChB;MAEDG,QAAQ,CAACqC,WAAW,CAAC;;MAErB;MACA,IAAIC,YAAY,GAAG,CAAC;MACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAAClF,MAAM,GAAG,CAAC,EAAEoF,CAAC,EAAE,EAAE;QAC/CD,YAAY,IAAItD,iBAAiB,CAC/BqD,WAAW,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEF,WAAW,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,EACpCF,WAAW,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEF,WAAW,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC7C,CAAC;MACH;;MAEA;MACAD,YAAY,IAAI,GAAG,CAAC,CAAC;MACrBrC,WAAW,CAACqC,YAAY,CAAC;;MAEzB;MACA,MAAMV,WAAW,GAAGU,YAAY,GAAG,EAAE,CAAC,CAAC;MACvC,MAAMT,KAAK,GAAGzD,IAAI,CAAC0D,KAAK,CAACF,WAAW,CAAC;MACrC,MAAMG,OAAO,GAAG3D,IAAI,CAAC4D,KAAK,CAAC,CAACJ,WAAW,GAAGC,KAAK,IAAI,EAAE,CAAC;MACtD,MAAMI,UAAU,GAAGJ,KAAK,GAAG,CAAC,GAAG,GAAGA,KAAK,KAAKE,OAAO,GAAG,GAAG,GAAGA,OAAO,GAAG;MACtE5B,gBAAgB,CAAC8B,UAAU,CAAC;;MAE5B;MACA,IAAIvC,iBAAiB,EAAE;QACrBA,iBAAiB,CAAC;UAChBnB,QAAQ,EAAE+D,YAAY;UACtBpC,aAAa,EAAE+B,UAAU;UACzBlC,KAAK,EAAEsC;QACT,CAAC,CAAC;MACJ;IAEF,CAAC,CAAC,OAAOxE,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,SAAS;MACRwC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACE/F,OAAA;IAAKc,SAAS,EAAC,+DAA+D;IAAAoH,QAAA,gBAC5ElI,OAAA,CAACR,YAAY;MACX2I,GAAG,EAAE3B,MAAO;MACZjF,MAAM,EAAEyE,SAAU;MAClBxE,IAAI,EAAE0E,OAAQ;MACdkC,KAAK,EAAE;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAE;MACzCC,eAAe,EAAE,IAAK;MAAAL,QAAA,gBAEtBlI,OAAA,CAACsB,UAAU;QAACC,MAAM,EAAEyE,SAAU;QAACxE,IAAI,EAAE0E;MAAQ;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEhD3I,OAAA,CAACP,SAAS;QACRmJ,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAoD;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eAGF3I,OAAA,CAACN,MAAM;QAACoJ,QAAQ,EAAErF,YAAa;QAACsF,IAAI,EAAE7H,UAAW;QAAAgH,QAAA,eAC/ClI,OAAA,CAACL,KAAK;UAAAuI,QAAA,eACJlI,OAAA;YAAKc,SAAS,EAAC,KAAK;YAAAoH,QAAA,gBAClBlI,OAAA;cAAIc,SAAS,EAAC,yBAAyB;cAAAoH,QAAA,GAAC,eAAG,EAACrB,MAAM,CAACF,IAAI;YAAA;cAAA6B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC7D3I,OAAA;cAAGc,SAAS,EAAC,uBAAuB;cAAAoH,QAAA,EAAErB,MAAM,CAAC/E;YAAO;cAAA0G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzD3I,OAAA;cAAGc,SAAS,EAAC,4BAA4B;cAAAoH,QAAA,GAAC,eACrC,EAACzE,YAAY,CAAC,CAAC,CAAC,CAACuF,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAACvF,YAAY,CAAC,CAAC,CAAC,CAACuF,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EAGRpD,eAAe,iBACdvF,OAAA,CAACN,MAAM;QACLoJ,QAAQ,EAAEvD,eAAgB;QAC1BwD,IAAI,EACF,CAAAzC,0BAA0B,aAA1BA,0BAA0B,uBAA1BA,0BAA0B,CAAEc,IAAI,MAAK,OAAO,IAAI,CAAAd,0BAA0B,aAA1BA,0BAA0B,uBAA1BA,0BAA0B,CAAEc,IAAI,MAAK,UAAU,GAC3FhG,kBAAkB,GAClBD,aACL;QAAA+G,QAAA,eAEDlI,OAAA,CAACL,KAAK;UAAAuI,QAAA,eACJlI,OAAA;YAAKc,SAAS,EAAC,KAAK;YAAAoH,QAAA,gBAClBlI,OAAA;cAAIc,SAAS,EAAC,wBAAwB;cAAAoH,QAAA,EAAC;YAAqB;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjE3I,OAAA;cAAGc,SAAS,EAAC,uBAAuB;cAAAoH,QAAA,EACjC,CAAAhD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE+D,WAAW,KAAI;YAAmB;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC,eACJ3I,OAAA;cAAGc,SAAS,EAAC,uBAAuB;cAAAoH,QAAA,EACjC,CAAAhD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE+B,eAAe,KAAI;YAAoB;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzD,CAAC,eACJ3I,OAAA;cAAGc,SAAS,EAAC,4BAA4B;cAAAoH,QAAA,GAAC,eACrC,EAAC3C,eAAe,CAAC,CAAC,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAACzD,eAAe,CAAC,CAAC,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjE,CAAC,EACHrC,0BAA0B,iBACzBtG,OAAA;cAAGc,SAAS,EAAC,4BAA4B;cAAAoH,QAAA,EACtC5B,0BAA0B,CAACc,IAAI,KAAK,OAAO,GAAG,kBAAkB,GAChEd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,sBAAsB,GACvEd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,yBAAyB,GAC1E;YAAuB;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvB,CACJ,EACA1E,QAAQ,iBACPjE,OAAA;cAAGc,SAAS,EAAC,4BAA4B;cAAAoH,QAAA,GAAC,yBAC3B,EAACjE,QAAQ,CAAC+E,OAAO,CAAC,CAAC,CAAC,EAAC,KACpC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CACJ,EACA/C,aAAa,iBACZ5F,OAAA;cAAGc,SAAS,EAAC,wBAAwB;cAAAoH,QAAA,GAAC,0BACtB,EAACtC,aAAa;YAAA;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3B,CACJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CACT,EAGAxD,SAAS,IAAIM,KAAK,CAAC5C,MAAM,GAAG,CAAC,iBAC5B7C,OAAA,CAACJ,QAAQ;QACPsJ,SAAS,EAAEzD,KAAM;QACjB9E,KAAK,EAAC,SAAS;QACfwI,MAAM,EAAE,CAAE;QACVC,OAAO,EAAE,GAAI;QACbC,SAAS,EAAC;MAAQ;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CACF,EAGA,CAAC7C,OAAO,IAAIM,WAAW,kBACtBpG,OAAA;QAAKc,SAAS,EAAC,+DAA+D;QAAAoH,QAAA,eAC5ElI,OAAA;UAAKc,SAAS,EAAC,6BAA6B;UAAAoH,QAAA,gBAC1ClI,OAAA;YAAKc,SAAS,EAAC;UAA8D;YAAA0H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACpF3I,OAAA;YAAMc,SAAS,EAAC,uBAAuB;YAAAoH,QAAA,EACpC9B,WAAW,GAAG,2BAA2B,GAAG;UAAsB;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW,CAAC,eAGf3I,OAAA;MAAKc,SAAS,EAAC,2EAA2E;MAAAoH,QAAA,gBACxFlI,OAAA;QAAIc,SAAS,EAAC,kCAAkC;QAAAoH,QAAA,EAAC;MAAoB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1E3I,OAAA;QAAKc,SAAS,EAAC,mBAAmB;QAAAoH,QAAA,gBAChClI,OAAA;UAAAkI,QAAA,gBAAGlI,OAAA;YAAAkI,QAAA,EAAQ;UAAK;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC9B,MAAM,CAACF,IAAI;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3C3I,OAAA;UAAAkI,QAAA,gBAAGlI,OAAA;YAAAkI,QAAA,EAAQ;UAAG;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,CAAAzD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE+D,WAAW,KAAI,oBAAoB;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAClF,CAAAzD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE+B,eAAe,kBAChCjH,OAAA;UAAGc,SAAS,EAAC,uBAAuB;UAAAoH,QAAA,gBAAClI,OAAA;YAAAkI,QAAA,EAAQ;UAAQ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACzD,gBAAgB,CAAC+B,eAAe;QAAA;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CACrG,EACApD,eAAe,iBACdvF,OAAA;UAAGc,SAAS,EAAC,uBAAuB;UAAAoH,QAAA,gBAAClI,OAAA;YAAAkI,QAAA,EAAQ;UAAW;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpD,eAAe,CAAC,CAAC,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAACzD,eAAe,CAAC,CAAC,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CACtI,EACArC,0BAA0B,iBACzBtG,OAAA;UAAGc,SAAS,EAAE,uBACZwF,0BAA0B,CAACc,IAAI,KAAK,OAAO,GAAG,gBAAgB,GAC9Dd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,eAAe,GAChEd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,eAAe,GAChE,iBAAiB,EAChB;UAAAc,QAAA,EACA5B,0BAA0B,CAACc,IAAI,KAAK,OAAO,GAAG,kBAAkB,GAChEd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,sBAAsB,GACvEd,0BAA0B,CAACc,IAAI,KAAK,UAAU,GAAG,yBAAyB,GAC1E;QAAuB;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CACJ,EACA1E,QAAQ,iBACPjE,OAAA;UAAAkI,QAAA,gBAAGlI,OAAA;YAAAkI,QAAA,EAAQ;UAAS;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC1E,QAAQ,CAAC+E,OAAO,CAAC,CAAC,CAAC,EAAC,KAAG;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAC1D,EACA/C,aAAa,iBACZ5F,OAAA;UAAAkI,QAAA,gBAAGlI,OAAA;YAAAkI,QAAA,EAAQ;UAAU;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC/C,aAAa;QAAA;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAClD,EACA,CAAAzD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEoE,QAAQ,kBACzBtJ,OAAA;UAAGc,SAAS,EAAE,6BACZoE,gBAAgB,CAACoE,QAAQ,KAAK,UAAU,GAAG,yBAAyB,GACpEpE,gBAAgB,CAACoE,QAAQ,KAAK,MAAM,GAAG,+BAA+B,GACtE,+BAA+B,EAC9B;UAAApB,QAAA,GAAC,YACQ,EAAChD,gBAAgB,CAACoE,QAAQ;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrD,GAAA,CAjVIN,cAAc;AAAAuE,GAAA,GAAdvE,cAAc;AAmVpB,eAAeA,cAAc;AAAC,IAAApD,EAAA,EAAA2H,GAAA;AAAAC,YAAA,CAAA5H,EAAA;AAAA4H,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}