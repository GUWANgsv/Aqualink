{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for debugging\napiClient.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n\n// Emergency Request API calls\nexport const emergencyRequestAPI = {\n  // Create new emergency request\n  createRequest: async requestData => {\n    try {\n      const response = await apiClient.post('/emergency-requests/create', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating emergency request:', error);\n      throw error;\n    }\n  },\n  // Get all emergency requests\n  getAllRequests: async () => {\n    try {\n      const response = await apiClient.get('/emergency-requests/all');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests:', error);\n      throw error;\n    }\n  },\n  // Get emergency request by ID\n  getRequestById: async id => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency request:', error);\n      throw error;\n    }\n  },\n  // Update emergency request status\n  updateRequestStatus: async (id, updateData) => {\n    try {\n      console.log('Updating request status:', id, updateData);\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating emergency request status:', error);\n      throw error;\n    }\n  },\n  // Get emergency requests by status\n  getRequestsByStatus: async status => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests by status:', error);\n      throw error;\n    }\n  },\n  // Get emergency requests by brigade\n  getRequestsByBrigade: async brigadeId => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching emergency requests by brigade:', error);\n      throw error;\n    }\n  },\n  // Find nearest branch\n  findNearestBranch: async coordinates => {\n    try {\n      console.log('Finding nearest branch with coordinates:', coordinates);\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\n      return response.data;\n    } catch (error) {\n      console.error('Error finding nearest branch:', error);\n      throw error;\n    }\n  },\n  // Delete emergency request\n  deleteRequest: async id => {\n    try {\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting emergency request:', error);\n      throw error;\n    }\n  },\n  // Get emergency requests by driver\n  getDriverEmergencyRequests: async driverId => {\n    try {\n      const response = await apiClient.get(`/emergency-requests/driver/${driverId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching driver emergency requests:', error);\n      throw error;\n    }\n  }\n};\n\n// Branch API calls\nexport const branchAPI = {\n  getAllBranches: async () => {\n    try {\n      const response = await apiClient.get('/public/branches');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branches:', error);\n      throw error;\n    }\n  },\n  getBranchById: async id => {\n    try {\n      const response = await apiClient.get(`/branches/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branch:', error);\n      throw error;\n    }\n  },\n  createBranch: async branchData => {\n    try {\n      console.log('Creating branch with data:', branchData);\n      const response = await apiClient.post('/branches/create', branchData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating branch:', error);\n      throw error;\n    }\n  },\n  updateBranch: async (id, branchData) => {\n    try {\n      const response = await apiClient.put(`/branches/${id}`, branchData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating branch:', error);\n      throw error;\n    }\n  },\n  deleteBranch: async id => {\n    try {\n      const response = await apiClient.delete(`/branches/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting branch:', error);\n      throw error;\n    }\n  },\n  getBranchesByStatus: async status => {\n    try {\n      const response = await apiClient.get(`/branches/status/${status}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branches by status:', error);\n      throw error;\n    }\n  },\n  updateBranchStock: async (id, stockData) => {\n    try {\n      const response = await apiClient.put(`/branches/${id}/stock`, stockData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating branch stock:', error);\n      throw error;\n    }\n  },\n  getBranchesWithinRadius: async coordinates => {\n    try {\n      const response = await apiClient.get('/branches/within-radius', {\n        params: coordinates\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branches within radius:', error);\n      throw error;\n    }\n  },\n  getBranchStatistics: async () => {\n    try {\n      const response = await apiClient.get('/branches/statistics');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branch statistics:', error);\n      throw error;\n    }\n  }\n};\n\n// User API calls\nexport const userAPI = {\n  getAllUsers: async () => {\n    try {\n      const response = await apiClient.get('/users');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  },\n  getUserById: async id => {\n    try {\n      const response = await apiClient.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n};\n\n// Employee API calls\nexport const employeeAPI = {\n  getAllEmployees: async () => {\n    try {\n      const response = await apiClient.get('/employees');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n  getEmployeeById: async id => {\n    try {\n      const response = await apiClient.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee:', error);\n      throw error;\n    }\n  },\n  createEmployee: async employeeData => {\n    try {\n      console.log('Creating employee with data:', employeeData);\n      const response = await apiClient.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating employee:', error);\n      throw error;\n    }\n  },\n  updateEmployee: async (id, employeeData) => {\n    try {\n      const response = await apiClient.put(`/employees/${id}`, employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating employee:', error);\n      throw error;\n    }\n  },\n  deleteEmployee: async id => {\n    try {\n      const response = await apiClient.delete(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting employee:', error);\n      throw error;\n    }\n  },\n  getDriversByBranch: async branchName => {\n    try {\n      const response = await apiClient.get(`/employees/drivers/branch/${branchName}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching drivers by branch:', error);\n      throw error;\n    }\n  },\n  updateDriverStatus: async (driverId, driverStatus) => {\n    try {\n      const response = await apiClient.put(`/employees/drivers/${driverId}/status`, {\n        driverStatus\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating driver status:', error);\n      throw error;\n    }\n  },\n  updateOwnDriverStatus: async driverStatus => {\n    try {\n      const response = await apiClient.put(`/employees/drivers/own-status`, {\n        driverStatus\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating own driver status:', error);\n      throw error;\n    }\n  },\n  updateOwnProfile: async profileData => {\n    try {\n      const response = await apiClient.put(`/employees/own-profile`, profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating own profile:', error);\n      throw error;\n    }\n  }\n};\n\n// Customer Purchase API calls\nexport const customerPurchaseAPI = {\n  getBranchPurchases: async branchName => {\n    try {\n      const response = await apiClient.get(`/CustomerPurchases/branch/${branchName}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching branch purchases:', error);\n      throw error;\n    }\n  },\n  assignDriver: async (purchaseId, driverId) => {\n    try {\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/assign-driver`, {\n        driverId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error assigning driver:', error);\n      throw error;\n    }\n  },\n  startDelivery: async purchaseId => {\n    try {\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/start-delivery`);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting delivery:', error);\n      throw error;\n    }\n  },\n  completeDelivery: async (purchaseId, deliveryNotes) => {\n    try {\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/complete-delivery`, {\n        deliveryNotes\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error completing delivery:', error);\n      throw error;\n    }\n  },\n  getDriverDeliveries: async driverId => {\n    try {\n      const response = await apiClient.get(`/CustomerPurchases/driver/${driverId}/deliveries`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching driver deliveries:', error);\n      throw error;\n    }\n  },\n  getCompletedDeliveries: async (driverId, month = null, year = null) => {\n    try {\n      let url = `/CustomerPurchases/driver/${driverId}/completed-deliveries`;\n      if (month && year) {\n        url += `?month=${month}&year=${year}`;\n      }\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching completed deliveries:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","emergencyRequestAPI","createRequest","requestData","post","getAllRequests","get","getRequestById","id","updateRequestStatus","updateData","put","getRequestsByStatus","getRequestsByBrigade","brigadeId","findNearestBranch","coordinates","deleteRequest","delete","getDriverEmergencyRequests","driverId","branchAPI","getAllBranches","getBranchById","createBranch","branchData","updateBranch","deleteBranch","getBranchesByStatus","updateBranchStock","stockData","getBranchesWithinRadius","params","getBranchStatistics","userAPI","getAllUsers","getUserById","employeeAPI","getAllEmployees","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getDriversByBranch","branchName","updateDriverStatus","driverStatus","updateOwnDriverStatus","updateOwnProfile","profileData","customerPurchaseAPI","getBranchPurchases","assignDriver","purchaseId","startDelivery","completeDelivery","deliveryNotes","getDriverDeliveries","getCompletedDeliveries","month","year"],"sources":["E:/Y2S2/Project/frontend/src/utils/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    console.log('API Request:', config.method?.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for debugging\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Emergency Request API calls\r\nexport const emergencyRequestAPI = {\r\n  // Create new emergency request\r\n  createRequest: async (requestData) => {\r\n    try {\r\n      const response = await apiClient.post('/emergency-requests/create', requestData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating emergency request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all emergency requests\r\n  getAllRequests: async () => {\r\n    try {\r\n      const response = await apiClient.get('/emergency-requests/all');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency request by ID\r\n  getRequestById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update emergency request status\r\n  updateRequestStatus: async (id, updateData) => {\r\n    try {\r\n      console.log('Updating request status:', id, updateData);\r\n      const response = await apiClient.put(`/emergency-requests/${id}/status`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating emergency request status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by status\r\n  getRequestsByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/status/${status}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests by status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by brigade\r\n  getRequestsByBrigade: async (brigadeId) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/brigade/${brigadeId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching emergency requests by brigade:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Find nearest branch\r\n  findNearestBranch: async (coordinates) => {\r\n    try {\r\n      console.log('Finding nearest branch with coordinates:', coordinates);\r\n      const response = await apiClient.post('/emergency-requests/find-nearest-branch', coordinates);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error finding nearest branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete emergency request\r\n  deleteRequest: async (id) => {\r\n    try {\r\n      const response = await apiClient.delete(`/emergency-requests/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting emergency request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get emergency requests by driver\r\n  getDriverEmergencyRequests: async (driverId) => {\r\n    try {\r\n      const response = await apiClient.get(`/emergency-requests/driver/${driverId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching driver emergency requests:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Branch API calls\r\nexport const branchAPI = {\r\n  getAllBranches: async () => {\r\n    try {\r\n      const response = await apiClient.get('/public/branches');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branches:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/branches/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createBranch: async (branchData) => {\r\n    try {\r\n      console.log('Creating branch with data:', branchData);\r\n      const response = await apiClient.post('/branches/create', branchData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateBranch: async (id, branchData) => {\r\n    try {\r\n      const response = await apiClient.put(`/branches/${id}`, branchData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteBranch: async (id) => {\r\n    try {\r\n      const response = await apiClient.delete(`/branches/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchesByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get(`/branches/status/${status}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branches by status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateBranchStock: async (id, stockData) => {\r\n    try {\r\n      const response = await apiClient.put(`/branches/${id}/stock`, stockData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating branch stock:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchesWithinRadius: async (coordinates) => {\r\n    try {\r\n      const response = await apiClient.get('/branches/within-radius', { params: coordinates });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branches within radius:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getBranchStatistics: async () => {\r\n    try {\r\n      const response = await apiClient.get('/branches/statistics');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branch statistics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// User API calls\r\nexport const userAPI = {\r\n  getAllUsers: async () => {\r\n    try {\r\n      const response = await apiClient.get('/users');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getUserById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/users/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Employee API calls\r\nexport const employeeAPI = {\r\n  getAllEmployees: async () => {\r\n    try {\r\n      const response = await apiClient.get('/employees');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching employees:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getEmployeeById: async (id) => {\r\n    try {\r\n      const response = await apiClient.get(`/employees/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching employee:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createEmployee: async (employeeData) => {\r\n    try {\r\n      console.log('Creating employee with data:', employeeData);\r\n      const response = await apiClient.post('/employees', employeeData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating employee:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateEmployee: async (id, employeeData) => {\r\n    try {\r\n      const response = await apiClient.put(`/employees/${id}`, employeeData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating employee:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteEmployee: async (id) => {\r\n    try {\r\n      const response = await apiClient.delete(`/employees/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting employee:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getDriversByBranch: async (branchName) => {\r\n    try {\r\n      const response = await apiClient.get(`/employees/drivers/branch/${branchName}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching drivers by branch:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateDriverStatus: async (driverId, driverStatus) => {\r\n    try {\r\n      const response = await apiClient.put(`/employees/drivers/${driverId}/status`, { driverStatus });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating driver status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateOwnDriverStatus: async (driverStatus) => {\r\n    try {\r\n      const response = await apiClient.put(`/employees/drivers/own-status`, { driverStatus });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating own driver status:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateOwnProfile: async (profileData) => {\r\n    try {\r\n      const response = await apiClient.put(`/employees/own-profile`, profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating own profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Customer Purchase API calls\r\nexport const customerPurchaseAPI = {\r\n  getBranchPurchases: async (branchName) => {\r\n    try {\r\n      const response = await apiClient.get(`/CustomerPurchases/branch/${branchName}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching branch purchases:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  assignDriver: async (purchaseId, driverId) => {\r\n    try {\r\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/assign-driver`, { driverId });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error assigning driver:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  startDelivery: async (purchaseId) => {\r\n    try {\r\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/start-delivery`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error starting delivery:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  completeDelivery: async (purchaseId, deliveryNotes) => {\r\n    try {\r\n      const response = await apiClient.put(`/CustomerPurchases/${purchaseId}/complete-delivery`, { deliveryNotes });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error completing delivery:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getDriverDeliveries: async (driverId) => {\r\n    try {\r\n      const response = await apiClient.get(`/CustomerPurchases/driver/${driverId}/deliveries`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching driver deliveries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getCompletedDeliveries: async (driverId, month = null, year = null) => {\r\n    try {\r\n      let url = `/CustomerPurchases/driver/${driverId}/completed-deliveries`;\r\n      if (month && year) {\r\n        url += `?month=${month}&year=${year}`;\r\n      }\r\n      const response = await apiClient.get(url);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching completed deliveries:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}